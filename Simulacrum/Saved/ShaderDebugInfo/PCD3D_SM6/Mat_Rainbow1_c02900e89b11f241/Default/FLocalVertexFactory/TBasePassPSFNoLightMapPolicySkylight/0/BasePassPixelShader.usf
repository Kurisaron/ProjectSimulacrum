#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 6
// #define __SHADER_TARGET_MINOR 6
// #define ALLOW_STATIC_LIGHTING 1
// #define ALWAYS_EVALUATE_WORLD_POSITION_OFFSET 0
// #define AMPLIFICATIONSHADER 0
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COLORED_LIGHT_FUNCTION_ATLAS 0
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1
// #define COMPILER_DEFINE #define
// #define COMPILER_DXC 1
// #define COMPILER_FXC 0
// #define COMPILER_HLSL 1
// #define COMPILER_SUPPORTS_BARYCENTRIC_INTRINSICS 0
// #define COMPILER_SUPPORTS_NOINLINE 1
// #define COMPUTESHADER 0
// #define DISTORTION_ACCOUNT_FOR_COVERAGE 0
// #define DO_CHECK 1
// #define DO_GUARD_SLOW 0
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define ENABLE_DBUFFER_TEXTURES 1
// #define ENABLE_SKY_LIGHT 1
// #define ES3_1_PROFILE 0
// #define FORWARD_LIGHT_DATA_STRIDE 6
// #define FORWARD_SHADING 1
// #define FORWARD_SHADING_FORCES_SKYLIGHT_CUBEMAPS_BLENDING 0
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0
// #define GBUFFER_HAS_VELOCITY 0
// #define GBUFFER_LAYOUT 0
// #define GBUFFER_REFACTOR 1
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0
// #define GEOMETRYSHADER 0
// #define HAS_FIRST_PERSON_GBUFFER_BIT 0
// #define HAS_INVERTED_Z_BUFFER 1
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1
// #define INSTANCED_STEREO 1
// #define INTERPOLATE_VERTEX_COLOR 0
// #define IRIS_NORMAL 0
// #define IS_BASE_PASS 1
// #define IS_MATERIAL_SHADER 1
// #define IS_MOBILE_BASE_PASS 0
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0
// #define MainPS MainPS
// #define MANUAL_VERTEX_FETCH 1
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0
// #define MATERIAL_CONTACT_SHADOWS 0
// #define MATERIAL_DECAL_READ_MASK 7
// #define MATERIAL_DITHER_OPACITY_MASK 0
// #define MATERIAL_DOMAIN_SURFACE 1
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1
// #define MATERIAL_ENABLE_TRANSLUCENT_HIGH_QUALITY_DIRECTIONAL_LIGHT_SHADOW 0
// #define MATERIAL_ENABLE_TRANSLUCENT_HIGH_QUALITY_LOCAL_LIGHT_SHADOW 0
// #define MATERIAL_ENABLE_TRANSLUCENT_LOCAL_LIGHT_SHADOW 0
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0
// #define MATERIAL_FULLY_ROUGH 0
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0
// #define MATERIAL_IS_SKY 0
// #define MATERIAL_IS_SUBSTRATE 0
// #define MATERIAL_ISTHINSURFACE 0
// #define MATERIAL_LWC_ENABLED 1
// #define MATERIAL_NEURAL_POST_PROCESS 0
// #define MATERIAL_NONMETAL 1
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 0
// #define MATERIAL_PATH_TRACING_BUFFER_READ 0
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0
// #define MATERIAL_ROUGHDIFFUSE 0
// #define MATERIAL_SHADINGMODEL_DEFAULT_LIT 1
// #define MATERIAL_SINGLE_SHADINGMODEL 1
// #define MATERIAL_SKY_ATMOSPHERE 0
// #define MATERIAL_SSR 0
// #define MATERIAL_TANGENTSPACENORMAL 1
// #define MATERIAL_TRANSLUCENT_PASS_AFTERMOTIONBLUR 0
// #define MATERIAL_TWOSIDED 0
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0
// #define MATERIAL_USE_LM_DIRECTIONALITY 1
// #define MATERIAL_USE_PREINTEGRATED_GF 0
// #define MATERIAL_USES_ANISOTROPY 0
// #define MATERIAL_USES_DECAL_LOOKUP 0
// #define MATERIAL_USES_SCENE_COLOR_COPY 0
// #define MATERIAL_VIRTUALTEXTURE_FEEDBACK 0
// #define MATERIALBLENDING_SOLID 1
// #define MATERIALDECALRESPONSEMASK 7
// #define MATERIALDOMAIN_SURFACE 1
// #define MAX_NUM_LIGHTMAP_COEF 2
// #define MESHSHADER 0
// #define MOBILE_MULTI_VIEW 0
// #define MULTI_VIEW 1
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0
// #define NEEDS_PARTICLE_COLOR 0
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0
// #define NEEDS_PER_INSTANCE_RANDOM_PS 0
// #define NUM_CULLED_GRID_PRIMITIVE_TYPES 2
// #define NUM_CULLED_LIGHTS_GRID_STRIDE 2
// #define NUM_CUSTOMIZED_UVS 0
// #define NUM_VIRTUALTEXTURE_FEEDBACK_REQUESTS 0
// #define NUM_VIRTUALTEXTURE_SAMPLES 0
// #define PERMUTATION_SUPPORTS_OIT 0
// #define PIXEL_DEPTH_OFFSET_MODE 1
// #define PIXELSHADER 1
// #define PIXELSHADEROUTPUT_MRT0 1
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1
// #define PLATFORM_FORCE_SIMPLE_SKY_DIFFUSE 0
// #define PLATFORM_MAX_SAMPLERS 32
// #define PLATFORM_SUPPORTS_BARYCENTRICS_SEMANTIC 1
// #define PLATFORM_SUPPORTS_BINDLESS 0
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1
// #define PLATFORM_SUPPORTS_CALLABLE_SHADERS 1
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1
// #define PLATFORM_SUPPORTS_DIAGNOSTIC_BUFFER 1
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1
// #define PLATFORM_SUPPORTS_INLINE_RAY_TRACING 0
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 1
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_REAL_TYPES 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define PLATFORM_SUPPORTS_ROV 1
// #define PLATFORM_SUPPORTS_SHADER_BUNDLE_DISPATCH 0
// #define PLATFORM_SUPPORTS_SHADER_ROOT_CONSTANTS 1
// #define PLATFORM_SUPPORTS_SM6_0_WAVE_OPERATIONS 1
// #define PLATFORM_SUPPORTS_STATIC_SAMPLERS 1
// #define PLATFORM_SUPPORTS_UNIFORM_BUFFER_OBJECTS 0
// #define PLATFORM_SUPPORTS_VERTEX_SHADER_SRVS 1
// #define PLATFORM_SUPPORTS_VERTEX_SHADER_UAVS 1
// #define PRIMITIVE_HAS_TILEOFFSET_DATA 1
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_EXPFOG_MATCHES_VFOG 0
// #define PROJECT_LOCALFOGVOLUME_APPLYONTRANSLUCENT 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_OIT 0
// #define PROJECT_SUBSTRATE_BACKCOMPATIBILITY 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1
// #define PROJECT_SUPPORTS_LOCALFOGVOLUME 1
// #define PROJECT_SUPPORTS_LUMEN 1
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 1
// #define RAY_TRACING_DYNAMIC_MESH_IN_LOCAL_SPACE 1
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define REFRACTION_ROOT_NODE_OVERRIDES_DEFAULT 0
// #define REFRACTION_USE_NONE 1
// #define SCENE_TEXTURES_DISABLED 0
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_DEFERRED 1
// #define SM5_PROFILE 0
// #define SM6_PROFILE 1
// #define SUBSTRATE_ADVANCED_DEBUG_ENABLED 0
// #define SUBSTRATE_ENABLED 0
// #define SUBSTRATE_INLINE_SHADING 1
// #define SUBSTRATE_MATERIAL_CLOSURE_COUNT 0
// #define SUBSTRATE_OPAQUE_ROUGH_REFRACTION_ENABLED 0
// #define SUBSTRATE_PREMULTIPLIED_ALPHA_OPACITY_OVERRIDEN 0
// #define SUBSTRATE_STOCHASTIC_LIGHTING_ENABLED 0
// #define SUBSTRATE_TOP_LAYER_TYPE uint
// #define SUBTRATE_GBUFFER_FORMAT 0
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0
// #define SUPPORT_GPUSKIN_PASSTHROUGH 1
// #define SUPPORT_IESPROFILE_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_PRIMITIVE_ALPHA_HOLDOUT 0
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_SHADOWED_LOCAL_LIGHT_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_VSM_FOWARD_QUALITY 0
// #define SUPPORTS_INDEPENDENT_SAMPLERS 1
// #define TEXTURE_SAMPLE_DEBUG 0
// #define TRANSLUCENCY_VELOCITY_FROM_DEPTH 0
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0
// #define TRANSLUCENT_WRITING_FRONT_LAYER_TRANSPARENCY 0
// #define TRANSLUCENT_WRITING_VELOCITY 0
// #define UE_LEGACY_LUMINANCE_FACTORS 0
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f
// #define USE_DBUFFER 1
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0
// #define USE_HAIR_TRIANGLE_STRIP 1
// #define USE_LIGHT_FUNCTION_ATLAS 0
// #define USE_STENCIL_LOD_DITHER_DEFAULT 0
// #define USES_BASE_PASS_VELOCITY 0
// #define USES_DISPLACEMENT 0
// #define USES_DISTORTION 0
// #define USES_EMISSIVE_COLOR 1
// #define USES_EXPLICIT_DERIVATIVES 0
// #define USES_PER_INSTANCE_CUSTOM_DATA 0
// #define USES_PER_INSTANCE_FADE_AMOUNT 0
// #define USES_TRANSFORM_VECTOR 0
// #define USES_VERTEX_INTERPOLATOR 0
// #define USES_WORLD_POSITION_OFFSET 0
// #define USING_VERTEX_SHADER_LAYER 0
// #define VELOCITY_ENCODE_DEPTH 1
// #define VERTEXSHADER 0
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 1
// #define VF_SUPPORTS_SPEEDTREE_WIND 1
// #define VIEW_HAS_TILEOFFSET_DATA 1
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0
// #define VISUALIZE 0
// #define WANT_PIXEL_DEPTH_OFFSET 0
// #define WORKGRAPHCOMPUTESHADER 0
// #define WORKGRAPHROOTSHADER 0
// #define WORKING_COLOR_SPACE_IS_SRGB 1
// #define WSVECTOR_IS_DOUBLEFLOAT 0
// #define WSVECTOR_IS_TILEOFFSET 1
#line 798 "/Engine/Public/Platform.ush"
precise float MakePrecise(in precise float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(in precise float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(in precise float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(in precise float4 v) { precise float4 pv = v; return pv; }

#line 1052 "/Engine/Public/Platform.ush"
float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

#line 1057 "/Engine/Public/Platform.ush"
int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

#line 1062 "/Engine/Public/Platform.ush"
uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

#line 1067 "/Engine/Public/Platform.ush"
float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 1146 "/Engine/Public/Platform.ush"
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 1151 "/Engine/Public/Platform.ush"
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 1200 "/Engine/Public/Platform.ush"
float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

#line 1205 "/Engine/Public/Platform.ush"
int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

#line 1210 "/Engine/Public/Platform.ush"
uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }

#line 88 "/Engine/Private/PackUnpack.ush"
float2 UnpackFloat2FromUInt(uint In)
{
	return float2(f16tof32(In), f16tof32(In >> 16));
}

#line 142 "/Engine/Private/PackUnpack.ush"
float4 UnpackRGBA8(uint In)
{







	float4 Out;
	Out.r = float((In >> 0) & 0xFF) * (1.0f / 255.0f);
	Out.g = float((In >> 8) & 0xFF) * (1.0f / 255.0f);
	Out.b = float((In >> 16) & 0xFF) * (1.0f / 255.0f);
	Out.a = float((In >> 24) & 0xFF) * (1.0f / 255.0f);
	return Out;

}

#line 190 "/Engine/Private/PackUnpack.ush"
float UnpackUnorm10(uint In)
{
	return float(In & 0x3FF) * (1.0f / 1023.0f);
}

#line 221 "/Engine/Private/PackUnpack.ush"
float3 UnpackR11G11B10F(uint rgb)
{
	float r = f16tof32((rgb >> 17) & 0x7FF0);
	float g = f16tof32((rgb >> 6) & 0x7FF0);
	float b = f16tof32((rgb << 5) & 0x7FE0);
	return float3(r, g, b);
}

#line 141 "/Engine/Private/Common.ush"
const static float PI = 3.1415926535897932f;

#line 12 "/Engine/Private/RandomPCG.ush"
uint3 Rand3DPCG16(int3 p)
{

	uint3 v = uint3(p);




	v = v * 1664525u + 1013904223u;














	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	return v >> 16u;
}

#line 52 "/Engine/Private/DoubleFloat.ush"
struct FDFScalar
{
	float High;
	float Low;

#line  72 "/Engine/Private/DoubleFloat.ush"

};

#line 5 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar MakeDFScalar(float High, float Low)
{
	FDFScalar Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}

#line 13 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFPromote(FDFScalar Value) { return Value; }

#line 16 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFPromote(float Value) { return MakeDFScalar(Value, (float)0); }

#line 20 "/Engine/Private/DoubleFloatOperations.ush"
float DFDemote(FDFScalar Value) { return Value.High + Value.Low; }

#line 22 "/Engine/Private/DoubleFloatOperations.ush"
float DFDemote(float Value) { return Value; }

#line 24 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFNegate(FDFScalar Value)
{
	return MakeDFScalar(-Value.High, -Value.Low);
}

#line 46 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFTwoSum(float Lhs, float Rhs)
{



	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float V =   MakePrecise( ( S ) - ( Lhs ) );
	const float Q =   MakePrecise( ( S ) - ( V ) );
	const float R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float T =   MakePrecise( ( Rhs ) - ( V ) );
	const float Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFScalar(S, Y);

}

#line 65 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFFastTwoSum(float Lhs, float Rhs)
{



	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float T =   MakePrecise( ( S ) - ( Lhs ) );
	const float E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFScalar(S, E);

}

#line 113 "/Engine/Private/DoubleFloatOperations.ush"
float DFAddDemote(FDFScalar Lhs, FDFScalar Rhs)
{




	FDFScalar S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFScalar T = DFTwoSum(Lhs.Low, Rhs.Low);

	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;

}

#line 129 "/Engine/Private/DoubleFloatOperations.ush"
float DFAddDemote(FDFScalar Lhs, float Rhs)
{



	const FDFScalar S = DFTwoSum(Lhs.High, Rhs);
	const float T = Lhs.Low + S.Low;
	return S.High + T;

}

#line 140 "/Engine/Private/DoubleFloatOperations.ush"
float DFAddDemote(float Lhs, FDFScalar Rhs) { return DFAddDemote(Rhs, Lhs); }
float DFAddDemote(float Lhs, float Rhs) { return Lhs + Rhs; }

#line 169 "/Engine/Private/DoubleFloatOperations.ush"
float DFFastAddDemote(FDFScalar Lhs, FDFScalar Rhs)
{



	FDFScalar S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;

}

#line 180 "/Engine/Private/DoubleFloatOperations.ush"
float DFFastAddDemote(FDFScalar Lhs, float Rhs) { return DFAddDemote(Lhs, Rhs); }
float DFFastAddDemote(float Lhs, FDFScalar Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float DFFastAddDemote(float Lhs, float Rhs) { return Rhs + Lhs; }

#line 203 "/Engine/Private/DoubleFloatOperations.ush"
float DFFastSubtractDemote(float Lhs, float Rhs) { return Lhs - Rhs; }
float DFFastSubtractDemote(FDFScalar Lhs, FDFScalar Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }
float DFFastSubtractDemote(FDFScalar Lhs, float Rhs) { return DFFastAddDemote(Lhs, -Rhs); }
float DFFastSubtractDemote(float Lhs, FDFScalar Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }

#line 214 "/Engine/Private/DoubleFloatOperations.ush"
float DFFastLocalSubtractDemote(FDFScalar Lhs, FDFScalar Rhs)
{





	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;

}

#line 228 "/Engine/Private/DoubleFloatOperations.ush"
float DFFastLocalSubtractDemote(FDFScalar Lhs, float Rhs)
{





	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;

}

#line 241 "/Engine/Private/DoubleFloatOperations.ush"
float DFFastLocalSubtractDemote(float Lhs, FDFScalar Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}

#line 269 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFTwoProduct(float Lhs, float Rhs)
{





	const float P = Lhs * Rhs;
	const float E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFScalar(P, E);

}

#line 283 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFMultiply(float Lhs, float Rhs) { return DFTwoProduct(Lhs, Rhs); }

#line 287 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs)
{



	const FDFScalar P = DFTwoProduct(Lhs.High, Rhs.High);
	float T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );

	return DFFastTwoSum(P.High, T);

}

#line 303 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs)
{



	FDFScalar P = DFTwoProduct(Lhs.High, Rhs);
	float T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);

}

#line 314 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFMultiply(float Lhs, FDFScalar Rhs) { return DFMultiply(Rhs, Lhs); }

#line 316 "/Engine/Private/DoubleFloatOperations.ush"
float DFMultiplyDemote(FDFScalar Lhs, FDFScalar Rhs)
{



	const FDFScalar P = DFTwoProduct(Lhs.High, Rhs.High);
	float T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	const float S =   MakePrecise( ( P.High ) + ( T ) );
	return S;

}

#line 330 "/Engine/Private/DoubleFloatOperations.ush"
float DFMultiplyDemote(FDFScalar Lhs, float Rhs)
{



	FDFScalar P = DFTwoProduct(Lhs.High, Rhs);
	P.Low =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	const float S =   MakePrecise( ( P.High ) + ( P.Low ) );
	return S;

}

#line 342 "/Engine/Private/DoubleFloatOperations.ush"
float DFMultiplyDemote(float Lhs, FDFScalar Rhs) { return DFMultiplyDemote(Rhs, Lhs); }
float DFMultiplyDemote(float Lhs, float Rhs) { return Lhs * Rhs; }

#line 363 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs);

#line 419 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs)
{





	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFScalar R = DFMultiply(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);

}

#line 436 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFFastDivide(FDFScalar Lhs, float Rhs)
{





	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar R = DFTwoProduct(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);

}

#line 453 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFFastDivide(float Lhs, FDFScalar Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFFastDivide(float Lhs, float Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }

#line 495 "/Engine/Private/DoubleFloatOperations.ush"
FDFScalar DFDivideByPow2(FDFScalar Lhs, float Rhs)
{



	return MakeDFScalar(Lhs.High / Rhs, Lhs.Low / Rhs);

}

#line 876 "/Engine/Private/DoubleFloatOperations.ush"
float DFFracDemote(FDFScalar V)
{



	return frac(frac(V.High) + frac(V.Low));

}

#line 907 "/Engine/Private/DoubleFloatOperations.ush"
float DFFmodByPow2Demote(FDFScalar Lhs, float Rhs)
{



	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;

}

#line 83 "/Engine/Private/DoubleFloat.ush"
FDFScalar MakeDFVector(FDFScalar X) { return X; }

#line 28 "/Engine/Private/DoubleFloatVectorDefinition.ush"
struct FDFVector2
{
	float2 High;
	float2 Low;

#line  55 "/Engine/Private/DoubleFloatVectorDefinition.ush"

};

#line 5 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 MakeDFVector2(float2 High, float2 Low)
{
	FDFVector2 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}

#line 13 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFPromote(FDFVector2 Value) { return Value; }

#line 16 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFPromote(float2 Value) { return MakeDFVector2(Value, (float2)0); }

#line 20 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFDemote(FDFVector2 Value) { return Value.High + Value.Low; }

#line 22 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFDemote(float2 Value) { return Value; }

#line 24 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFNegate(FDFVector2 Value)
{
	return MakeDFVector2(-Value.High, -Value.Low);
}

#line 46 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFTwoSum(float2 Lhs, float2 Rhs)
{



	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 Q =   MakePrecise( ( S ) - ( V ) );
	const float2 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float2 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float2 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector2(S, Y);

}

#line 65 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFFastTwoSum(float2 Lhs, float2 Rhs)
{



	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector2(S, E);

}

#line 113 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFAddDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{




	FDFVector2 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector2 T = DFTwoSum(Lhs.Low, Rhs.Low);

	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;

}

#line 129 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFAddDemote(FDFVector2 Lhs, float2 Rhs)
{



	const FDFVector2 S = DFTwoSum(Lhs.High, Rhs);
	const float2 T = Lhs.Low + S.Low;
	return S.High + T;

}

#line 140 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFAddDemote(float2 Lhs, FDFVector2 Rhs) { return DFAddDemote(Rhs, Lhs); }
float2 DFAddDemote(float2 Lhs, float2 Rhs) { return Lhs + Rhs; }

#line 169 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFastAddDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{



	FDFVector2 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;

}

#line 180 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFastAddDemote(FDFVector2 Lhs, float2 Rhs) { return DFAddDemote(Lhs, Rhs); }
float2 DFFastAddDemote(float2 Lhs, FDFVector2 Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float2 DFFastAddDemote(float2 Lhs, float2 Rhs) { return Rhs + Lhs; }

#line 203 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFastSubtractDemote(float2 Lhs, float2 Rhs) { return Lhs - Rhs; }
float2 DFFastSubtractDemote(FDFVector2 Lhs, FDFVector2 Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }
float2 DFFastSubtractDemote(FDFVector2 Lhs, float2 Rhs) { return DFFastAddDemote(Lhs, -Rhs); }
float2 DFFastSubtractDemote(float2 Lhs, FDFVector2 Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }

#line 214 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{





	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float2 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;

}

#line 228 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, float2 Rhs)
{





	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;

}

#line 241 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFastLocalSubtractDemote(float2 Lhs, FDFVector2 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}

#line 269 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFTwoProduct(float2 Lhs, float2 Rhs)
{





	const float2 P = Lhs * Rhs;
	const float2 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector2(P, E);

}

#line 283 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFMultiply(float2 Lhs, float2 Rhs) { return DFTwoProduct(Lhs, Rhs); }

#line 287 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFMultiply(FDFVector2 Lhs, FDFVector2 Rhs)
{



	const FDFVector2 P = DFTwoProduct(Lhs.High, Rhs.High);
	float2 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );

	return DFFastTwoSum(P.High, T);

}

#line 303 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFMultiply(FDFVector2 Lhs, float2 Rhs)
{



	FDFVector2 P = DFTwoProduct(Lhs.High, Rhs);
	float2 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);

}

#line 314 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFMultiply(float2 Lhs, FDFVector2 Rhs) { return DFMultiply(Rhs, Lhs); }

#line 316 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFMultiplyDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{



	const FDFVector2 P = DFTwoProduct(Lhs.High, Rhs.High);
	float2 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	const float2 S =   MakePrecise( ( P.High ) + ( T ) );
	return S;

}

#line 330 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFMultiplyDemote(FDFVector2 Lhs, float2 Rhs)
{



	FDFVector2 P = DFTwoProduct(Lhs.High, Rhs);
	P.Low =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	const float2 S =   MakePrecise( ( P.High ) + ( P.Low ) );
	return S;

}

#line 342 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFMultiplyDemote(float2 Lhs, FDFVector2 Rhs) { return DFMultiplyDemote(Rhs, Lhs); }
float2 DFMultiplyDemote(float2 Lhs, float2 Rhs) { return Lhs * Rhs; }

#line 363 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs);

#line 419 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{





	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector2 R = DFMultiply(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);

}

#line 436 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFFastDivide(FDFVector2 Lhs, float2 Rhs)
{





	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 R = DFTwoProduct(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);

}

#line 453 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFFastDivide(float2 Lhs, FDFVector2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFFastDivide(float2 Lhs, float2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }

#line 495 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector2 DFDivideByPow2(FDFVector2 Lhs, float2 Rhs)
{



	return MakeDFVector2(Lhs.High / Rhs, Lhs.Low / Rhs);

}

#line 876 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFracDemote(FDFVector2 V)
{



	return frac(frac(V.High) + frac(V.Low));

}

#line 907 "/Engine/Private/DoubleFloatOperations.ush"
float2 DFFmodByPow2Demote(FDFVector2 Lhs, float2 Rhs)
{



	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;

}

#line 62 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector2 DFBroadcast2(FDFScalar V)
{
	const float2 High = V.High;
	const float2 Low = V.Low;
	return MakeDFVector2(High, Low);
}

#line 69 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float2 DFBroadcast2(float V)
{
	const float2 Single = V;
	return Single;
}

#line 86 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float2  DFAddDemote (FDFScalar Lhs, FDFVector2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (float Lhs, FDFVector2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (FDFScalar Lhs, float2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (float Lhs, float2 Rhs) { return DFAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFAddDemote (FDFVector2 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFAddDemote (FDFVector2 Lhs, float Rhs)     { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFAddDemote (float2 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFAddDemote (float2 Lhs, float Rhs) { return DFAddDemote (Lhs, DFBroadcast2(Rhs)); }

#line 88 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float2  DFFastAddDemote (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (float Lhs, FDFVector2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (FDFScalar Lhs, float2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (float Lhs, float2 Rhs) { return DFFastAddDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastAddDemote (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastAddDemote (FDFVector2 Lhs, float Rhs)     { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastAddDemote (float2 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastAddDemote (float2 Lhs, float Rhs) { return DFFastAddDemote (Lhs, DFBroadcast2(Rhs)); }

#line 92 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float2  DFFastSubtractDemote (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastSubtractDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastSubtractDemote (float Lhs, FDFVector2 Rhs) { return DFFastSubtractDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastSubtractDemote (FDFScalar Lhs, float2 Rhs) { return DFFastSubtractDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastSubtractDemote (float Lhs, float2 Rhs) { return DFFastSubtractDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFFastSubtractDemote (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastSubtractDemote (FDFVector2 Lhs, float Rhs)     { return DFFastSubtractDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastSubtractDemote (float2 Lhs, FDFScalar Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFFastSubtractDemote (float2 Lhs, float Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFScalar Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFScalar Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFVector2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFVector2 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
float2  DFMultiplyDemote (FDFScalar Lhs, FDFVector2 Rhs) { return DFMultiplyDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFMultiplyDemote (float Lhs, FDFVector2 Rhs) { return DFMultiplyDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFMultiplyDemote (FDFScalar Lhs, float2 Rhs) { return DFMultiplyDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFMultiplyDemote (float Lhs, float2 Rhs) { return DFMultiplyDemote (DFBroadcast2(Lhs), Rhs); }
float2  DFMultiplyDemote (FDFVector2 Lhs, FDFScalar Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFMultiplyDemote (FDFVector2 Lhs, float Rhs)     { return DFMultiplyDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFMultiplyDemote (float2 Lhs, FDFScalar Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast2(Rhs)); }
float2  DFMultiplyDemote (float2 Lhs, float Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast2(Rhs)); }

#line 96 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector2  DFFastDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFScalar Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }

#line 102 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector2 DFDivideByPow2(FDFVector2 Lhs, float Rhs)
{
	float2 RhsVect = Rhs;
	return DFDivideByPow2(Lhs, RhsVect);
}

#line 112 "/Engine/Private/DoubleFloat.ush"
FDFVector2 MakeDFVector(FDFScalar X, FDFScalar Y) { return MakeDFVector2(float2(X.High, Y.High), float2(X.Low, Y.Low)); }

#line 28 "/Engine/Private/DoubleFloatVectorDefinition.ush"
struct FDFVector3
{
	float3 High;
	float3 Low;

#line  55 "/Engine/Private/DoubleFloatVectorDefinition.ush"

};

#line 5 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 MakeDFVector3(float3 High, float3 Low)
{
	FDFVector3 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}

#line 13 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFPromote(FDFVector3 Value) { return Value; }

#line 16 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFPromote(float3 Value) { return MakeDFVector3(Value, (float3)0); }

#line 20 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFDemote(FDFVector3 Value) { return Value.High + Value.Low; }

#line 22 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFDemote(float3 Value) { return Value; }

#line 24 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFNegate(FDFVector3 Value)
{
	return MakeDFVector3(-Value.High, -Value.Low);
}

#line 46 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFTwoSum(float3 Lhs, float3 Rhs)
{



	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 Q =   MakePrecise( ( S ) - ( V ) );
	const float3 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float3 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float3 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector3(S, Y);

}

#line 65 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFFastTwoSum(float3 Lhs, float3 Rhs)
{



	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector3(S, E);

}

#line 113 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFAddDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{




	FDFVector3 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector3 T = DFTwoSum(Lhs.Low, Rhs.Low);

	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;

}

#line 129 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFAddDemote(FDFVector3 Lhs, float3 Rhs)
{



	const FDFVector3 S = DFTwoSum(Lhs.High, Rhs);
	const float3 T = Lhs.Low + S.Low;
	return S.High + T;

}

#line 140 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFAddDemote(float3 Lhs, FDFVector3 Rhs) { return DFAddDemote(Rhs, Lhs); }
float3 DFAddDemote(float3 Lhs, float3 Rhs) { return Lhs + Rhs; }

#line 169 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFastAddDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{



	FDFVector3 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;

}

#line 180 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFastAddDemote(FDFVector3 Lhs, float3 Rhs) { return DFAddDemote(Lhs, Rhs); }
float3 DFFastAddDemote(float3 Lhs, FDFVector3 Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float3 DFFastAddDemote(float3 Lhs, float3 Rhs) { return Rhs + Lhs; }

#line 203 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFastSubtractDemote(float3 Lhs, float3 Rhs) { return Lhs - Rhs; }
float3 DFFastSubtractDemote(FDFVector3 Lhs, FDFVector3 Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }
float3 DFFastSubtractDemote(FDFVector3 Lhs, float3 Rhs) { return DFFastAddDemote(Lhs, -Rhs); }
float3 DFFastSubtractDemote(float3 Lhs, FDFVector3 Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }

#line 214 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{





	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float3 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;

}

#line 228 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, float3 Rhs)
{





	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;

}

#line 241 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFastLocalSubtractDemote(float3 Lhs, FDFVector3 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}

#line 269 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFTwoProduct(float3 Lhs, float3 Rhs)
{





	const float3 P = Lhs * Rhs;
	const float3 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector3(P, E);

}

#line 283 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFMultiply(float3 Lhs, float3 Rhs) { return DFTwoProduct(Lhs, Rhs); }

#line 287 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFMultiply(FDFVector3 Lhs, FDFVector3 Rhs)
{



	const FDFVector3 P = DFTwoProduct(Lhs.High, Rhs.High);
	float3 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );

	return DFFastTwoSum(P.High, T);

}

#line 303 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFMultiply(FDFVector3 Lhs, float3 Rhs)
{



	FDFVector3 P = DFTwoProduct(Lhs.High, Rhs);
	float3 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);

}

#line 314 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFMultiply(float3 Lhs, FDFVector3 Rhs) { return DFMultiply(Rhs, Lhs); }

#line 316 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFMultiplyDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{



	const FDFVector3 P = DFTwoProduct(Lhs.High, Rhs.High);
	float3 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	const float3 S =   MakePrecise( ( P.High ) + ( T ) );
	return S;

}

#line 330 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFMultiplyDemote(FDFVector3 Lhs, float3 Rhs)
{



	FDFVector3 P = DFTwoProduct(Lhs.High, Rhs);
	P.Low =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	const float3 S =   MakePrecise( ( P.High ) + ( P.Low ) );
	return S;

}

#line 342 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFMultiplyDemote(float3 Lhs, FDFVector3 Rhs) { return DFMultiplyDemote(Rhs, Lhs); }
float3 DFMultiplyDemote(float3 Lhs, float3 Rhs) { return Lhs * Rhs; }

#line 363 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs);

#line 419 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{





	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector3 R = DFMultiply(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);

}

#line 436 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFFastDivide(FDFVector3 Lhs, float3 Rhs)
{





	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 R = DFTwoProduct(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);

}

#line 453 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFFastDivide(float3 Lhs, FDFVector3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFFastDivide(float3 Lhs, float3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }

#line 495 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector3 DFDivideByPow2(FDFVector3 Lhs, float3 Rhs)
{



	return MakeDFVector3(Lhs.High / Rhs, Lhs.Low / Rhs);

}

#line 876 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFracDemote(FDFVector3 V)
{



	return frac(frac(V.High) + frac(V.Low));

}

#line 907 "/Engine/Private/DoubleFloatOperations.ush"
float3 DFFmodByPow2Demote(FDFVector3 Lhs, float3 Rhs)
{



	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;

}

#line 62 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector3 DFBroadcast3(FDFScalar V)
{
	const float3 High = V.High;
	const float3 Low = V.Low;
	return MakeDFVector3(High, Low);
}

#line 69 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float3 DFBroadcast3(float V)
{
	const float3 Single = V;
	return Single;
}

#line 86 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float3  DFAddDemote (FDFScalar Lhs, FDFVector3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (float Lhs, FDFVector3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (FDFScalar Lhs, float3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (float Lhs, float3 Rhs) { return DFAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFAddDemote (FDFVector3 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFAddDemote (FDFVector3 Lhs, float Rhs)     { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFAddDemote (float3 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFAddDemote (float3 Lhs, float Rhs) { return DFAddDemote (Lhs, DFBroadcast3(Rhs)); }

#line 88 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float3  DFFastAddDemote (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (float Lhs, FDFVector3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (FDFScalar Lhs, float3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (float Lhs, float3 Rhs) { return DFFastAddDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastAddDemote (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastAddDemote (FDFVector3 Lhs, float Rhs)     { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastAddDemote (float3 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastAddDemote (float3 Lhs, float Rhs) { return DFFastAddDemote (Lhs, DFBroadcast3(Rhs)); }

#line 92 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float3  DFFastSubtractDemote (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastSubtractDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastSubtractDemote (float Lhs, FDFVector3 Rhs) { return DFFastSubtractDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastSubtractDemote (FDFScalar Lhs, float3 Rhs) { return DFFastSubtractDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastSubtractDemote (float Lhs, float3 Rhs) { return DFFastSubtractDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFFastSubtractDemote (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastSubtractDemote (FDFVector3 Lhs, float Rhs)     { return DFFastSubtractDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastSubtractDemote (float3 Lhs, FDFScalar Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFFastSubtractDemote (float3 Lhs, float Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFScalar Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFScalar Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFVector3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFVector3 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
float3  DFMultiplyDemote (FDFScalar Lhs, FDFVector3 Rhs) { return DFMultiplyDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFMultiplyDemote (float Lhs, FDFVector3 Rhs) { return DFMultiplyDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFMultiplyDemote (FDFScalar Lhs, float3 Rhs) { return DFMultiplyDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFMultiplyDemote (float Lhs, float3 Rhs) { return DFMultiplyDemote (DFBroadcast3(Lhs), Rhs); }
float3  DFMultiplyDemote (FDFVector3 Lhs, FDFScalar Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFMultiplyDemote (FDFVector3 Lhs, float Rhs)     { return DFMultiplyDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFMultiplyDemote (float3 Lhs, FDFScalar Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast3(Rhs)); }
float3  DFMultiplyDemote (float3 Lhs, float Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast3(Rhs)); }

#line 96 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector3  DFFastDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFScalar Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }

#line 102 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector3 DFDivideByPow2(FDFVector3 Lhs, float Rhs)
{
	float3 RhsVect = Rhs;
	return DFDivideByPow2(Lhs, RhsVect);
}

#line 132 "/Engine/Private/DoubleFloat.ush"
FDFVector3 MakeDFVector(FDFScalar   X, FDFScalar   Y, FDFScalar Z) { return MakeDFVector3(float3( X.High,  Y.High, Z.High), float3( X.Low,  Y.Low, Z.Low)); }
FDFVector3 MakeDFVector(FDFScalar   X, FDFVector2 YZ)              { return MakeDFVector3(float3( X.High, YZ.High),         float3( X.Low, YZ.Low)); }
FDFVector3 MakeDFVector(FDFVector2 XY, FDFScalar   Z)              { return MakeDFVector3(float3(XY.High,  Z.High),         float3(XY.Low,  Z.Low)); }

#line 28 "/Engine/Private/DoubleFloatVectorDefinition.ush"
struct FDFVector4
{
	float4 High;
	float4 Low;

#line  55 "/Engine/Private/DoubleFloatVectorDefinition.ush"

};

#line 5 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 MakeDFVector4(float4 High, float4 Low)
{
	FDFVector4 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}

#line 13 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFPromote(FDFVector4 Value) { return Value; }

#line 16 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFPromote(float4 Value) { return MakeDFVector4(Value, (float4)0); }

#line 20 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFDemote(FDFVector4 Value) { return Value.High + Value.Low; }

#line 22 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFDemote(float4 Value) { return Value; }

#line 24 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFNegate(FDFVector4 Value)
{
	return MakeDFVector4(-Value.High, -Value.Low);
}

#line 46 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFTwoSum(float4 Lhs, float4 Rhs)
{



	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 Q =   MakePrecise( ( S ) - ( V ) );
	const float4 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float4 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float4 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector4(S, Y);

}

#line 65 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFFastTwoSum(float4 Lhs, float4 Rhs)
{



	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector4(S, E);

}

#line 113 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFAddDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{




	FDFVector4 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector4 T = DFTwoSum(Lhs.Low, Rhs.Low);

	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	return S.High + S.Low;

}

#line 129 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFAddDemote(FDFVector4 Lhs, float4 Rhs)
{



	const FDFVector4 S = DFTwoSum(Lhs.High, Rhs);
	const float4 T = Lhs.Low + S.Low;
	return S.High + T;

}

#line 140 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFAddDemote(float4 Lhs, FDFVector4 Rhs) { return DFAddDemote(Rhs, Lhs); }
float4 DFAddDemote(float4 Lhs, float4 Rhs) { return Lhs + Rhs; }

#line 169 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFastAddDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{



	FDFVector4 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	return S.High + S.Low;

}

#line 180 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFastAddDemote(FDFVector4 Lhs, float4 Rhs) { return DFAddDemote(Lhs, Rhs); }
float4 DFFastAddDemote(float4 Lhs, FDFVector4 Rhs) { return DFFastAddDemote(Rhs, Lhs); }
float4 DFFastAddDemote(float4 Lhs, float4 Rhs) { return Rhs + Lhs; }

#line 203 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFastSubtractDemote(float4 Lhs, float4 Rhs) { return Lhs - Rhs; }
float4 DFFastSubtractDemote(FDFVector4 Lhs, FDFVector4 Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }
float4 DFFastSubtractDemote(FDFVector4 Lhs, float4 Rhs) { return DFFastAddDemote(Lhs, -Rhs); }
float4 DFFastSubtractDemote(float4 Lhs, FDFVector4 Rhs) { return DFFastAddDemote(Lhs, DFNegate(Rhs)); }

#line 214 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{





	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float4 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;

}

#line 228 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, float4 Rhs)
{





	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;

}

#line 241 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFastLocalSubtractDemote(float4 Lhs, FDFVector4 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}

#line 269 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFTwoProduct(float4 Lhs, float4 Rhs)
{





	const float4 P = Lhs * Rhs;
	const float4 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector4(P, E);

}

#line 283 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFMultiply(float4 Lhs, float4 Rhs) { return DFTwoProduct(Lhs, Rhs); }

#line 287 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFMultiply(FDFVector4 Lhs, FDFVector4 Rhs)
{



	const FDFVector4 P = DFTwoProduct(Lhs.High, Rhs.High);
	float4 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );

	return DFFastTwoSum(P.High, T);

}

#line 303 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFMultiply(FDFVector4 Lhs, float4 Rhs)
{



	FDFVector4 P = DFTwoProduct(Lhs.High, Rhs);
	float4 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);

}

#line 314 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFMultiply(float4 Lhs, FDFVector4 Rhs) { return DFMultiply(Rhs, Lhs); }

#line 316 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFMultiplyDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{



	const FDFVector4 P = DFTwoProduct(Lhs.High, Rhs.High);
	float4 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	const float4 S =   MakePrecise( ( P.High ) + ( T ) );
	return S;

}

#line 330 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFMultiplyDemote(FDFVector4 Lhs, float4 Rhs)
{



	FDFVector4 P = DFTwoProduct(Lhs.High, Rhs);
	P.Low =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	const float4 S =   MakePrecise( ( P.High ) + ( P.Low ) );
	return S;

}

#line 342 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFMultiplyDemote(float4 Lhs, FDFVector4 Rhs) { return DFMultiplyDemote(Rhs, Lhs); }
float4 DFMultiplyDemote(float4 Lhs, float4 Rhs) { return Lhs * Rhs; }

#line 363 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs);

#line 419 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{





	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector4 R = DFMultiply(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);

}

#line 436 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFFastDivide(FDFVector4 Lhs, float4 Rhs)
{





	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 R = DFTwoProduct(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);

}

#line 453 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFFastDivide(float4 Lhs, FDFVector4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFFastDivide(float4 Lhs, float4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }

#line 495 "/Engine/Private/DoubleFloatOperations.ush"
FDFVector4 DFDivideByPow2(FDFVector4 Lhs, float4 Rhs)
{



	return MakeDFVector4(Lhs.High / Rhs, Lhs.Low / Rhs);

}

#line 876 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFracDemote(FDFVector4 V)
{



	return frac(frac(V.High) + frac(V.Low));

}

#line 907 "/Engine/Private/DoubleFloatOperations.ush"
float4 DFFmodByPow2Demote(FDFVector4 Lhs, float4 Rhs)
{



	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;

}

#line 62 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector4 DFBroadcast4(FDFScalar V)
{
	const float4 High = V.High;
	const float4 Low = V.Low;
	return MakeDFVector4(High, Low);
}

#line 69 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float4 DFBroadcast4(float V)
{
	const float4 Single = V;
	return Single;
}

#line 86 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float4  DFAddDemote (FDFScalar Lhs, FDFVector4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (float Lhs, FDFVector4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (FDFScalar Lhs, float4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (float Lhs, float4 Rhs) { return DFAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFAddDemote (FDFVector4 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFAddDemote (FDFVector4 Lhs, float Rhs)     { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFAddDemote (float4 Lhs, FDFScalar Rhs) { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFAddDemote (float4 Lhs, float Rhs) { return DFAddDemote (Lhs, DFBroadcast4(Rhs)); }

#line 88 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float4  DFFastAddDemote (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (float Lhs, FDFVector4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (FDFScalar Lhs, float4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (float Lhs, float4 Rhs) { return DFFastAddDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastAddDemote (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastAddDemote (FDFVector4 Lhs, float Rhs)     { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastAddDemote (float4 Lhs, FDFScalar Rhs) { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastAddDemote (float4 Lhs, float Rhs) { return DFFastAddDemote (Lhs, DFBroadcast4(Rhs)); }

#line 92 "/Engine/Private/DoubleFloatVectorDefinition.ush"
float4  DFFastSubtractDemote (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastSubtractDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastSubtractDemote (float Lhs, FDFVector4 Rhs) { return DFFastSubtractDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastSubtractDemote (FDFScalar Lhs, float4 Rhs) { return DFFastSubtractDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastSubtractDemote (float Lhs, float4 Rhs) { return DFFastSubtractDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFFastSubtractDemote (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastSubtractDemote (FDFVector4 Lhs, float Rhs)     { return DFFastSubtractDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastSubtractDemote (float4 Lhs, FDFScalar Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFFastSubtractDemote (float4 Lhs, float Rhs) { return DFFastSubtractDemote (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFScalar Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFScalar Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFVector4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFVector4 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
float4  DFMultiplyDemote (FDFScalar Lhs, FDFVector4 Rhs) { return DFMultiplyDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFMultiplyDemote (float Lhs, FDFVector4 Rhs) { return DFMultiplyDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFMultiplyDemote (FDFScalar Lhs, float4 Rhs) { return DFMultiplyDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFMultiplyDemote (float Lhs, float4 Rhs) { return DFMultiplyDemote (DFBroadcast4(Lhs), Rhs); }
float4  DFMultiplyDemote (FDFVector4 Lhs, FDFScalar Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFMultiplyDemote (FDFVector4 Lhs, float Rhs)     { return DFMultiplyDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFMultiplyDemote (float4 Lhs, FDFScalar Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast4(Rhs)); }
float4  DFMultiplyDemote (float4 Lhs, float Rhs) { return DFMultiplyDemote (Lhs, DFBroadcast4(Rhs)); }

#line 96 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector4  DFFastDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFScalar Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }

#line 102 "/Engine/Private/DoubleFloatVectorDefinition.ush"
FDFVector4 DFDivideByPow2(FDFVector4 Lhs, float Rhs)
{
	float4 RhsVect = Rhs;
	return DFDivideByPow2(Lhs, RhsVect);
}

#line 154 "/Engine/Private/DoubleFloat.ush"
FDFVector4 MakeDFVector(FDFScalar    X, FDFScalar    Y, FDFScalar   Z, FDFScalar W) { return MakeDFVector4(float4(  X.High,   Y.High,  Z.High, W.High), float4(  X.Low,   Y.Low,  Z.Low, W.Low)); }
FDFVector4 MakeDFVector(FDFScalar    X, FDFScalar    Y, FDFVector2 ZW)              { return MakeDFVector4(float4(  X.High,   Y.High, ZW.High),         float4(  X.Low,   Y.Low, ZW.Low)); }
FDFVector4 MakeDFVector(FDFScalar    X, FDFVector2  YZ, FDFScalar   W)              { return MakeDFVector4(float4(  X.High,  YZ.High,  W.High),         float4(  X.Low,  YZ.Low,  W.Low)); }
FDFVector4 MakeDFVector(FDFVector2  XY, FDFScalar    Z, FDFScalar   W)              { return MakeDFVector4(float4( XY.High,   Z.High,  W.High),         float4( XY.Low,   Z.Low,  W.Low)); }
FDFVector4 MakeDFVector(FDFVector2  XY, FDFVector2  ZW)                             { return MakeDFVector4(float4( XY.High,  ZW.High),                  float4( XY.Low,  ZW.Low)); }
FDFVector4 MakeDFVector(FDFScalar    X, FDFVector3 YZW)                             { return MakeDFVector4(float4(  X.High, YZW.High),                  float4(  X.Low, YZW.Low)); }
FDFVector4 MakeDFVector(FDFVector3 XYZ, FDFScalar    W)                             { return MakeDFVector4(float4(XYZ.High,   W.High),                  float4(XYZ.Low,   W.Low)); }

#line 162 "/Engine/Private/DoubleFloat.ush"
FDFVector4 MakeDFVector(FDFVector3 In, float W) { return MakeDFVector4(float4(In.High, W), float4(In.Low, 0)); }

#line 200 "/Engine/Private/DoubleFloat.ush"
struct FDFMatrix
{
	float4x4 M;
	float3 PostTranslation; 
};

#line 206 "/Engine/Private/DoubleFloat.ush"
float4x4 Make4x3Matrix(float4x4 M)
{

	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

#line 217 "/Engine/Private/DoubleFloat.ush"
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

#line 227 "/Engine/Private/DoubleFloat.ush"
FDFMatrix MakeDFMatrix4x3(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

#line 235 "/Engine/Private/DoubleFloat.ush"
FDFMatrix MakeDFMatrix(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = InMatrix;
	return Result;
}

#line 255 "/Engine/Private/DoubleFloat.ush"
struct FDFInverseMatrix
{
	float4x4 M;
	float3 PreTranslation; 

	int Dummy; 

};

#line 264 "/Engine/Private/DoubleFloat.ush"
FDFInverseMatrix MakeDFInverseMatrix(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = InMatrix;

	Result.Dummy = 0;

	return Result;
}

#line 275 "/Engine/Private/DoubleFloat.ush"
FDFInverseMatrix MakeDFInverseMatrix4x3(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = Make4x3Matrix(InMatrix);

	Result.Dummy = 0;

	return Result;
}

#line 286 "/Engine/Private/DoubleFloat.ush"
FDFVector3 DFMultiply(float3 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(float4(Vector, 1), InMatrix.M);

	FDFVector3 V = DFTwoSum(InMatrix.PostTranslation, Result.xyz);
	return V;
}

#line 294 "/Engine/Private/DoubleFloat.ush"
FDFVector4 DFMultiply(float4 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(Vector, InMatrix.M);
	FDFVector4 V = DFTwoSum(float4(InMatrix.PostTranslation, 0), Result);
	return V;
}

#line 301 "/Engine/Private/DoubleFloat.ush"
float3 DFMultiplyDemote(FDFVector3 Vector, FDFInverseMatrix InMatrix)
{
	float3 V = DFFastSubtractDemote(Vector, InMatrix.PreTranslation);
	float4 Result = mul(float4(V, 1), InMatrix.M);

	return Result.xyz;
}

#line 316 "/Engine/Private/DoubleFloat.ush"
float4 DFMultiplyDemote(FDFVector4 Vector, FDFInverseMatrix InMatrix)
{
	float4 V = DFFastSubtractDemote(Vector, float4(InMatrix.PreTranslation, 0));
	return mul(V, InMatrix.M);
}

#line 328 "/Engine/Private/DoubleFloat.ush"
FDFInverseMatrix DFMultiply(FDFInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 M = mul(Lhs.M, Rhs);
	float3 PreTranslation = Lhs.PreTranslation;
	return MakeDFInverseMatrix(PreTranslation, M);
}

#line 334 "/Engine/Private/DoubleFloat.ush"
FDFMatrix DFMultiply(float4x4 Lhs, FDFMatrix Rhs)
{
	float4x4 M = mul(Lhs, Rhs.M);
	float3 PostTranslation = Rhs.PostTranslation;
	return MakeDFMatrix(PostTranslation, M);
}

#line 341 "/Engine/Private/DoubleFloat.ush"
float4x4 MultiplyTranslation(float4x4 M, float3 Translation)
{
	float4x4 Result = M;

	Result[3].xyz += Translation;
	return Result;
}

#line 349 "/Engine/Private/DoubleFloat.ush"
float4x4 MultiplyTranslation(float3 Translation, float4x4 M)
{
	return mul(MakeTranslationMatrix(Translation), M);
}

#line 485 "/Engine/Private/DoubleFloat.ush"
FDFMatrix DFPromote(FDFMatrix Value) { return Value; }

#line 487 "/Engine/Private/DoubleFloat.ush"
FDFMatrix  DFPromote(float4x4 Value) { return MakeDFMatrix((float3)0, Value); }

#line 490 "/Engine/Private/DoubleFloat.ush"
float4x4 DFDemote(FDFMatrix V)
{
	return MultiplyTranslation(V.M, V.PostTranslation);
}

#line 495 "/Engine/Private/DoubleFloat.ush"
float4x4 DFDemote(float4x4 V)
{
	return V;
}

#line 500 "/Engine/Private/DoubleFloat.ush"
float4x4 DFDemote(FDFInverseMatrix V)
{
	return MultiplyTranslation(-V.PreTranslation, V.M);
}

#line 542 "/Engine/Private/DoubleFloat.ush"
FDFVector3 DFMultiplyLHSAndFastTwoSum(float3 Lhs, float Factor, float3 Rhs)
{
	const float3 S =   MakePrecise(  mad( ( Lhs ) , ( Factor ) , ( Rhs ) ) );
	const float3 E =   MakePrecise( ( Rhs ) - (   MakePrecise(  mad( ( -Lhs ) , ( Factor ) , ( S ) ) ) ) );
	return MakeDFVector3(S, E);
}

#line 7 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;

	int Dummy; 

};

#line 16 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;

	int Dummy; 

};

#line 25 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;

	int Dummy; 

};

#line 34 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;

	int Dummy; 

};

#line 72 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 

	int2 Dummy; 

};

#line 82 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 

	int3 Dummy; 

};

#line 94 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 101 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;

	Result.Dummy = 0;

	return Result;
}

#line 112 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;

	Result.Dummy = 0;

	return Result;
}

#line 123 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;

	Result.Dummy = 0;

	return Result;
}

#line 134 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;

	Result.Dummy = 0;

	return Result;
}

#line 145 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 150 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 171 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;

	Result.Dummy = 0;

	return Result;
}

#line 193 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;

	Result.Dummy = 0;

	return Result;
}

#line 247 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 252 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

#line 259 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

#line 276 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCNormalizeTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }
FLWCVector2 LWCNormalizeTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }
FLWCVector3 LWCNormalizeTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }
FLWCVector4 LWCNormalizeTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 549 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar DFToTileOffset( FDFScalar In)																								{ float Tile = round(In.High / 2097152.00f); float Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFToTileOffset( FDFVector2 In)																								{ float2 Tile = round(In.High / 2097152.00f); float2 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFToTileOffset( FDFVector3 In)																								{ float3 Tile = round(In.High / 2097152.00f); float3 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFToTileOffset( FDFVector4 In)																								{ float4 Tile = round(In.High / 2097152.00f); float4 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector4 (Tile, Offset);																						}
FLWCScalar DFFastToTileOffset( FDFScalar In)																							{ float Tile = In.High * (1 / 2097152.00f); float Offset = In.Low; 																																																									return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFFastToTileOffset( FDFVector2 In)																							{ float2 Tile = In.High * (1 / 2097152.00f); float2 Offset = In.Low; 																																																									return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFFastToTileOffset( FDFVector3 In)																							{ float3 Tile = In.High * (1 / 2097152.00f); float3 Offset = In.Low; 																																																									return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFFastToTileOffset( FDFVector4 In)																							{ float4 Tile = In.High * (1 / 2097152.00f); float4 Offset = In.Low; 																																																									return MakeLWCVector4 (Tile, Offset);																						}

#line 560 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix DFToTileOffset(FDFMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PostTranslation, 0));

	float4x4 M = MultiplyTranslation(In.M, PosHigh.Offset);
	float3 Tile = PosHigh.Tile;
	return MakeLWCMatrix(Tile, M);
}

#line 569 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix DFFastToTileOffset(FDFMatrix In)
{



	float4x4 M = In.M;
	float3 Tile = In.PostTranslation / 2097152.00f;
	return MakeLWCMatrix(Tile, M);

}

#line 580 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix DFToTileOffset(FDFInverseMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PreTranslation, 0));
	float4x4 M = MultiplyTranslation(-PosHigh.Offset, In.M);
	float3 Tile = PosHigh.Tile;
	return MakeLWCInverseMatrix(Tile, M);
}

#line 588 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix DFFastToTileOffset(FDFInverseMatrix In)
{



	float4x4 M = In.M;
	float3 Tile = In.PreTranslation / 2097152.00f;
	return MakeLWCInverseMatrix(Tile, M);

}

#line 601 "/Engine/Private/LargeWorldCoordinates.ush"
FDFScalar DFFromTileOffset(FLWCScalar In)
{
	float TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}

#line 607 "/Engine/Private/LargeWorldCoordinates.ush"
FDFVector2 DFFromTileOffset(FLWCVector2 In)
{
	float2 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}

#line 613 "/Engine/Private/LargeWorldCoordinates.ush"
FDFVector3 DFFromTileOffset(FLWCVector3 In)
{
	float3 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}

#line 619 "/Engine/Private/LargeWorldCoordinates.ush"
FDFVector4 DFFromTileOffset(FLWCVector4 In)
{
	float4 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}

#line 625 "/Engine/Private/LargeWorldCoordinates.ush"
FDFMatrix DFFromTileOffset(FLWCMatrix In)
{
	float4x4 M = In.M;
	float3 PostTranslation = In.Tile * 2097152.00f;
	return MakeDFMatrix(PostTranslation, M);
}

#line 632 "/Engine/Private/LargeWorldCoordinates.ush"
FDFInverseMatrix DFFromTileOffset(FLWCInverseMatrix In)
{
	float4x4 M = In.M;
	float3 PreTranslation = -In.Tile * 2097152.00f;
	return MakeDFInverseMatrix(PreTranslation, M);
}

#line 642 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FDFScalar Value)   { return DFDemote(Value); }
float2 LWCToFloat(FDFVector2 Value) { return DFDemote(Value); }
float3 LWCToFloat(FDFVector3 Value) { return DFDemote(Value); }
float4 LWCToFloat(FDFVector4 Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFMatrix Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFInverseMatrix Value) { return DFDemote(Value); }

#line 19 "/Engine/Shared/LightSceneData.h"
struct FLightSceneData
{

	FDFVector3 WorldPosition;


	float InvRadius;


	float FalloffExponent;


	float3 Direction;

	float InverseExposureBlend;



	float3 Tangent;


	float SourceRadius;


	float2 SpotAngles;


	float SoftSourceRadius;


	float SourceLength;


	float RectLightBarnCosAngle;


	float RectLightBarnLength;


	float SpecularScale;


	float DiffuseScale;
};

#line 15 "/Engine/Shared/LightViewData.h"
struct FLightViewData
{

	float3 TranslatedWorldPosition;
	float3 Color;
	float VolumetricScatteringIntensity;
	uint VirtualShadowMapId;

	uint LightSceneInfoExtraDataPacked;


	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float RectLightAtlasMaxLevel;




	float IESAtlasIndex;
};

#line 2 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer View {
	 float4x4    View_TranslatedWorldToClip ;
	 float4x4    View_RelativeWorldToClip ;
	 float4x4    View_ClipToRelativeWorld ;
	 float4x4    View_TranslatedWorldToView ;
	 float4x4    View_ViewToTranslatedWorld ;
	 float4x4    View_TranslatedWorldToCameraView ;
	 float4x4    View_CameraViewToTranslatedWorld ;
	 float4x4    View_ViewToClip ;
	 float4x4    View_ViewToClipNoAA ;
	 float4x4    View_ClipToView ;
	 float4x4    View_ClipToTranslatedWorld ;
	 float4x4    View_SVPositionToTranslatedWorld ;
	 float4x4    View_ScreenToRelativeWorld ;
	 float4x4    View_ScreenToTranslatedWorld ;
	 float4x4    View_MobileMultiviewShadowTransform ;
	 float4x4    View_MobileMultiviewDecalTransform ;
	 float4x4    View_FirstPersonTransform ;
	 float4x4    View_PrevFirstPersonTransform ;
	 float3    View_ViewOriginHigh ;
	 float    View_Padding1164 ;
	 float3    View_ViewForward ;
	 float    View_Padding1180 ;
	 float3    View_ViewUp ;
	 float    View_Padding1196 ;
	 float3    View_ViewRight ;
	 float    View_Padding1212 ;
	 float3    View_HMDViewNoRollUp ;
	 float    View_Padding1228 ;
	 float3    View_HMDViewNoRollRight ;
	 float    View_Padding1244 ;
	 float4    View_InvDeviceZToWorldZTransform ;
	 float4    View_ScreenPositionScaleBias ;
	 float3    View_ViewOriginLow ;
	 float    View_Padding1292 ;
	 float3    View_TranslatedWorldCameraOrigin ;
	 float    View_Padding1308 ;
	 float3    View_WorldViewOriginHigh ;
	 float    View_Padding1324 ;
	 float3    View_WorldViewOriginLow ;
	 float    View_Padding1340 ;
	 float3    View_PreViewTranslationHigh ;
	 float    View_Padding1356 ;
	 float3    View_PreViewTranslationLow ;
	 float    View_Padding1372 ;
	 float4x4    View_PrevViewToClip ;
	 float4x4    View_PrevClipToView ;
	 float4x4    View_PrevTranslatedWorldToClip ;
	 float4x4    View_PrevTranslatedWorldToView ;
	 float4x4    View_PrevViewToTranslatedWorld ;
	 float4x4    View_PrevTranslatedWorldToCameraView ;
	 float4x4    View_PrevCameraViewToTranslatedWorld ;
	 float3    View_PrevTranslatedWorldCameraOrigin ;
	 float    View_Padding1836 ;
	 float3    View_PrevWorldCameraOriginHigh ;
	 float    View_Padding1852 ;
	 float3    View_PrevWorldCameraOriginLow ;
	 float    View_Padding1868 ;
	 float3    View_PrevWorldViewOriginHigh ;
	 float    View_Padding1884 ;
	 float3    View_PrevWorldViewOriginLow ;
	 float    View_Padding1900 ;
	 float3    View_PrevPreViewTranslationHigh ;
	 float    View_Padding1916 ;
	 float3    View_PrevPreViewTranslationLow ;
	 float    View_Padding1932 ;
	 float3    View_ViewTilePosition ;
	 float    View_Padding1948 ;
	 float3    View_RelativeWorldCameraOriginTO ;
	 float    View_Padding1964 ;
	 float3    View_RelativeWorldViewOriginTO ;
	 float    View_Padding1980 ;
	 float3    View_RelativePreViewTranslationTO ;
	 float    View_Padding1996 ;
	 float3    View_PrevRelativeWorldCameraOriginTO ;
	 float    View_Padding2012 ;
	 float3    View_PrevRelativeWorldViewOriginTO ;
	 float    View_Padding2028 ;
	 float3    View_RelativePrevPreViewTranslationTO ;
	 float    View_Padding2044 ;
	 float4x4    View_PrevClipToRelativeWorld ;
	 float4x4    View_PrevScreenToTranslatedWorld ;
	 float4x4    View_ClipToPrevClip ;
	 float4x4    View_ClipToPrevClipWithAA ;
	 float4    View_TemporalAAJitter ;
	 float4    View_GlobalClippingPlane ;
	 float2    View_FieldOfViewWideAngles ;
	 float2    View_PrevFieldOfViewWideAngles ;
	 float2    View_FirstPersonFieldOfViewWideAngles ;
	 float2    View_PrevFirstPersonFieldOfViewWideAngles ;
	 float4    View_ViewRectMin ;
	 float4    View_ViewSizeAndInvSize ;
	 uint4    View_ViewRectMinAndSize ;
	 float4    View_LightProbeSizeRatioAndInvSizeRatio ;
	 float4    View_BufferSizeAndInvSize ;
	 float4    View_BufferBilinearUVMinMax ;
	 float4    View_ScreenToViewSpace ;
	 float2    View_BufferToSceneTextureScale ;
	 float2    View_ResolutionFractionAndInv ;
	 int    View_NumSceneColorMSAASamples ;
	 float    View_ProjectionDepthThicknessScale ;
	 float    View_PreExposure ;
	 float    View_OneOverPreExposure ;
	 float4    View_DiffuseOverrideParameter ;
	 float4    View_SpecularOverrideParameter ;
	 float4    View_NormalOverrideParameter ;
	 float2    View_RoughnessOverrideParameter ;
	 float2    View_AmbientOcclusionOverrideParameter ;
	 float    View_PrevFrameGameTime ;
	 float    View_PrevFrameRealTime ;
	 float    View_OutOfBoundsMask ;
	 float    View_Padding2588 ;
	 float3    View_WorldCameraMovementSinceLastFrame ;
	 float    View_CullingSign ;
	 float    View_NearPlane ;
	 float    View_OrthoFarPlane ;
	 float    View_GameTime ;
	 float    View_RealTime ;
	 float    View_DeltaTime ;
	 float    View_MaterialTextureMipBias ;
	 float    View_MaterialTextureDerivativeMultiply ;
	 uint    View_Random ;
	 uint    View_FrameNumber ;
	 uint    View_FrameCounter ;
	 uint    View_StateFrameIndexMod8 ;
	 uint    View_StateFrameIndex ;
	 uint    View_StateOutputFrameIndex ;
	 uint    View_DebugViewModeMask ;
	 uint    View_WorldIsPaused ;
	 float    View_CameraCut ;
	 float    View_UnlitViewmodeMask ;
	 float    View_Padding2676 ;
	 float    View_Padding2680 ;
	 float    View_Padding2684 ;
	 float4    View_DirectionalLightColor ;
	 float3    View_DirectionalLightDirection ;
	 float    View_Padding2716 ;
	 float4    View_TranslucencyLightingVolumeMin[2] ;
	 float4    View_TranslucencyLightingVolumeInvSize[2] ;
	 float4    View_TemporalAAParams ;
	 float4    View_CircleDOFParams ;
	 float    View_DepthOfFieldSensorWidth ;
	 float    View_DepthOfFieldFocalDistance ;
	 float    View_DepthOfFieldScale ;
	 float    View_DepthOfFieldFocalLength ;
	 float    View_DepthOfFieldFocalRegion ;
	 float    View_DepthOfFieldNearTransitionRegion ;
	 float    View_DepthOfFieldFarTransitionRegion ;
	 float    View_MotionBlurNormalizedToPixel ;
	 float    View_GeneralPurposeTweak ;
	 float    View_GeneralPurposeTweak2 ;
	 float    View_DemosaicVposOffset ;
	 float    View_DecalDepthBias ;
	 float3    View_IndirectLightingColorScale ;
	 float    View_Padding2876 ;
	 float3    View_PrecomputedIndirectLightingColorScale ;
	 float    View_Padding2892 ;
	 float3    View_PrecomputedIndirectSpecularColorScale ;
	 float    View_Padding2908 ;
	 float4    View_AtmosphereLightDirection[2] ;
	 float4    View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2] ;
	 float4    View_AtmosphereLightIlluminanceOuterSpace[2] ;
	 float4    View_AtmosphereLightDiscLuminance[2] ;
	 float4    View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2] ;
	 float4    View_SkyViewLutSizeAndInvSize ;
	 float3    View_SkyCameraTranslatedWorldOrigin ;
	 float    View_Padding3100 ;
	 float4    View_SkyPlanetTranslatedWorldCenterAndViewHeight ;
	 float4x4    View_SkyViewLutReferential ;
	 float4    View_SkyAtmosphereSkyLuminanceFactor ;
	 float    View_SkyAtmospherePresentInScene ;
	 float    View_SkyAtmosphereHeightFogContribution ;
	 float    View_SkyAtmosphereBottomRadiusKm ;
	 float    View_SkyAtmosphereTopRadiusKm ;
	 float4    View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize ;
	 float    View_SkyAtmosphereAerialPerspectiveStartDepthKm ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm ;
	 float    View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv ;
	 float    View_SkyAtmosphereApplyCameraAerialPerspectiveVolume ;
	 float    View_Padding3256 ;
	 float    View_Padding3260 ;
	 float3    View_NormalCurvatureToRoughnessScaleBias ;
	 float    View_RenderingReflectionCaptureMask ;
	 float    View_RealTimeReflectionCapture ;
	 float    View_RealTimeReflectionCapturePreExposure ;
	 float    View_Padding3288 ;
	 float    View_Padding3292 ;
	 float4    View_AmbientCubemapTint ;
	 float    View_AmbientCubemapIntensity ;
	 float    View_SkyLightApplyPrecomputedBentNormalShadowingFlag ;
	 float    View_SkyLightAffectReflectionFlag ;
	 float    View_SkyLightAffectGlobalIlluminationFlag ;
	 float4    View_SkyLightColor ;
	 float    View_SkyLightVolumetricScatteringIntensity ;
	 float    View_Padding3348 ;
	 float    View_Padding3352 ;
	 float    View_Padding3356 ;
	 float4    View_MobileSkyIrradianceEnvironmentMap[8] ;
	 float    View_MobilePreviewMode ;
	 float    View_HMDEyePaddingOffset ;
	 float    View_ReflectionCubemapMaxMip ;
	 float    View_ShowDecalsMask ;
	 uint    View_DistanceFieldAOSpecularOcclusionMode ;
	 float    View_IndirectCapsuleSelfShadowingIntensity ;
	 float    View_Padding3512 ;
	 float    View_Padding3516 ;
	 float3    View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight ;
	 int    View_StereoPassIndex ;
	 float4    View_GlobalVolumeTranslatedCenterAndExtent[6] ;
	 float4    View_GlobalVolumeTranslatedWorldToUVAddAndMul[6] ;
	 float4    View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6] ;
	 float4    View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6] ;
	 float    View_GlobalDistanceFieldMipFactor ;
	 float    View_GlobalDistanceFieldMipTransition ;
	 int    View_GlobalDistanceFieldClipmapSizeInPages ;
	 int    View_Padding3932 ;
	 float3    View_GlobalDistanceFieldInvPageAtlasSize ;
	 float    View_Padding3948 ;
	 float3    View_GlobalDistanceFieldInvCoverageAtlasSize ;
	 float    View_GlobalVolumeDimension ;
	 float    View_GlobalVolumeTexelSize ;
	 float    View_MaxGlobalDFAOConeDistance ;
	 uint    View_NumGlobalSDFClipmaps ;
	 float    View_CoveredExpandSurfaceScale ;
	 float    View_NotCoveredExpandSurfaceScale ;
	 float    View_NotCoveredMinStepScale ;
	 float    View_DitheredTransparencyStepThreshold ;
	 float    View_DitheredTransparencyTraceThreshold ;
	 float    View_ViewportScaleUI ;
	 float    View_Padding4004 ;
	 int2    View_CursorPosition ;
	 float    View_bCheckerboardSubsurfaceProfileRendering ;
	 float    View_Padding4020 ;
	 float    View_Padding4024 ;
	 float    View_Padding4028 ;
	 float3    View_VolumetricFogInvGridSize ;
	 float    View_Padding4044 ;
	 float3    View_VolumetricFogGridZParams ;
	 float    View_Padding4060 ;
	 float2    View_VolumetricFogSVPosToVolumeUV ;
	 float2    View_VolumetricFogViewGridUVToPrevViewRectUV ;
	 float2    View_VolumetricFogPrevViewGridRectUVToResourceUV ;
	 float2    View_VolumetricFogPrevUVMax ;
	 float2    View_VolumetricFogPrevUVMaxForTemporalBlend ;
	 float    View_Padding4104 ;
	 float    View_Padding4108 ;
	 float3    View_VolumetricFogPrevResourceGridSize ;
	 float    View_Padding4124 ;
	 float2    View_VolumetricFogScreenToResourceUV ;
	 float2    View_VolumetricFogUVMax ;
	 float    View_VolumetricFogMaxDistance ;
	 float    View_Padding4148 ;
	 float    View_Padding4152 ;
	 float    View_Padding4156 ;
	 float3    View_VolumetricLightmapWorldToUVScale ;
	 float    View_Padding4172 ;
	 float3    View_VolumetricLightmapWorldToUVAdd ;
	 float    View_Padding4188 ;
	 float3    View_VolumetricLightmapIndirectionTextureSize ;
	 float    View_VolumetricLightmapBrickSize ;
	 float3    View_VolumetricLightmapBrickTexelSize ;
	 float    View_IndirectLightingCacheShowFlag ;
	 float    View_EyeToPixelSpreadAngle ;
	 float    View_Padding4228 ;
	 float    View_Padding4232 ;
	 float    View_Padding4236 ;
	 float4    View_XRPassthroughCameraUVs[2] ;
	 float4    View_GlobalVirtualTextureMipBias ;
	 uint    View_VirtualTextureFeedbackBufferSize ;
	 uint    View_VirtualTextureFeedbackShift ;
	 uint    View_VirtualTextureFeedbackMask ;
	 uint    View_VirtualTextureFeedbackJitterOffset ;
	 uint    View_VirtualTextureFeedbackSampleOffset ;
	 uint    View_VirtualTextureExtendedDebugBufferSize ;
	 int    View_FarShadowStaticMeshLODBias ;
	 float    View_MinRoughness ;
	 float4    View_HairRenderInfo ;
	 uint    View_EnableSkyLight ;
	 uint    View_HairRenderInfoBits ;
	 uint    View_HairComponents ;
	 float    View_bSubsurfacePostprocessEnabled ;
	 float4    View_SSProfilesTextureSizeAndInvSize ;
	 float4    View_SSProfilesPreIntegratedTextureSizeAndInvSize ;
	 float4    View_SpecularProfileTextureSizeAndInvSize ;
	 float3    View_PhysicsFieldClipmapCenter ;
	 float    View_PhysicsFieldClipmapDistance ;
	 int    View_PhysicsFieldClipmapResolution ;
	 int    View_PhysicsFieldClipmapExponent ;
	 int    View_PhysicsFieldClipmapCount ;
	 int    View_PhysicsFieldTargetCount ;
	 int4    View_PhysicsFieldTargets[32] ;
	 uint    View_GPUSceneViewId ;
	 float    View_ViewResolutionFraction ;
	 float    View_SubSurfaceColorAsTransmittanceAtDistanceInMeters ;
	 float    View_Padding4956 ;
	 float4    View_TanAndInvTanHalfFOV ;
	 float4    View_PrevTanAndInvTanHalfFOV ;
	 float4    View_FirstPersonTanAndInvTanHalfFOV ;
	 float4    View_PrevFirstPersonTanAndInvTanHalfFOV ;
	 float2    View_WorldDepthToPixelWorldRadius ;
	 float    View_Padding5032 ;
	 float    View_Padding5036 ;
	 float4    View_ScreenRayLengthMultiplier ;
	 float4    View_GlintLUTParameters0 ;
	 float4    View_GlintLUTParameters1 ;
	 float    View_FirstPersonScale ;
	 float    View_PrevFirstPersonScale ;
	 float    View_MaterialMaxEmissiveValue ;
	 int    View_PostVolumeUserFlags ;
	 int4    View_EnvironmentComponentsFlags ;
	 uint    View_bPrimitiveAlphaHoldoutEnabled ;
	 uint    View_Padding5124 ;
	 uint    BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint    View_Padding5132 ;
	 uint    BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint    View_Padding5140 ;
	 uint    BindlessSRV_View_VolumetricLightmapIndirectionTexture ;
	 uint    View_Padding5148 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickAmbientVector ;
	 uint    View_Padding5156 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint    View_Padding5164 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint    View_Padding5172 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint    View_Padding5180 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint    View_Padding5188 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint    View_Padding5196 ;
	 uint    BindlessSRV_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint    View_Padding5204 ;
	 uint    BindlessSRV_View_SkyBentNormalBrickTexture ;
	 uint    View_Padding5212 ;
	 uint    BindlessSRV_View_DirectionalLightShadowingBrickTexture ;
	 uint    View_Padding5220 ;
	 uint    BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint    View_Padding5228 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint    View_Padding5236 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint    View_Padding5244 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint    View_Padding5252 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint    View_Padding5260 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint    View_Padding5268 ;
	 uint    BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint    View_Padding5276 ;
	 uint    BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint    View_Padding5284 ;
	 uint    BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint    View_Padding5292 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint    View_Padding5300 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint    View_Padding5308 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldPageTableTexture ;
	 uint    View_Padding5316 ;
	 uint    BindlessSRV_View_GlobalDistanceFieldMipTexture ;
	 uint    View_Padding5324 ;
	 uint    BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint    View_Padding5332 ;
	 uint    BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint    View_Padding5340 ;
	 uint    BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint    View_Padding5348 ;
	 uint    BindlessSRV_View_AtmosphereTransmittanceTexture ;
	 uint    View_Padding5356 ;
	 uint    BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint    View_Padding5364 ;
	 uint    BindlessSRV_View_AtmosphereIrradianceTexture ;
	 uint    View_Padding5372 ;
	 uint    BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint    View_Padding5380 ;
	 uint    BindlessSRV_View_AtmosphereInscatterTexture ;
	 uint    View_Padding5388 ;
	 uint    BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint    View_Padding5396 ;
	 uint    BindlessSRV_View_PerlinNoiseGradientTexture ;
	 uint    View_Padding5404 ;
	 uint    BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint    View_Padding5412 ;
	 uint    BindlessSRV_View_PerlinNoise3DTexture ;
	 uint    View_Padding5420 ;
	 uint    BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint    View_Padding5428 ;
	 uint    BindlessSRV_View_SobolSamplingTexture ;
	 uint    View_Padding5436 ;
	 uint    BindlessSampler_View_SharedPointWrappedSampler ;
	 uint    View_Padding5444 ;
	 uint    BindlessSampler_View_SharedPointClampedSampler ;
	 uint    View_Padding5452 ;
	 uint    BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint    View_Padding5460 ;
	 uint    BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint    View_Padding5468 ;
	 uint    BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint    View_Padding5476 ;
	 uint    BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint    View_Padding5484 ;
	 uint    BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint    View_Padding5492 ;
	 uint    BindlessSRV_View_PreIntegratedBRDF ;
	 uint    View_Padding5500 ;
	 uint    BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint    View_Padding5508 ;
	 uint    BindlessSRV_View_SkyIrradianceEnvironmentMap ;
	 uint    View_Padding5516 ;
	 uint    BindlessSRV_View_TransmittanceLutTexture ;
	 uint    View_Padding5524 ;
	 uint    BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint    View_Padding5532 ;
	 uint    BindlessSRV_View_SkyViewLutTexture ;
	 uint    View_Padding5540 ;
	 uint    BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint    View_Padding5548 ;
	 uint    BindlessSRV_View_CameraAerialPerspectiveVolume ;
	 uint    View_Padding5556 ;
	 uint    BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint    View_Padding5564 ;
	 uint    BindlessSRV_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint    View_Padding5572 ;
	 uint    BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint    View_Padding5580 ;
	 uint    BindlessSRV_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint    View_Padding5588 ;
	 uint    BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint    View_Padding5596 ;
	 uint    BindlessSRV_View_DistantSkyLightLutBufferSRV ;
	 uint    View_Padding5604 ;
	 uint    BindlessSRV_View_MobileDistantSkyLightLutBufferSRV ;
	 uint    View_Padding5612 ;
	 uint    BindlessSRV_View_HairScatteringLUTTexture ;
	 uint    View_Padding5620 ;
	 uint    BindlessSampler_View_HairScatteringLUTSampler ;
	 uint    View_Padding5628 ;
	 uint    BindlessSRV_View_GGXLTCMatTexture ;
	 uint    View_Padding5636 ;
	 uint    BindlessSampler_View_GGXLTCMatSampler ;
	 uint    View_Padding5644 ;
	 uint    BindlessSRV_View_GGXLTCAmpTexture ;
	 uint    View_Padding5652 ;
	 uint    BindlessSampler_View_GGXLTCAmpSampler ;
	 uint    View_Padding5660 ;
	 uint    BindlessSRV_View_SheenLTCTexture ;
	 uint    View_Padding5668 ;
	 uint    BindlessSampler_View_SheenLTCSampler ;
	 uint    View_Padding5676 ;
	 uint    View_bShadingEnergyConservation ;
	 uint    View_bShadingEnergyPreservation ;
	 uint    BindlessSRV_View_ShadingEnergyGGXSpecTexture ;
	 uint    View_Padding5692 ;
	 uint    BindlessSRV_View_ShadingEnergyGGXGlassTexture ;
	 uint    View_Padding5700 ;
	 uint    BindlessSRV_View_ShadingEnergyClothSpecTexture ;
	 uint    View_Padding5708 ;
	 uint    BindlessSRV_View_ShadingEnergyDiffuseTexture ;
	 uint    View_Padding5716 ;
	 uint    BindlessSampler_View_ShadingEnergySampler ;
	 uint    View_Padding5724 ;
	 uint    BindlessSRV_View_GlintTexture ;
	 uint    View_Padding5732 ;
	 uint    BindlessSampler_View_GlintSampler ;
	 uint    View_Padding5740 ;
	 uint    BindlessSRV_View_SimpleVolumeTexture ;
	 uint    View_Padding5748 ;
	 uint    BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint    View_Padding5756 ;
	 uint    BindlessSRV_View_SimpleVolumeEnvTexture ;
	 uint    View_Padding5764 ;
	 uint    BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint    View_Padding5772 ;
	 uint    BindlessSRV_View_SSProfilesTexture ;
	 uint    View_Padding5780 ;
	 uint    BindlessSampler_View_SSProfilesSampler ;
	 uint    View_Padding5788 ;
	 uint    BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint    View_Padding5796 ;
	 uint    BindlessSRV_View_SSProfilesPreIntegratedTexture ;
	 uint    View_Padding5804 ;
	 uint    BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint    View_Padding5812 ;
	 uint    BindlessSRV_View_SpecularProfileTexture ;
	 uint    View_Padding5820 ;
	 uint    BindlessSampler_View_SpecularProfileSampler ;
	 uint    View_Padding5828 ;
	 uint    BindlessSRV_View_WaterIndirection ;
	 uint    View_Padding5836 ;
	 uint    BindlessSRV_View_WaterData ;
	 uint    View_Padding5844 ;
	 int    View_WaterInfoTextureViewIndex ;
	 int    View_Padding5852 ;
	 float4    View_RectLightAtlasSizeAndInvSize ;
	 float    View_RectLightAtlasMaxMipLevel ;
	 float    View_Padding5876 ;
	 uint    BindlessSRV_View_RectLightAtlasTexture ;
	 uint    View_Padding5884 ;
	 uint    BindlessSampler_View_RectLightAtlasSampler ;
	 uint    View_Padding5892 ;
	 uint    View_Padding5896 ;
	 uint    View_Padding5900 ;
	 float4    View_IESAtlasSizeAndInvSize ;
	 uint    BindlessSRV_View_IESAtlasTexture ;
	 uint    View_Padding5924 ;
	 uint    BindlessSampler_View_IESAtlasSampler ;
	 uint    View_Padding5932 ;
	 uint    BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint    View_Padding5940 ;
	 uint    BindlessSRV_View_LandscapeIndirection ;
	 uint    View_Padding5948 ;
	 uint    BindlessSRV_View_LandscapePerComponentData ;
	 uint    View_Padding5956 ;
	 uint    BindlessUAV_View_VTFeedbackBuffer ;
	 uint    View_Padding5964 ;
	 uint    BindlessSRV_View_PhysicsFieldClipmapBuffer ;
	 uint    View_Padding5972 ;
	 uint    BindlessSRV_View_BlueNoiseScalarTexture ;
	 uint    View_Padding5980 ;
	 int3    View_BlueNoiseDimensions ;
	 int    View_Padding5996 ;
	 int3    View_BlueNoiseModuloMasks ;
	 int    View_Padding6012 ;
	 float3    View_TLASPreViewTranslationHigh ;
	 float    View_Padding6028 ;
	 float3    View_TLASPreViewTranslationLow ;
 }

#line 534 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint4>  View_VolumetricLightmapIndirectionTexture;

#line 543 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_DirectionalLightShadowingBrickTexture;

#line 566 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PerlinNoiseGradientTexture;
SamplerState  View_PerlinNoiseGradientTextureSampler;
Texture3D  View_PerlinNoise3DTexture;
SamplerState  View_PerlinNoise3DTextureSampler;
Texture2D<uint>  View_SobolSamplingTexture;

#line 574 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearClampedSampler;

#line 577 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearClampedSampler;
Texture2D  View_PreIntegratedBRDF;
SamplerState  View_PreIntegratedBRDFSampler;
StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap;

#line 595 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCMatTexture;

#line 597 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCAmpTexture;

#line 621 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float4>  View_RectLightAtlasTexture;

#line 2 "/Engine/Generated/UniformBuffers/InstancedView.ush"
cbuffer InstancedView {
	 float4x4    InstancedView_TranslatedWorldToClip[2] ;
	 float4x4    InstancedView_RelativeWorldToClip[2] ;
	 float4x4    InstancedView_ClipToRelativeWorld[2] ;
	 float4x4    InstancedView_TranslatedWorldToView[2] ;
	 float4x4    InstancedView_ViewToTranslatedWorld[2] ;
	 float4x4    InstancedView_TranslatedWorldToCameraView[2] ;
	 float4x4    InstancedView_CameraViewToTranslatedWorld[2] ;
	 float4x4    InstancedView_ViewToClip[2] ;
	 float4x4    InstancedView_ViewToClipNoAA[2] ;
	 float4x4    InstancedView_ClipToView[2] ;
	 float4x4    InstancedView_ClipToTranslatedWorld[2] ;
	 float4x4    InstancedView_SVPositionToTranslatedWorld[2] ;
	 float4x4    InstancedView_ScreenToRelativeWorld[2] ;
	 float4x4    InstancedView_ScreenToTranslatedWorld[2] ;
	 float4x4    InstancedView_MobileMultiviewShadowTransform[2] ;
	 float4x4    InstancedView_MobileMultiviewDecalTransform[2] ;
	 float4x4    InstancedView_FirstPersonTransform[2] ;
	 float4x4    InstancedView_PrevFirstPersonTransform[2] ;
	 float4    InstancedView_ViewOriginHigh[2] ;
	 float3    InstancedView_ViewForward ;
	 float    InstancedView_Padding2348 ;
	 float3    InstancedView_ViewUp ;
	 float    InstancedView_Padding2364 ;
	 float3    InstancedView_ViewRight ;
	 float    InstancedView_Padding2380 ;
	 float4    InstancedView_HMDViewNoRollUp[2] ;
	 float4    InstancedView_HMDViewNoRollRight[2] ;
	 float4    InstancedView_InvDeviceZToWorldZTransform[2] ;
	 float4    InstancedView_ScreenPositionScaleBias[2] ;
	 float4    InstancedView_ViewOriginLow[2] ;
	 float4    InstancedView_TranslatedWorldCameraOrigin[2] ;
	 float4    InstancedView_WorldViewOriginHigh[2] ;
	 float4    InstancedView_WorldViewOriginLow[2] ;
	 float4    InstancedView_PreViewTranslationHigh[2] ;
	 float4    InstancedView_PreViewTranslationLow[2] ;
	 float4x4    InstancedView_PrevViewToClip[2] ;
	 float4x4    InstancedView_PrevClipToView[2] ;
	 float4x4    InstancedView_PrevTranslatedWorldToClip[2] ;
	 float4x4    InstancedView_PrevTranslatedWorldToView[2] ;
	 float4x4    InstancedView_PrevViewToTranslatedWorld[2] ;
	 float4x4    InstancedView_PrevTranslatedWorldToCameraView[2] ;
	 float4x4    InstancedView_PrevCameraViewToTranslatedWorld[2] ;
	 float4    InstancedView_PrevTranslatedWorldCameraOrigin[2] ;
	 float4    InstancedView_PrevWorldCameraOriginHigh[2] ;
	 float4    InstancedView_PrevWorldCameraOriginLow[2] ;
	 float4    InstancedView_PrevWorldViewOriginHigh[2] ;
	 float4    InstancedView_PrevWorldViewOriginLow[2] ;
	 float4    InstancedView_PrevPreViewTranslationHigh[2] ;
	 float4    InstancedView_PrevPreViewTranslationLow[2] ;
	 float4    InstancedView_ViewTilePosition[2] ;
	 float4    InstancedView_RelativeWorldCameraOriginTO[2] ;
	 float4    InstancedView_RelativeWorldViewOriginTO[2] ;
	 float4    InstancedView_RelativePreViewTranslationTO[2] ;
	 float4    InstancedView_PrevRelativeWorldCameraOriginTO[2] ;
	 float4    InstancedView_PrevRelativeWorldViewOriginTO[2] ;
	 float4    InstancedView_RelativePrevPreViewTranslationTO[2] ;
	 float4x4    InstancedView_PrevClipToRelativeWorld[2] ;
	 float4x4    InstancedView_PrevScreenToTranslatedWorld[2] ;
	 float4x4    InstancedView_ClipToPrevClip[2] ;
	 float4x4    InstancedView_ClipToPrevClipWithAA[2] ;
	 float4    InstancedView_TemporalAAJitter[2] ;
	 float4    InstancedView_GlobalClippingPlane[2] ;
	 float4    InstancedView_FieldOfViewWideAngles[2] ;
	 float4    InstancedView_PrevFieldOfViewWideAngles[2] ;
	 float4    InstancedView_FirstPersonFieldOfViewWideAngles[2] ;
	 float4    InstancedView_PrevFirstPersonFieldOfViewWideAngles[2] ;
	 float4    InstancedView_ViewRectMin[2] ;
	 float4    InstancedView_ViewSizeAndInvSize ;
	 uint4    InstancedView_ViewRectMinAndSize ;
	 float4    InstancedView_LightProbeSizeRatioAndInvSizeRatio ;
	 float4    InstancedView_BufferSizeAndInvSize ;
	 float4    InstancedView_BufferBilinearUVMinMax[2] ;
	 float4    InstancedView_ScreenToViewSpace[2] ;
	 float4    InstancedView_BufferToSceneTextureScale[2] ;
	 float2    InstancedView_ResolutionFractionAndInv ;
	 int    InstancedView_NumSceneColorMSAASamples ;
	 int    InstancedView_Padding4956 ;
	 float4    InstancedView_ProjectionDepthThicknessScale[2] ;
	 float    InstancedView_PreExposure ;
	 float    InstancedView_OneOverPreExposure ;
	 float    InstancedView_Padding5000 ;
	 float    InstancedView_Padding5004 ;
	 float4    InstancedView_DiffuseOverrideParameter ;
	 float4    InstancedView_SpecularOverrideParameter ;
	 float4    InstancedView_NormalOverrideParameter ;
	 float2    InstancedView_RoughnessOverrideParameter ;
	 float2    InstancedView_AmbientOcclusionOverrideParameter ;
	 float    InstancedView_PrevFrameGameTime ;
	 float    InstancedView_PrevFrameRealTime ;
	 float    InstancedView_OutOfBoundsMask ;
	 float    InstancedView_Padding5084 ;
	 float4    InstancedView_WorldCameraMovementSinceLastFrame[2] ;
	 float    InstancedView_CullingSign ;
	 float    InstancedView_Padding5124 ;
	 float    InstancedView_Padding5128 ;
	 float    InstancedView_Padding5132 ;
	 float4    InstancedView_NearPlane[2] ;
	 float4    InstancedView_OrthoFarPlane[2] ;
	 float    InstancedView_GameTime ;
	 float    InstancedView_RealTime ;
	 float    InstancedView_DeltaTime ;
	 float    InstancedView_MaterialTextureMipBias ;
	 float    InstancedView_MaterialTextureDerivativeMultiply ;
	 uint    InstancedView_Random ;
	 uint    InstancedView_FrameNumber ;
	 uint    InstancedView_FrameCounter ;
	 uint    InstancedView_StateFrameIndexMod8 ;
	 uint    InstancedView_StateFrameIndex ;
	 uint    InstancedView_StateOutputFrameIndex ;
	 uint    InstancedView_DebugViewModeMask ;
	 uint    InstancedView_WorldIsPaused ;
	 float    InstancedView_CameraCut ;
	 float    InstancedView_UnlitViewmodeMask ;
	 float    InstancedView_Padding5260 ;
	 float4    InstancedView_DirectionalLightColor ;
	 float3    InstancedView_DirectionalLightDirection ;
	 float    InstancedView_Padding5292 ;
	 float4    InstancedView_TranslucencyLightingVolumeMin[2] ;
	 float4    InstancedView_TranslucencyLightingVolumeInvSize[2] ;
	 float4    InstancedView_TemporalAAParams ;
	 float4    InstancedView_CircleDOFParams ;
	 float    InstancedView_DepthOfFieldSensorWidth ;
	 float    InstancedView_DepthOfFieldFocalDistance ;
	 float    InstancedView_DepthOfFieldScale ;
	 float    InstancedView_DepthOfFieldFocalLength ;
	 float    InstancedView_DepthOfFieldFocalRegion ;
	 float    InstancedView_DepthOfFieldNearTransitionRegion ;
	 float    InstancedView_DepthOfFieldFarTransitionRegion ;
	 float    InstancedView_MotionBlurNormalizedToPixel ;
	 float    InstancedView_GeneralPurposeTweak ;
	 float    InstancedView_GeneralPurposeTweak2 ;
	 float    InstancedView_DemosaicVposOffset ;
	 float    InstancedView_DecalDepthBias ;
	 float3    InstancedView_IndirectLightingColorScale ;
	 float    InstancedView_Padding5452 ;
	 float3    InstancedView_PrecomputedIndirectLightingColorScale ;
	 float    InstancedView_Padding5468 ;
	 float3    InstancedView_PrecomputedIndirectSpecularColorScale ;
	 float    InstancedView_Padding5484 ;
	 float4    InstancedView_AtmosphereLightDirection[2] ;
	 float4    InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance[2] ;
	 float4    InstancedView_AtmosphereLightIlluminanceOuterSpace[2] ;
	 float4    InstancedView_AtmosphereLightDiscLuminance[2] ;
	 float4    InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2] ;
	 float4    InstancedView_SkyViewLutSizeAndInvSize ;
	 float3    InstancedView_SkyCameraTranslatedWorldOrigin ;
	 float    InstancedView_Padding5676 ;
	 float4    InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight ;
	 float4x4    InstancedView_SkyViewLutReferential ;
	 float4    InstancedView_SkyAtmosphereSkyLuminanceFactor ;
	 float    InstancedView_SkyAtmospherePresentInScene ;
	 float    InstancedView_SkyAtmosphereHeightFogContribution ;
	 float    InstancedView_SkyAtmosphereBottomRadiusKm ;
	 float    InstancedView_SkyAtmosphereTopRadiusKm ;
	 float4    InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize ;
	 float    InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm ;
	 float    InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution ;
	 float    InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv ;
	 float    InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm ;
	 float    InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv ;
	 float    InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume ;
	 float    InstancedView_Padding5832 ;
	 float    InstancedView_Padding5836 ;
	 float3    InstancedView_NormalCurvatureToRoughnessScaleBias ;
	 float    InstancedView_RenderingReflectionCaptureMask ;
	 float    InstancedView_RealTimeReflectionCapture ;
	 float    InstancedView_RealTimeReflectionCapturePreExposure ;
	 float    InstancedView_Padding5864 ;
	 float    InstancedView_Padding5868 ;
	 float4    InstancedView_AmbientCubemapTint ;
	 float    InstancedView_AmbientCubemapIntensity ;
	 float    InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag ;
	 float    InstancedView_SkyLightAffectReflectionFlag ;
	 float    InstancedView_SkyLightAffectGlobalIlluminationFlag ;
	 float4    InstancedView_SkyLightColor ;
	 float    InstancedView_SkyLightVolumetricScatteringIntensity ;
	 float    InstancedView_Padding5924 ;
	 float    InstancedView_Padding5928 ;
	 float    InstancedView_Padding5932 ;
	 float4    InstancedView_MobileSkyIrradianceEnvironmentMap[8] ;
	 float    InstancedView_MobilePreviewMode ;
	 float    InstancedView_Padding6068 ;
	 float    InstancedView_Padding6072 ;
	 float    InstancedView_Padding6076 ;
	 float4    InstancedView_HMDEyePaddingOffset[2] ;
	 float    InstancedView_ReflectionCubemapMaxMip ;
	 float    InstancedView_ShowDecalsMask ;
	 uint    InstancedView_DistanceFieldAOSpecularOcclusionMode ;
	 float    InstancedView_IndirectCapsuleSelfShadowingIntensity ;
	 float3    InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight ;
	 float    InstancedView_Padding6140 ;
	 int4    InstancedView_StereoPassIndex[2] ;
	 float4    InstancedView_GlobalVolumeTranslatedCenterAndExtent[6] ;
	 float4    InstancedView_GlobalVolumeTranslatedWorldToUVAddAndMul[6] ;
	 float4    InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVScale[6] ;
	 float4    InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVBias[6] ;
	 float    InstancedView_GlobalDistanceFieldMipFactor ;
	 float    InstancedView_GlobalDistanceFieldMipTransition ;
	 int    InstancedView_GlobalDistanceFieldClipmapSizeInPages ;
	 int    InstancedView_Padding6572 ;
	 float3    InstancedView_GlobalDistanceFieldInvPageAtlasSize ;
	 float    InstancedView_Padding6588 ;
	 float3    InstancedView_GlobalDistanceFieldInvCoverageAtlasSize ;
	 float    InstancedView_GlobalVolumeDimension ;
	 float    InstancedView_GlobalVolumeTexelSize ;
	 float    InstancedView_MaxGlobalDFAOConeDistance ;
	 uint    InstancedView_NumGlobalSDFClipmaps ;
	 float    InstancedView_CoveredExpandSurfaceScale ;
	 float    InstancedView_NotCoveredExpandSurfaceScale ;
	 float    InstancedView_NotCoveredMinStepScale ;
	 float    InstancedView_DitheredTransparencyStepThreshold ;
	 float    InstancedView_DitheredTransparencyTraceThreshold ;
	 float    InstancedView_ViewportScaleUI ;
	 float    InstancedView_Padding6644 ;
	 int2    InstancedView_CursorPosition ;
	 float    InstancedView_bCheckerboardSubsurfaceProfileRendering ;
	 float    InstancedView_Padding6660 ;
	 float    InstancedView_Padding6664 ;
	 float    InstancedView_Padding6668 ;
	 float3    InstancedView_VolumetricFogInvGridSize ;
	 float    InstancedView_Padding6684 ;
	 float3    InstancedView_VolumetricFogGridZParams ;
	 float    InstancedView_Padding6700 ;
	 float2    InstancedView_VolumetricFogSVPosToVolumeUV ;
	 float2    InstancedView_VolumetricFogViewGridUVToPrevViewRectUV ;
	 float2    InstancedView_VolumetricFogPrevViewGridRectUVToResourceUV ;
	 float2    InstancedView_VolumetricFogPrevUVMax ;
	 float2    InstancedView_VolumetricFogPrevUVMaxForTemporalBlend ;
	 float    InstancedView_Padding6744 ;
	 float    InstancedView_Padding6748 ;
	 float3    InstancedView_VolumetricFogPrevResourceGridSize ;
	 float    InstancedView_Padding6764 ;
	 float2    InstancedView_VolumetricFogScreenToResourceUV ;
	 float2    InstancedView_VolumetricFogUVMax ;
	 float    InstancedView_VolumetricFogMaxDistance ;
	 float    InstancedView_Padding6788 ;
	 float    InstancedView_Padding6792 ;
	 float    InstancedView_Padding6796 ;
	 float3    InstancedView_VolumetricLightmapWorldToUVScale ;
	 float    InstancedView_Padding6812 ;
	 float3    InstancedView_VolumetricLightmapWorldToUVAdd ;
	 float    InstancedView_Padding6828 ;
	 float3    InstancedView_VolumetricLightmapIndirectionTextureSize ;
	 float    InstancedView_VolumetricLightmapBrickSize ;
	 float3    InstancedView_VolumetricLightmapBrickTexelSize ;
	 float    InstancedView_IndirectLightingCacheShowFlag ;
	 float    InstancedView_EyeToPixelSpreadAngle ;
	 float    InstancedView_Padding6868 ;
	 float    InstancedView_Padding6872 ;
	 float    InstancedView_Padding6876 ;
	 float4    InstancedView_XRPassthroughCameraUVs[2] ;
	 float4    InstancedView_GlobalVirtualTextureMipBias ;
	 uint    InstancedView_VirtualTextureFeedbackBufferSize ;
	 uint    InstancedView_VirtualTextureFeedbackShift ;
	 uint    InstancedView_VirtualTextureFeedbackMask ;
	 uint    InstancedView_VirtualTextureFeedbackJitterOffset ;
	 uint    InstancedView_VirtualTextureFeedbackSampleOffset ;
	 uint    InstancedView_VirtualTextureExtendedDebugBufferSize ;
	 int    InstancedView_FarShadowStaticMeshLODBias ;
	 float    InstancedView_MinRoughness ;
	 float4    InstancedView_HairRenderInfo ;
	 uint    InstancedView_EnableSkyLight ;
	 uint    InstancedView_HairRenderInfoBits ;
	 uint    InstancedView_HairComponents ;
	 float    InstancedView_bSubsurfacePostprocessEnabled ;
	 float4    InstancedView_SSProfilesTextureSizeAndInvSize ;
	 float4    InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize ;
	 float4    InstancedView_SpecularProfileTextureSizeAndInvSize ;
	 float3    InstancedView_PhysicsFieldClipmapCenter ;
	 float    InstancedView_PhysicsFieldClipmapDistance ;
	 int    InstancedView_PhysicsFieldClipmapResolution ;
	 int    InstancedView_PhysicsFieldClipmapExponent ;
	 int    InstancedView_PhysicsFieldClipmapCount ;
	 int    InstancedView_PhysicsFieldTargetCount ;
	 int4    InstancedView_PhysicsFieldTargets[32] ;
	 uint4    InstancedView_GPUSceneViewId[2] ;
	 float    InstancedView_ViewResolutionFraction ;
	 float    InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters ;
	 float    InstancedView_Padding7624 ;
	 float    InstancedView_Padding7628 ;
	 float4    InstancedView_TanAndInvTanHalfFOV[2] ;
	 float4    InstancedView_PrevTanAndInvTanHalfFOV[2] ;
	 float4    InstancedView_FirstPersonTanAndInvTanHalfFOV[2] ;
	 float4    InstancedView_PrevFirstPersonTanAndInvTanHalfFOV[2] ;
	 float4    InstancedView_WorldDepthToPixelWorldRadius[2] ;
	 float4    InstancedView_ScreenRayLengthMultiplier[2] ;
	 float4    InstancedView_GlintLUTParameters0[2] ;
	 float4    InstancedView_GlintLUTParameters1[2] ;
	 float4    InstancedView_FirstPersonScale[2] ;
	 float4    InstancedView_PrevFirstPersonScale[2] ;
	 float    InstancedView_MaterialMaxEmissiveValue ;
	 int    InstancedView_PostVolumeUserFlags ;
	 int    InstancedView_Padding7960 ;
	 int    InstancedView_Padding7964 ;
	 int4    InstancedView_EnvironmentComponentsFlags ;
	 uint    InstancedView_bPrimitiveAlphaHoldoutEnabled ;
 }

#line 2 "/Engine/Generated/UniformBuffers/Primitive.ush"
cbuffer Primitive {
	 uint    Primitive_Flags ;
	 uint    Primitive_InstanceSceneDataOffset ;
	 uint    Primitive_NumInstanceSceneDataEntries ;
	 int    Primitive_SingleCaptureIndex ;
	 float3    Primitive_PositionHigh ;
	 uint    Primitive_PrimitiveComponentId ;
	 float4x4    Primitive_LocalToRelativeWorld ;
	 float4x4    Primitive_RelativeWorldToLocal ;
	 float4x4    Primitive_PreviousLocalToRelativeWorld ;
	 float4x4    Primitive_PreviousRelativeWorldToLocal ;
	 float4x4    Primitive_WorldToPreviousWorld ;
	 float3    Primitive_InvNonUniformScale ;
	 float    Primitive_ObjectBoundsX ;
	 float4    Primitive_ObjectWorldPositionHighAndRadius ;
	 float3    Primitive_ObjectWorldPositionLow ;
	 float    Primitive_MinMaterialDisplacement ;
	 float3    Primitive_ActorWorldPositionHigh ;
	 float    Primitive_MaxMaterialDisplacement ;
	 float3    Primitive_ActorWorldPositionLow ;
	 uint    Primitive_LightmapUVIndex ;
	 float3    Primitive_ObjectOrientation ;
	 uint    Primitive_LightmapDataIndex ;
	 float4    Primitive_NonUniformScale ;
	 float3    Primitive_PreSkinnedLocalBoundsMin ;
	 uint    Primitive_NaniteResourceID ;
	 float3    Primitive_PreSkinnedLocalBoundsMax ;
	 uint    Primitive_NaniteHierarchyOffset ;
	 uint    Primitive_NaniteAssemblyTransformOffset ;
	 uint    Primitive_Padding500 ;
	 uint    Primitive_Padding504 ;
	 uint    Primitive_Padding508 ;
	 float3    Primitive_LocalObjectBoundsMin ;
	 float    Primitive_ObjectBoundsY ;
	 float3    Primitive_LocalObjectBoundsMax ;
	 float    Primitive_ObjectBoundsZ ;
	 float3    Primitive_InstanceLocalBoundsCenter ;
	 uint    Primitive_InstancePayloadDataOffset ;
	 float3    Primitive_InstanceLocalBoundsExtent ;
	 uint    Primitive_InstancePayloadDataStride ;
	 uint    Primitive_InstancePayloadExtensionSize ;
	 uint    Primitive_Padding580 ;
	 float2    Primitive_WireframeAndPrimitiveColor ;
	 uint    Primitive_PackedNaniteFlags ;
	 int    Primitive_PersistentPrimitiveIndex ;
	 float2    Primitive_InstanceDrawDistanceMinMaxSquared ;
	 float    Primitive_InstanceWPODisableDistanceSquared ;
	 float    Primitive_PixelProgrammableDistanceSquared ;
	 float    Primitive_MaterialDisplacementFadeOutSize ;
	 float    Primitive_Padding620 ;
	 uint2    Primitive_MeshPaintTextureDescriptor ;
	 uint2    Primitive_MaterialCacheTextureDescriptor ;
	 uint    Primitive_NaniteRayTracingDataOffset ;
	 float    Primitive_MaxWPOExtent ;
	 uint    Primitive_CustomStencilValueAndMask ;
	 uint    Primitive_VisibilityFlags ;
	 float4    Primitive_CustomPrimitiveData[9] ;
 }

#line 86 "/Engine/Generated/UniformBuffers/Scene.ush"
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;

#line 2 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
cbuffer OpaqueBasePass {
	 uint    OpaqueBasePass_Shared_Forward_NumLocalLights ;
	 uint    OpaqueBasePass_Shared_Forward_NumDirectionalLights ;
	 uint    OpaqueBasePass_Shared_Forward_NumReflectionCaptures ;
	 uint    OpaqueBasePass_Shared_Forward_HasDirectionalLight ;
	 uint    OpaqueBasePass_Shared_Forward_NumGridCells ;
	 uint    OpaqueBasePass_Padding20 ;
	 uint    OpaqueBasePass_Padding24 ;
	 uint    OpaqueBasePass_Padding28 ;
	 int3    OpaqueBasePass_Shared_Forward_CulledGridSize ;
	 uint    OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell ;
	 uint    OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift ;
	 uint    OpaqueBasePass_Padding52 ;
	 uint    OpaqueBasePass_Padding56 ;
	 uint    OpaqueBasePass_Padding60 ;
	 float3    OpaqueBasePass_Shared_Forward_LightGridZParams ;
	 float    OpaqueBasePass_Padding76 ;
	 float3    OpaqueBasePass_Shared_Forward_DirectionalLightDirection ;
	 float    OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius ;
	 float    OpaqueBasePass_Shared_Forward_DirectionalLightSoftSourceRadius ;
	 float    OpaqueBasePass_Padding100 ;
	 float    OpaqueBasePass_Padding104 ;
	 float    OpaqueBasePass_Padding108 ;
	 float3    OpaqueBasePass_Shared_Forward_DirectionalLightColor ;
	 float    OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity ;
	 float    OpaqueBasePass_Shared_Forward_DirectionalLightSpecularScale ;
	 float    OpaqueBasePass_Shared_Forward_DirectionalLightDiffuseScale ;
	 uint    OpaqueBasePass_Shared_Forward_DirectionalLightSceneInfoExtraDataPacked ;
	 uint    OpaqueBasePass_Padding140 ;
	 float2    OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD ;
	 uint    OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades ;
	 int    OpaqueBasePass_Shared_Forward_DirectionalLightVSM ;
	 float4    OpaqueBasePass_Shared_Forward_CascadeEndDepths ;
	 float4x4    OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4] ;
	 float4    OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4] ;
	 float4    OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize ;
	 float    OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias ;
	 uint    OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing ;
	 uint    OpaqueBasePass_Shared_Forward_DirectionalLightHandledByMegaLights ;
	 uint    OpaqueBasePass_Shared_Forward_DirectionalMegaLightsSupportedStartIndex ;
	 float4    OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize ;
	 float4x4    OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow ;
	 uint    OpaqueBasePass_Shared_Forward_DirectLightingShowFlag ;
	 uint    OpaqueBasePass_Shared_Forward_CulledBufferOffsetISR ;
	 uint    OpaqueBasePass_Shared_Forward_LightFunctionAtlasLightIndex ;
	 uint    OpaqueBasePass_Shared_Forward_bAffectsTranslucentLighting ;
	 float4    OpaqueBasePass_Shared_Forward_PreViewTranslationOffsetISR ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
	 uint    OpaqueBasePass_Padding644 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Forward_ShadowmapSampler ;
	 uint    OpaqueBasePass_Padding652 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap ;
	 uint    OpaqueBasePass_Padding660 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Forward_StaticShadowmapSampler ;
	 uint    OpaqueBasePass_Padding668 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_ForwardLightBuffer ;
	 uint    OpaqueBasePass_Padding676 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_NumCulledLightsGrid ;
	 uint    OpaqueBasePass_Padding684 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit ;
	 uint    OpaqueBasePass_Padding692 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit ;
	 uint    OpaqueBasePass_Padding700 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_DirectionalLightIndices ;
	 uint    OpaqueBasePass_Padding708 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Forward_LightViewData ;
	 float    OpaqueBasePass_Padding716 ;
	 float4    OpaqueBasePass_Shared_Reflection_SkyLightParameters ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Reflection_SkyLightCubemap ;
	 uint    OpaqueBasePass_Padding740 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler ;
	 uint    OpaqueBasePass_Padding748 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ;
	 uint    OpaqueBasePass_Padding756 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
	 uint    OpaqueBasePass_Padding764 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Reflection_ReflectionCubemap ;
	 uint    OpaqueBasePass_Padding772 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler ;
	 uint    OpaqueBasePass_Padding780 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Reflection_PreIntegratedGF ;
	 uint    OpaqueBasePass_Padding788 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler ;
	 float    OpaqueBasePass_Padding796 ;
	 float4    OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane ;
	 float4    OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin ;
	 float4    OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis ;
	 float4    OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis ;
	 float3x4    OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix ;
	 float3    OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters ;
	 float    OpaqueBasePass_Padding924 ;
	 float2    OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2 ;
	 float    OpaqueBasePass_Padding936 ;
	 float    OpaqueBasePass_Padding940 ;
	 float4x4    OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2] ;
	 float4    OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2] ;
	 float2    OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound ;
	 uint    OpaqueBasePass_Shared_PlanarReflection_bIsStereo ;
	 uint    OpaqueBasePass_Padding1116 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture ;
	 uint    OpaqueBasePass_Padding1124 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler ;
	 float    OpaqueBasePass_Padding1132 ;
	 float4    OpaqueBasePass_Shared_Fog_ExponentialFogParameters ;
	 float4    OpaqueBasePass_Shared_Fog_ExponentialFogParameters2 ;
	 float4    OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter ;
	 float4    OpaqueBasePass_Shared_Fog_ExponentialFogParameters3 ;
	 float4    OpaqueBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale ;
	 float4    OpaqueBasePass_Shared_Fog_InscatteringLightDirection ;
	 float4    OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor ;
	 float2    OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation ;
	 float    OpaqueBasePass_Padding1256 ;
	 float    OpaqueBasePass_Padding1260 ;
	 float3    OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters ;
	 float    OpaqueBasePass_Shared_Fog_EndDistance ;
	 float    OpaqueBasePass_Shared_Fog_ApplyVolumetricFog ;
	 float    OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance ;
	 float    OpaqueBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv ;
	 float    OpaqueBasePass_Padding1292 ;
	 float3    OpaqueBasePass_Shared_Fog_VolumetricFogAlbedo ;
	 float    OpaqueBasePass_Shared_Fog_VolumetricFogPhaseG ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap ;
	 uint    OpaqueBasePass_Padding1316 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler ;
	 uint    OpaqueBasePass_Padding1324 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_Fog_IntegratedLightScattering ;
	 uint    OpaqueBasePass_Padding1332 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler ;
	 float    OpaqueBasePass_Padding1340 ;
	 float4    OpaqueBasePass_Shared_FogISR_ExponentialFogParameters ;
	 float4    OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2 ;
	 float4    OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter ;
	 float4    OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3 ;
	 float4    OpaqueBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale ;
	 float4    OpaqueBasePass_Shared_FogISR_InscatteringLightDirection ;
	 float4    OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor ;
	 float2    OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation ;
	 float    OpaqueBasePass_Padding1464 ;
	 float    OpaqueBasePass_Padding1468 ;
	 float3    OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters ;
	 float    OpaqueBasePass_Shared_FogISR_EndDistance ;
	 float    OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog ;
	 float    OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance ;
	 float    OpaqueBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv ;
	 float    OpaqueBasePass_Padding1500 ;
	 float3    OpaqueBasePass_Shared_FogISR_VolumetricFogAlbedo ;
	 float    OpaqueBasePass_Shared_FogISR_VolumetricFogPhaseG ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap ;
	 uint    OpaqueBasePass_Padding1524 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler ;
	 uint    OpaqueBasePass_Padding1532 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_FogISR_IntegratedLightScattering ;
	 uint    OpaqueBasePass_Padding1540 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler ;
	 float    OpaqueBasePass_Padding1548 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_LFV_LocalFogVolumeInstances ;
	 uint    OpaqueBasePass_Padding1556 ;
	 uint2    OpaqueBasePass_Shared_LFV_LocalFogVolumeTileDataTextureResolution ;
	 uint    OpaqueBasePass_Shared_LFV_LocalFogVolumeInstanceCount ;
	 uint    OpaqueBasePass_Shared_LFV_LocalFogVolumeTilePixelSize ;
	 float    OpaqueBasePass_Shared_LFV_LocalFogVolumeMaxDensityIntoVolumetricFog ;
	 uint    OpaqueBasePass_Shared_LFV_ShouldRenderLocalFogVolumeInVolumetricFog ;
	 float    OpaqueBasePass_Shared_LFV_GlobalStartDistance ;
	 float    OpaqueBasePass_Padding1588 ;
	 float    OpaqueBasePass_Padding1592 ;
	 float    OpaqueBasePass_Padding1596 ;
	 float4    OpaqueBasePass_Shared_LFV_HalfResTextureSizeAndInvSize ;
	 float3    OpaqueBasePass_Shared_LFV_DirectionalLightColor ;
	 float    OpaqueBasePass_Padding1628 ;
	 float3    OpaqueBasePass_Shared_LFV_DirectionalLightDirection ;
	 float    OpaqueBasePass_Padding1644 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_LFV_LocalFogVolumeTileDataTexture ;
	 float    OpaqueBasePass_Padding1652 ;
	 float    OpaqueBasePass_Padding1656 ;
	 float    OpaqueBasePass_Padding1660 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_LightFunctionAtlas_LightFunctionAtlasTexture ;
	 uint    OpaqueBasePass_Padding1668 ;
	 uint    BindlessSRV_OpaqueBasePass_Shared_LightFunctionAtlas_LightInfoDataBuffer ;
	 uint    OpaqueBasePass_Padding1676 ;
	 uint    BindlessSampler_OpaqueBasePass_Shared_LightFunctionAtlas_LightFunctionAtlasSampler ;
	 uint    OpaqueBasePass_Padding1684 ;
	 float    OpaqueBasePass_Shared_LightFunctionAtlas_Slot_UVSize ;
	 float    OpaqueBasePass_Padding1692 ;
	 uint    OpaqueBasePass_Shared_UseBasePassSkylight ;
	 float    OpaqueBasePass_Padding1700 ;
	 float    OpaqueBasePass_Padding1704 ;
	 float    OpaqueBasePass_Padding1708 ;
	 uint    OpaqueBasePass_Substrate_MaxBytesPerPixel ;
	 uint    OpaqueBasePass_Substrate_MaxClosurePerPixel ;
	 uint    OpaqueBasePass_Substrate_bRoughDiffuse ;
	 uint    OpaqueBasePass_Substrate_PeelLayersAboveDepth ;
	 uint    OpaqueBasePass_Substrate_bRoughnessTracking ;
	 uint    OpaqueBasePass_Substrate_bStochasticLighting ;
	 float    OpaqueBasePass_Padding1736 ;
	 float    OpaqueBasePass_Padding1740 ;
	 int    OpaqueBasePass_Substrate_SliceStoringDebugSubstrateTreeDataWithoutMRT ;
	 int    OpaqueBasePass_Substrate_FirstSliceStoringSubstrateSSSDataWithoutMRT ;
	 uint    BindlessUAV_OpaqueBasePass_Substrate_MaterialTextureArrayUAVWithoutRTs ;
	 uint    OpaqueBasePass_Padding1756 ;
	 uint    BindlessUAV_OpaqueBasePass_Substrate_OpaqueRoughRefractionTextureUAV ;
	 float    OpaqueBasePass_Padding1764 ;
	 float    OpaqueBasePass_Padding1768 ;
	 float    OpaqueBasePass_Padding1772 ;
	 int    OpaqueBasePass_UseForwardScreenSpaceShadowMask ;
	 int    OpaqueBasePass_Padding1780 ;
	 uint    BindlessSRV_OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture ;
	 uint    OpaqueBasePass_Padding1788 ;
	 uint    BindlessSRV_OpaqueBasePass_IndirectOcclusionTexture ;
	 uint    OpaqueBasePass_Padding1796 ;
	 uint    BindlessSRV_OpaqueBasePass_ResolvedSceneDepthTexture ;
	 float    OpaqueBasePass_Padding1804 ;
	 uint    BindlessSRV_OpaqueBasePass_DBufferATexture ;
	 uint    OpaqueBasePass_Padding1812 ;
	 uint    BindlessSRV_OpaqueBasePass_DBufferBTexture ;
	 uint    OpaqueBasePass_Padding1820 ;
	 uint    BindlessSRV_OpaqueBasePass_DBufferCTexture ;
	 uint    OpaqueBasePass_Padding1828 ;
	 uint    BindlessSRV_OpaqueBasePass_DBufferATextureArray ;
	 uint    OpaqueBasePass_Padding1836 ;
	 uint    BindlessSRV_OpaqueBasePass_DBufferBTextureArray ;
	 uint    OpaqueBasePass_Padding1844 ;
	 uint    BindlessSRV_OpaqueBasePass_DBufferCTextureArray ;
	 uint    OpaqueBasePass_Padding1852 ;
	 uint    BindlessSRV_OpaqueBasePass_DBufferRenderMask ;
	 uint    OpaqueBasePass_Padding1860 ;
	 uint    BindlessSampler_OpaqueBasePass_DBufferATextureSampler ;
	 uint    OpaqueBasePass_Padding1868 ;
	 uint    BindlessSampler_OpaqueBasePass_DBufferBTextureSampler ;
	 uint    OpaqueBasePass_Padding1876 ;
	 uint    BindlessSampler_OpaqueBasePass_DBufferCTextureSampler ;
	 uint    OpaqueBasePass_Padding1884 ;
	 uint    BindlessSRV_OpaqueBasePass_PreIntegratedGFTexture ;
	 uint    OpaqueBasePass_Padding1892 ;
	 uint    BindlessSampler_OpaqueBasePass_PreIntegratedGFSampler ;
	 uint    OpaqueBasePass_Padding1900 ;
	 int    OpaqueBasePass_Is24BitUnormDepthStencil ;
	 int    OpaqueBasePass_Padding1908 ;
	 uint    BindlessSRV_OpaqueBasePass_EyeAdaptationBuffer ;
 }

#line 245 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
StructuredBuffer<float4>  OpaqueBasePass_Shared_Forward_ForwardLightBuffer;
StructuredBuffer<uint>  OpaqueBasePass_Shared_Forward_NumCulledLightsGrid;

#line 248 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Buffer<uint>  OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit;

#line 251 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
TextureCube  OpaqueBasePass_Shared_Reflection_SkyLightCubemap;
SamplerState  OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler;

#line 255 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
TextureCubeArray  OpaqueBasePass_Shared_Reflection_ReflectionCubemap;
SamplerState  OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler;

#line 263 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Texture3D  OpaqueBasePass_Shared_Fog_IntegratedLightScattering;

#line 267 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Texture3D  OpaqueBasePass_Shared_FogISR_IntegratedLightScattering;

#line 269 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Buffer<float4>  OpaqueBasePass_Shared_LFV_LocalFogVolumeInstances;
Texture2DArray<uint>  OpaqueBasePass_Shared_LFV_LocalFogVolumeTileDataTexture;

#line 276 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Texture2D  OpaqueBasePass_DBufferATexture;
Texture2D  OpaqueBasePass_DBufferBTexture;
Texture2D  OpaqueBasePass_DBufferCTexture;

#line 283 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
SamplerState  OpaqueBasePass_DBufferATextureSampler;

#line 286 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Texture2D  OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture;
Texture2D  OpaqueBasePass_IndirectOcclusionTexture;
Texture2D  OpaqueBasePass_ResolvedSceneDepthTexture;

#line 2 "/Engine/Generated/UniformBuffers/ReflectionCaptureSM5.ush"
cbuffer ReflectionCaptureSM5 {
	 float4    ReflectionCaptureSM5_PositionHighAndRadius[341] ;
	 float4    ReflectionCaptureSM5_PositionLow[341] ;
	 float4    ReflectionCaptureSM5_CaptureProperties[341] ;
	 float4    ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[341] ;
	 float4x4    ReflectionCaptureSM5_BoxTransform[341] ;
	 float4    ReflectionCaptureSM5_BoxScales[341] ;
 }

#line 2 "/Engine/Generated/UniformBuffers/Material.ush"
cbuffer Material {
	 float4    Material_PreshaderBuffer[1] ;
	 uint    BindlessSampler_Material_Wrap_WorldGroupSettings ;
	 uint    Material_Padding20 ;
	 uint    BindlessSampler_Material_Clamp_WorldGroupSettings ;
 }

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewStateTileOffsetData
{
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 10 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float4x4 MobileMultiviewDecalTransform;
	float4x4 FirstPersonTransform;
	float4x4 PrevFirstPersonTransform;
	float3 ViewOriginHigh;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 ViewOriginLow;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOriginHigh;
	float3 WorldViewOriginLow;
	float3 PreViewTranslationHigh;
	float3 PreViewTranslationLow;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevWorldCameraOriginHigh;
	float3 PrevWorldCameraOriginLow;
	float3 PrevWorldViewOriginHigh;
	float3 PrevWorldViewOriginLow;
	float3 PrevPreViewTranslationHigh;
	float3 PrevPreViewTranslationLow;
	float3 ViewTilePosition;
	float3 RelativeWorldCameraOriginTO;
	float3 RelativeWorldViewOriginTO;
	float3 RelativePreViewTranslationTO;
	float3 PrevRelativeWorldCameraOriginTO;
	float3 PrevRelativeWorldViewOriginTO;
	float3 RelativePrevPreViewTranslationTO;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float2 FirstPersonFieldOfViewWideAngles;
	float2 PrevFirstPersonFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float2 AmbientOcclusionOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float OrthoFarPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint StateOutputFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float SkyLightVolumetricScatteringIntensity;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	float ViewportScaleUI;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogPrevUVMaxForTemporalBlend;
	float3 VolumetricFogPrevResourceGridSize;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float4 GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackBufferSize;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	uint VirtualTextureExtendedDebugBufferSize;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 FirstPersonTanAndInvTanHalfFOV;
	float4 PrevFirstPersonTanAndInvTanHalfFOV;
	float2 WorldDepthToPixelWorldRadius;
	float4 ScreenRayLengthMultiplier;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	float FirstPersonScale;
	float PrevFirstPersonScale;
	float MaterialMaxEmissiveValue;
	int PostVolumeUserFlags;
	int4 EnvironmentComponentsFlags;
	uint bPrimitiveAlphaHoldoutEnabled;
	FDFInverseMatrix WorldToClip;
	FDFMatrix ClipToWorld;
	FDFMatrix ScreenToWorld;
	FDFMatrix PrevClipToWorld;
	FDFVector3 WorldCameraOrigin;
	FDFVector3 WorldViewOrigin;
	FDFVector3 PrevWorldCameraOrigin;
	FDFVector3 PrevWorldViewOrigin;
	FDFVector3 PreViewTranslation;
	FDFVector3 PrevPreViewTranslation;
	ViewStateTileOffsetData TileOffset;
};

#line 270 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.MobileMultiviewDecalTransform = View_MobileMultiviewDecalTransform;
	Result.FirstPersonTransform = View_FirstPersonTransform;
	Result.PrevFirstPersonTransform = View_PrevFirstPersonTransform;
	Result.ViewOriginHigh = View_ViewOriginHigh;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.ViewOriginLow = View_ViewOriginLow;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.WorldViewOriginHigh = View_WorldViewOriginHigh;
	Result.WorldViewOriginLow = View_WorldViewOriginLow;
	Result.PreViewTranslationHigh = View_PreViewTranslationHigh;
	Result.PreViewTranslationLow = View_PreViewTranslationLow;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevWorldCameraOriginHigh = View_PrevWorldCameraOriginHigh;
	Result.PrevWorldCameraOriginLow = View_PrevWorldCameraOriginLow;
	Result.PrevWorldViewOriginHigh = View_PrevWorldViewOriginHigh;
	Result.PrevWorldViewOriginLow = View_PrevWorldViewOriginLow;
	Result.PrevPreViewTranslationHigh = View_PrevPreViewTranslationHigh;
	Result.PrevPreViewTranslationLow = View_PrevPreViewTranslationLow;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.RelativeWorldCameraOriginTO = View_RelativeWorldCameraOriginTO;
	Result.RelativeWorldViewOriginTO = View_RelativeWorldViewOriginTO;
	Result.RelativePreViewTranslationTO = View_RelativePreViewTranslationTO;
	Result.PrevRelativeWorldCameraOriginTO = View_PrevRelativeWorldCameraOriginTO;
	Result.PrevRelativeWorldViewOriginTO = View_PrevRelativeWorldViewOriginTO;
	Result.RelativePrevPreViewTranslationTO = View_RelativePrevPreViewTranslationTO;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.FirstPersonFieldOfViewWideAngles = View_FirstPersonFieldOfViewWideAngles;
	Result.PrevFirstPersonFieldOfViewWideAngles = View_PrevFirstPersonFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View_ProjectionDepthThicknessScale;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.AmbientOcclusionOverrideParameter = View_AmbientOcclusionOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.OrthoFarPlane = View_OrthoFarPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.FrameCounter = View_FrameCounter;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.StateOutputFrameIndex = View_StateOutputFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.SkyLightVolumetricScatteringIntensity = View_SkyLightVolumetricScatteringIntensity;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.ViewportScaleUI = View_ViewportScaleUI;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View_VolumetricFogPrevUVMax;
	Result.VolumetricFogPrevUVMaxForTemporalBlend = View_VolumetricFogPrevUVMaxForTemporalBlend;
	Result.VolumetricFogPrevResourceGridSize = View_VolumetricFogPrevResourceGridSize;
	Result.VolumetricFogScreenToResourceUV = View_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackBufferSize = View_VirtualTextureFeedbackBufferSize;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.VirtualTextureExtendedDebugBufferSize = View_VirtualTextureExtendedDebugBufferSize;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View_TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View_PrevTanAndInvTanHalfFOV;
	Result.FirstPersonTanAndInvTanHalfFOV = View_FirstPersonTanAndInvTanHalfFOV;
	Result.PrevFirstPersonTanAndInvTanHalfFOV = View_PrevFirstPersonTanAndInvTanHalfFOV;
	Result.WorldDepthToPixelWorldRadius = View_WorldDepthToPixelWorldRadius;
	Result.ScreenRayLengthMultiplier = View_ScreenRayLengthMultiplier;
	Result.GlintLUTParameters0 = View_GlintLUTParameters0;
	Result.GlintLUTParameters1 = View_GlintLUTParameters1;
	Result.FirstPersonScale = View_FirstPersonScale;
	Result.PrevFirstPersonScale = View_PrevFirstPersonScale;
	Result.MaterialMaxEmissiveValue = View_MaterialMaxEmissiveValue;
	Result.PostVolumeUserFlags = View_PostVolumeUserFlags;
	Result.EnvironmentComponentsFlags = View_EnvironmentComponentsFlags;
	Result.bPrimitiveAlphaHoldoutEnabled = View_bPrimitiveAlphaHoldoutEnabled;
	FinalizeViewState(Result);
	return Result;
}

#line 524 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetInstancedView(uint ViewIndex)
{
	ViewState Result;
	Result.TranslatedWorldToClip = (float4x4) InstancedView_TranslatedWorldToClip[ViewIndex];
	Result.RelativeWorldToClip = (float4x4) InstancedView_RelativeWorldToClip[ViewIndex];
	Result.ClipToRelativeWorld = (float4x4) InstancedView_ClipToRelativeWorld[ViewIndex];
	Result.TranslatedWorldToView = (float4x4) InstancedView_TranslatedWorldToView[ViewIndex];
	Result.ViewToTranslatedWorld = (float4x4) InstancedView_ViewToTranslatedWorld[ViewIndex];
	Result.TranslatedWorldToCameraView = (float4x4) InstancedView_TranslatedWorldToCameraView[ViewIndex];
	Result.CameraViewToTranslatedWorld = (float4x4) InstancedView_CameraViewToTranslatedWorld[ViewIndex];
	Result.ViewToClip = (float4x4) InstancedView_ViewToClip[ViewIndex];
	Result.ViewToClipNoAA = (float4x4) InstancedView_ViewToClipNoAA[ViewIndex];
	Result.ClipToView = (float4x4) InstancedView_ClipToView[ViewIndex];
	Result.ClipToTranslatedWorld = (float4x4) InstancedView_ClipToTranslatedWorld[ViewIndex];
	Result.SVPositionToTranslatedWorld = (float4x4) InstancedView_SVPositionToTranslatedWorld[ViewIndex];
	Result.ScreenToRelativeWorld = (float4x4) InstancedView_ScreenToRelativeWorld[ViewIndex];
	Result.ScreenToTranslatedWorld = (float4x4) InstancedView_ScreenToTranslatedWorld[ViewIndex];
	Result.MobileMultiviewShadowTransform = (float4x4) InstancedView_MobileMultiviewShadowTransform[ViewIndex];
	Result.MobileMultiviewDecalTransform = (float4x4) InstancedView_MobileMultiviewDecalTransform[ViewIndex];
	Result.FirstPersonTransform = (float4x4) InstancedView_FirstPersonTransform[ViewIndex];
	Result.PrevFirstPersonTransform = (float4x4) InstancedView_PrevFirstPersonTransform[ViewIndex];
	Result.ViewOriginHigh = (float3) InstancedView_ViewOriginHigh[ViewIndex];
	Result.ViewForward = InstancedView_ViewForward;
	Result.ViewUp = InstancedView_ViewUp;
	Result.ViewRight = InstancedView_ViewRight;
	Result.HMDViewNoRollUp = (float3) InstancedView_HMDViewNoRollUp[ViewIndex];
	Result.HMDViewNoRollRight = (float3) InstancedView_HMDViewNoRollRight[ViewIndex];
	Result.InvDeviceZToWorldZTransform = (float4) InstancedView_InvDeviceZToWorldZTransform[ViewIndex];
	Result.ScreenPositionScaleBias = (float4) InstancedView_ScreenPositionScaleBias[ViewIndex];
	Result.ViewOriginLow = (float3) InstancedView_ViewOriginLow[ViewIndex];
	Result.TranslatedWorldCameraOrigin = (float3) InstancedView_TranslatedWorldCameraOrigin[ViewIndex];
	Result.WorldViewOriginHigh = (float3) InstancedView_WorldViewOriginHigh[ViewIndex];
	Result.WorldViewOriginLow = (float3) InstancedView_WorldViewOriginLow[ViewIndex];
	Result.PreViewTranslationHigh = (float3) InstancedView_PreViewTranslationHigh[ViewIndex];
	Result.PreViewTranslationLow = (float3) InstancedView_PreViewTranslationLow[ViewIndex];
	Result.PrevViewToClip = (float4x4) InstancedView_PrevViewToClip[ViewIndex];
	Result.PrevClipToView = (float4x4) InstancedView_PrevClipToView[ViewIndex];
	Result.PrevTranslatedWorldToClip = (float4x4) InstancedView_PrevTranslatedWorldToClip[ViewIndex];
	Result.PrevTranslatedWorldToView = (float4x4) InstancedView_PrevTranslatedWorldToView[ViewIndex];
	Result.PrevViewToTranslatedWorld = (float4x4) InstancedView_PrevViewToTranslatedWorld[ViewIndex];
	Result.PrevTranslatedWorldToCameraView = (float4x4) InstancedView_PrevTranslatedWorldToCameraView[ViewIndex];
	Result.PrevCameraViewToTranslatedWorld = (float4x4) InstancedView_PrevCameraViewToTranslatedWorld[ViewIndex];
	Result.PrevTranslatedWorldCameraOrigin = (float3) InstancedView_PrevTranslatedWorldCameraOrigin[ViewIndex];
	Result.PrevWorldCameraOriginHigh = (float3) InstancedView_PrevWorldCameraOriginHigh[ViewIndex];
	Result.PrevWorldCameraOriginLow = (float3) InstancedView_PrevWorldCameraOriginLow[ViewIndex];
	Result.PrevWorldViewOriginHigh = (float3) InstancedView_PrevWorldViewOriginHigh[ViewIndex];
	Result.PrevWorldViewOriginLow = (float3) InstancedView_PrevWorldViewOriginLow[ViewIndex];
	Result.PrevPreViewTranslationHigh = (float3) InstancedView_PrevPreViewTranslationHigh[ViewIndex];
	Result.PrevPreViewTranslationLow = (float3) InstancedView_PrevPreViewTranslationLow[ViewIndex];
	Result.ViewTilePosition = (float3) InstancedView_ViewTilePosition[ViewIndex];
	Result.RelativeWorldCameraOriginTO = (float3) InstancedView_RelativeWorldCameraOriginTO[ViewIndex];
	Result.RelativeWorldViewOriginTO = (float3) InstancedView_RelativeWorldViewOriginTO[ViewIndex];
	Result.RelativePreViewTranslationTO = (float3) InstancedView_RelativePreViewTranslationTO[ViewIndex];
	Result.PrevRelativeWorldCameraOriginTO = (float3) InstancedView_PrevRelativeWorldCameraOriginTO[ViewIndex];
	Result.PrevRelativeWorldViewOriginTO = (float3) InstancedView_PrevRelativeWorldViewOriginTO[ViewIndex];
	Result.RelativePrevPreViewTranslationTO = (float3) InstancedView_RelativePrevPreViewTranslationTO[ViewIndex];
	Result.PrevClipToRelativeWorld = (float4x4) InstancedView_PrevClipToRelativeWorld[ViewIndex];
	Result.PrevScreenToTranslatedWorld = (float4x4) InstancedView_PrevScreenToTranslatedWorld[ViewIndex];
	Result.ClipToPrevClip = (float4x4) InstancedView_ClipToPrevClip[ViewIndex];
	Result.ClipToPrevClipWithAA = (float4x4) InstancedView_ClipToPrevClipWithAA[ViewIndex];
	Result.TemporalAAJitter = (float4) InstancedView_TemporalAAJitter[ViewIndex];
	Result.GlobalClippingPlane = (float4) InstancedView_GlobalClippingPlane[ViewIndex];
	Result.FieldOfViewWideAngles = (float2) InstancedView_FieldOfViewWideAngles[ViewIndex];
	Result.PrevFieldOfViewWideAngles = (float2) InstancedView_PrevFieldOfViewWideAngles[ViewIndex];
	Result.FirstPersonFieldOfViewWideAngles = (float2) InstancedView_FirstPersonFieldOfViewWideAngles[ViewIndex];
	Result.PrevFirstPersonFieldOfViewWideAngles = (float2) InstancedView_PrevFirstPersonFieldOfViewWideAngles[ViewIndex];
	Result.ViewRectMin = (float4) InstancedView_ViewRectMin[ViewIndex];
	Result.ViewSizeAndInvSize = InstancedView_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = InstancedView_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = InstancedView_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = (float4) InstancedView_BufferBilinearUVMinMax[ViewIndex];
	Result.ScreenToViewSpace = (float4) InstancedView_ScreenToViewSpace[ViewIndex];
	Result.BufferToSceneTextureScale = (float2) InstancedView_BufferToSceneTextureScale[ViewIndex];
	Result.ResolutionFractionAndInv = InstancedView_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = InstancedView_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = (float) InstancedView_ProjectionDepthThicknessScale[ViewIndex];
	Result.PreExposure = InstancedView_PreExposure;
	Result.OneOverPreExposure = InstancedView_OneOverPreExposure;
	Result.DiffuseOverrideParameter = InstancedView_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = InstancedView_SpecularOverrideParameter;
	Result.NormalOverrideParameter = InstancedView_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = InstancedView_RoughnessOverrideParameter;
	Result.AmbientOcclusionOverrideParameter = InstancedView_AmbientOcclusionOverrideParameter;
	Result.PrevFrameGameTime = InstancedView_PrevFrameGameTime;
	Result.PrevFrameRealTime = InstancedView_PrevFrameRealTime;
	Result.OutOfBoundsMask = InstancedView_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = (float3) InstancedView_WorldCameraMovementSinceLastFrame[ViewIndex];
	Result.CullingSign = InstancedView_CullingSign;
	Result.NearPlane = (float) InstancedView_NearPlane[ViewIndex];
	Result.OrthoFarPlane = (float) InstancedView_OrthoFarPlane[ViewIndex];
	Result.GameTime = InstancedView_GameTime;
	Result.RealTime = InstancedView_RealTime;
	Result.DeltaTime = InstancedView_DeltaTime;
	Result.MaterialTextureMipBias = InstancedView_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = InstancedView_MaterialTextureDerivativeMultiply;
	Result.Random = InstancedView_Random;
	Result.FrameNumber = InstancedView_FrameNumber;
	Result.FrameCounter = InstancedView_FrameCounter;
	Result.StateFrameIndexMod8 = InstancedView_StateFrameIndexMod8;
	Result.StateFrameIndex = InstancedView_StateFrameIndex;
	Result.StateOutputFrameIndex = InstancedView_StateOutputFrameIndex;
	Result.DebugViewModeMask = InstancedView_DebugViewModeMask;
	Result.WorldIsPaused = InstancedView_WorldIsPaused;
	Result.CameraCut = InstancedView_CameraCut;
	Result.UnlitViewmodeMask = InstancedView_UnlitViewmodeMask;
	Result.DirectionalLightColor = InstancedView_DirectionalLightColor;
	Result.DirectionalLightDirection = InstancedView_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = InstancedView_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = InstancedView_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = InstancedView_TemporalAAParams;
	Result.CircleDOFParams = InstancedView_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = InstancedView_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = InstancedView_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = InstancedView_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = InstancedView_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = InstancedView_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = InstancedView_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = InstancedView_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = InstancedView_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = InstancedView_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = InstancedView_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = InstancedView_DemosaicVposOffset;
	Result.DecalDepthBias = InstancedView_DecalDepthBias;
	Result.IndirectLightingColorScale = InstancedView_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = InstancedView_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = InstancedView_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = InstancedView_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = InstancedView_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = InstancedView_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = InstancedView_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = InstancedView_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = InstancedView_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = InstancedView_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = InstancedView_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = InstancedView_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = InstancedView_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = InstancedView_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = InstancedView_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = InstancedView_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = InstancedView_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = InstancedView_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = InstancedView_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = InstancedView_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = InstancedView_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = InstancedView_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = InstancedView_SkyLightColor;
	Result.SkyLightVolumetricScatteringIntensity = InstancedView_SkyLightVolumetricScatteringIntensity;
	Result.MobileSkyIrradianceEnvironmentMap = InstancedView_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = InstancedView_MobilePreviewMode;
	Result.HMDEyePaddingOffset = (float) InstancedView_HMDEyePaddingOffset[ViewIndex];
	Result.ReflectionCubemapMaxMip = InstancedView_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = InstancedView_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = InstancedView_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = InstancedView_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = (int) InstancedView_StereoPassIndex[ViewIndex];
	Result.GlobalVolumeTranslatedCenterAndExtent = InstancedView_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = InstancedView_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = InstancedView_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = InstancedView_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = InstancedView_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = InstancedView_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = InstancedView_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = InstancedView_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = InstancedView_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = InstancedView_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = InstancedView_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = InstancedView_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = InstancedView_DitheredTransparencyTraceThreshold;
	Result.ViewportScaleUI = InstancedView_ViewportScaleUI;
	Result.CursorPosition = InstancedView_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = InstancedView_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = InstancedView_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = InstancedView_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = InstancedView_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = InstancedView_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = InstancedView_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = InstancedView_VolumetricFogPrevUVMax;
	Result.VolumetricFogPrevUVMaxForTemporalBlend = InstancedView_VolumetricFogPrevUVMaxForTemporalBlend;
	Result.VolumetricFogPrevResourceGridSize = InstancedView_VolumetricFogPrevResourceGridSize;
	Result.VolumetricFogScreenToResourceUV = InstancedView_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = InstancedView_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = InstancedView_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = InstancedView_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = InstancedView_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = InstancedView_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = InstancedView_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = InstancedView_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = InstancedView_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = InstancedView_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = InstancedView_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = InstancedView_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackBufferSize = InstancedView_VirtualTextureFeedbackBufferSize;
	Result.VirtualTextureFeedbackShift = InstancedView_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = InstancedView_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackJitterOffset = InstancedView_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = InstancedView_VirtualTextureFeedbackSampleOffset;
	Result.VirtualTextureExtendedDebugBufferSize = InstancedView_VirtualTextureExtendedDebugBufferSize;
	Result.FarShadowStaticMeshLODBias = InstancedView_FarShadowStaticMeshLODBias;
	Result.MinRoughness = InstancedView_MinRoughness;
	Result.HairRenderInfo = InstancedView_HairRenderInfo;
	Result.EnableSkyLight = InstancedView_EnableSkyLight;
	Result.HairRenderInfoBits = InstancedView_HairRenderInfoBits;
	Result.HairComponents = InstancedView_HairComponents;
	Result.bSubsurfacePostprocessEnabled = InstancedView_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = InstancedView_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = InstancedView_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = InstancedView_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = InstancedView_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = InstancedView_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = InstancedView_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = InstancedView_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = InstancedView_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = InstancedView_PhysicsFieldTargets;
	Result.GPUSceneViewId = (uint) InstancedView_GPUSceneViewId[ViewIndex];
	Result.ViewResolutionFraction = InstancedView_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = (float4) InstancedView_TanAndInvTanHalfFOV[ViewIndex];
	Result.PrevTanAndInvTanHalfFOV = (float4) InstancedView_PrevTanAndInvTanHalfFOV[ViewIndex];
	Result.FirstPersonTanAndInvTanHalfFOV = (float4) InstancedView_FirstPersonTanAndInvTanHalfFOV[ViewIndex];
	Result.PrevFirstPersonTanAndInvTanHalfFOV = (float4) InstancedView_PrevFirstPersonTanAndInvTanHalfFOV[ViewIndex];
	Result.WorldDepthToPixelWorldRadius = (float2) InstancedView_WorldDepthToPixelWorldRadius[ViewIndex];
	Result.ScreenRayLengthMultiplier = (float4) InstancedView_ScreenRayLengthMultiplier[ViewIndex];
	Result.GlintLUTParameters0 = (float4) InstancedView_GlintLUTParameters0[ViewIndex];
	Result.GlintLUTParameters1 = (float4) InstancedView_GlintLUTParameters1[ViewIndex];
	Result.FirstPersonScale = (float) InstancedView_FirstPersonScale[ViewIndex];
	Result.PrevFirstPersonScale = (float) InstancedView_PrevFirstPersonScale[ViewIndex];
	Result.MaterialMaxEmissiveValue = InstancedView_MaterialMaxEmissiveValue;
	Result.PostVolumeUserFlags = InstancedView_PostVolumeUserFlags;
	Result.EnvironmentComponentsFlags = InstancedView_EnvironmentComponentsFlags;
	Result.bPrimitiveAlphaHoldoutEnabled = InstancedView_bPrimitiveAlphaHoldoutEnabled;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeDFInverseMatrix(InOutView.ViewOriginHigh, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeDFVector3(InOutView.ViewOriginHigh, InOutView.ViewOriginLow);
	InOutView.WorldViewOrigin = MakeDFVector3(InOutView.WorldViewOriginHigh, InOutView.WorldViewOriginLow);
	InOutView.PrevWorldCameraOrigin = MakeDFVector3(InOutView.PrevWorldCameraOriginHigh, InOutView.PrevWorldCameraOriginLow);
	InOutView.PrevWorldViewOrigin = MakeDFVector3(InOutView.PrevWorldViewOriginHigh, InOutView.PrevWorldViewOriginLow);
	InOutView.PreViewTranslation = MakeDFVector3(InOutView.PreViewTranslationHigh, InOutView.PreViewTranslationLow);
	InOutView.PrevPreViewTranslation = MakeDFVector3(InOutView.PrevPreViewTranslationHigh, InOutView.PrevPreViewTranslationLow);


	InOutView.TileOffset.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOriginTO);
	InOutView.TileOffset.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOriginTO);
	InOutView.TileOffset.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOriginTO);
	InOutView.TileOffset.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOriginTO);
	InOutView.TileOffset.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslationTO);
	InOutView.TileOffset.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslationTO);

}

#line 43 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 45 "/Engine/Private/InstancedStereo.ush"
ViewState ResolveView()
{
	return GetPrimaryView();
}

#line 51 "/Engine/Private/InstancedStereo.ush"
ViewState ResolveView(uint ViewIndex)
{
	return GetInstancedView(ViewIndex);
}

#line 62 "/Engine/Private/InstancedStereo.ush"
bool IsInstancedStereo()
{

	return (uint)InstancedView_StereoPassIndex[1] > 0;



}

#line 71 "/Engine/Private/InstancedStereo.ush"
uint GetEyeIndex(uint InstanceId)
{

	return IsInstancedStereo() ? InstanceId & 1 : 0;



}

#line 100 "/Engine/Private/InstancedStereo.ush"
struct FStereoVSToPS
{

	nointerpolation uint EyeIndex : VIEW_ID;

};

#line 119 "/Engine/Private/InstancedStereo.ush"
struct FStereoPSInput
{



	FStereoVSToPS StereoInterpolants;
};

#line 160 "/Engine/Private/InstancedStereo.ush"
void StereoSetupPS(FStereoPSInput StereoInput)
{

	ResolvedView = ResolveView(StereoInput.StereoInterpolants.EyeIndex);





	}

#line 180 "/Engine/Private/InstancedStereo.ush"
uint GetEyeIndex(FStereoPSInput StereoInput)
{

	return StereoInput.StereoInterpolants.EyeIndex;





	}

#line 356 "/Engine/Private/Common.ush"
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 372 "/Engine/Private/Common.ush"
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 392 "/Engine/Private/Common.ush"
float4 TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 657 "/Engine/Private/Common.ush"
float4 TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float4 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 677 "/Engine/Private/Common.ush"
float4 TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float3 UV, float ArrayIndex, float Mip)
{
	return TextureCubeArraySampleLevel(Tex, Sampler, float4(UV, ArrayIndex), Mip);
}

#line 738 "/Engine/Private/Common.ush"
float3 LuminanceFactors()
{




		return float3(0.2126390059, 0.7151686788, 0.0721923154);




}

#line 751 "/Engine/Private/Common.ush"
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3(LuminanceFactors()));
}

#line 756 "/Engine/Private/Common.ush"
float length2(float2 v)
{
	return dot(v, v);
}

#line 760 "/Engine/Private/Common.ush"
float length2(float3 v)
{
	return dot(v, v);
}

#line 764 "/Engine/Private/Common.ush"
float length2(float4 v)
{
	return dot(v, v);
}

#line 52 "/Engine/Private/FastMathThirdParty.ush"
float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}

#line 108 "/Engine/Private/FastMathThirdParty.ush"
float acosFast(float inX) 
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

#line 116 "/Engine/Private/FastMathThirdParty.ush"
float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

#line 121 "/Engine/Private/FastMathThirdParty.ush"
float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

#line 126 "/Engine/Private/FastMathThirdParty.ush"
float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}

#line 134 "/Engine/Private/FastMathThirdParty.ush"
float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

#line 139 "/Engine/Private/FastMathThirdParty.ush"
float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

#line 144 "/Engine/Private/FastMathThirdParty.ush"
float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

#line 149 "/Engine/Private/FastMathThirdParty.ush"
float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}

#line 11 "/Engine/Private/RandomInterleavedGradientNoise.ush"
float InterleavedGradientNoise( float2 uv, float FrameId )
{

	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}

#line 45 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed / 4093);
	s = frac(s * s * 4093);
	s = frac(s * s * 4093);
	return s;
}

#line 122 "/Engine/Private/Random.ush"
float3 NoiseTileWrap(float3 v,  bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}

#line 130 "/Engine/Private/Random.ush"
float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10); 
}

#line 149 "/Engine/Private/Random.ush"
float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	return float4(direction, dot(direction, offset));
}

#line 162 "/Engine/Private/Random.ush"
float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{	
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{	
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}

#line 203 "/Engine/Private/Random.ush"
float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}

#line 349 "/Engine/Private/Random.ush"
float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}

#line 378 "/Engine/Private/Random.ush"
float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);

	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;	
	if (bTiling)						
	{
		OffsetB = iv1.z * ZShear;
	}


	float ts = 1 / 128.0f;


	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;


	float2 TexA1 = TexA0 + ts;	
	float2 TexB1 = TexB0 + ts;
	if (bTiling)				
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}



	float3 A = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;

	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}

#line 440 "/Engine/Private/Random.ush"
float FastGradientPerlinNoise3D_TEX(float3 xyz)
{

	float Extent = 16;



	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);


	float3 uvw = frac(xyz);


	float3 p0 = xyz - uvw;


	float3 f = PerlinRamp(float4(uvw, 0)).xyz;	

	float3 p = p0 + f;

	float4 NoiseSample = Texture3DSampleLevel(View_PerlinNoise3DTexture, View_PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);		



	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}

#line 473 "/Engine/Private/Random.ush"
float3 VoronoiCornerSample(float3 pos, int Quality)
{

	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;



	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}



	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}


	return noise;
}

#line 503 "/Engine/Private/Random.ush"
float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}

#line 517 "/Engine/Private/Random.ush"
float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v),  fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);


	float4 mindist = float4(0,0,0,100);
	float3 p, offset;


	if (Quality == 3)
	{
		 [unroll( 3 )] for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			 [unroll( 3 )] for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				 [unroll( 3 )] for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}


	else
	{
		 [unroll( 2 )] for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					if (Quality == 2)
					{

						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}


	if (Quality >= 4)
	{
		 [unroll( 2 )] for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{

					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}


	return float4(mindist.xyz, sqrt(mindist.w));
}

#line 620 "/Engine/Private/Random.ush"
float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b = 
		  min(max(0, RG), max(0, RB))		
		+ min(max(0, -RG), max(0, GB))		
		+ min(max(0, -RB), max(0, -GB));	

	ret.a = 
		  min(max(0, -RG), max(0, -RB))		
		+ min(max(0, RG), max(0, -GB))		
		+ min(max(0, RB), max(0, GB));		

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

#line 657 "/Engine/Private/Random.ush"
float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;


	float3 p = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

#line 666 "/Engine/Private/Random.ush"
float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

#line 676 "/Engine/Private/Random.ush"
float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}

#line 680 "/Engine/Private/Random.ush"
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}

#line 684 "/Engine/Private/Random.ush"
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}

#line 688 "/Engine/Private/Random.ush"
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}

#line 729 "/Engine/Private/Random.ush"
float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);


	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}

#line 1061 "/Engine/Private/Common.ush"
float Square( float x )
{
	return x*x;
}

#line 1066 "/Engine/Private/Common.ush"
float2 Square( float2 x )
{
	return x*x;
}

#line 1071 "/Engine/Private/Common.ush"
float3 Square( float3 x )
{
	return x*x;
}

#line 1076 "/Engine/Private/Common.ush"
float4 Square( float4 x )
{
	return x*x;
}

#line 1081 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 1086 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 1091 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 1096 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 1121 "/Engine/Private/Common.ush"
float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

#line 1127 "/Engine/Private/Common.ush"
float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

#line 1133 "/Engine/Private/Common.ush"
float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

#line 1139 "/Engine/Private/Common.ush"
float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

#line 1145 "/Engine/Private/Common.ush"
float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

#line 1151 "/Engine/Private/Common.ush"
float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

#line 1157 "/Engine/Private/Common.ush"
float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

#line 1163 "/Engine/Private/Common.ush"
float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

#line 1216 "/Engine/Private/Common.ush"
float DecodeLightAttenuation(float InColor)
{
	return Square(InColor);
}

#line 1222 "/Engine/Private/Common.ush"
float4 DecodeLightAttenuation(float4 InColor)
{
	return Square(InColor);
}

#line 1334 "/Engine/Private/Common.ush"
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip._44 >= 1.0f;
}

#line 1340 "/Engine/Private/Common.ush"
bool IsOrthoProjection(ViewState InView)
{
	return IsOrthoProjection(InView.ViewToClip);
}

#line 1346 "/Engine/Private/Common.ush"
bool IsOrthoProjection()
{
	return IsOrthoProjection(View_ViewToClip);
}

#line 1378 "/Engine/Private/Common.ush"
float ConvertFromDeviceZ(float DeviceZ)
{

	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}

#line 1465 "/Engine/Private/Common.ush"
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

#line 1511 "/Engine/Private/Common.ush"
float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View_BufferSizeAndInvSize.zw;
}

#line 1525 "/Engine/Private/Common.ush"
float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}

#line 1555 "/Engine/Private/Common.ush"
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	


	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

#line 1764 "/Engine/Private/Common.ush"
float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{

	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}

#line 1787 "/Engine/Private/Common.ush"
float MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;

	[loop] for(uint i = 0; i < Levels; ++i)
	{

		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{

		Out = Out * 0.5f + 0.5f;
	}


	return lerp(OutputMin, OutputMax, Out);
}

#line 1826 "/Engine/Private/Common.ush"
float MaterialExpressionNoise(FDFVector3 LWCPosition, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	const float TileSize = 65536;
	float3 Position = abs(TileSize * DFFracDemote(DFDivideByPow2(LWCPosition, TileSize))); 
	return MaterialExpressionNoise(Position, Scale, Quality, Function, bTurbulence, Levels, OutputMin, OutputMax, LevelScale, FilterWidth, bTiling, RepeatSize);
}

#line 1833 "/Engine/Private/Common.ush"
float MaterialExpressionNoise(FLWCVector3 LWCPosition, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	float3 Position = LWCNormalizeTile(LWCPosition).Offset;
	return MaterialExpressionNoise(Position, Scale, Quality, Function, bTurbulence, Levels, OutputMin, OutputMax, LevelScale, FilterWidth, bTiling, RepeatSize);
}

#line 1952 "/Engine/Private/Common.ush"
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;


	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}

#line 1978 "/Engine/Private/Common.ush"
float3 TransformTangentVectorToWorld(float3x3 TangentToWorld, float3 InTangentVector)
{


	return mul(InTangentVector, TangentToWorld);
}

#line 2391 "/Engine/Private/Common.ush"
struct FPixelShaderIn
{

	float4 SvPosition;


	uint Coverage;


	bool bIsFrontFace;
};

#line 2403 "/Engine/Private/Common.ush"
struct FPixelShaderOut
{

	float4 MRT[8];


	uint SubstrateOutput[3];
	uint SubstrateTopLayerData;


	uint Coverage;


	float Depth;
};

#line 37 "/Engine/Private/WorldSpaceMath.ush"
FLWCScalar DFToWS(FDFScalar In) { return DFToTileOffset(In); }
FLWCScalar DFFastToWS(FDFScalar In) { return DFFastToTileOffset(In); }

#line 43 "/Engine/Private/WorldSpaceMath.ush"
FLWCVector2 DFToWS(FDFVector2 In) { return DFToTileOffset(In); }
FLWCVector2 DFFastToWS(FDFVector2 In) { return DFFastToTileOffset(In); }

#line 49 "/Engine/Private/WorldSpaceMath.ush"
FLWCVector3 DFToWS(FDFVector3 In) { return DFToTileOffset(In); }
FLWCVector3 DFFastToWS(FDFVector3 In) { return DFFastToTileOffset(In); }

#line 55 "/Engine/Private/WorldSpaceMath.ush"
FLWCVector4 DFToWS(FDFVector4 In) { return DFToTileOffset(In); }
FLWCVector4 DFFastToWS(FDFVector4 In) { return DFFastToTileOffset(In); }

#line 61 "/Engine/Private/WorldSpaceMath.ush"
FLWCMatrix DFToWS(FDFMatrix In) { return DFToTileOffset(In); }
FLWCMatrix DFFastToWS(FDFMatrix In) { return DFFastToTileOffset(In); }

#line 67 "/Engine/Private/WorldSpaceMath.ush"
FLWCInverseMatrix DFToWS(FDFInverseMatrix In) { return DFToTileOffset(In); }
FLWCInverseMatrix DFFastToWS(FDFInverseMatrix In) { return DFFastToTileOffset(In); }

#line 289 "/Engine/Private/WorldSpaceMath.ush"
float DFToWS( float In) { return In; }
float2 DFToWS( float2 In) { return In; }
float3 DFToWS( float3 In) { return In; }
float4 DFToWS( float4 In) { return In; }

#line 24 "/Engine/Private/SobolRandom.ush"
uint2 SobolPixel(uint2 Pixel)
{

	int3 SobolLo = int3(Pixel & 0xfu, 0);
	int3 SobolHi = int3((Pixel >> 4u) & 0xfu, 0) + int3(16, 0, 0);
	uint Packed = View_SobolSamplingTexture.Load(SobolLo) ^ View_SobolSamplingTexture.Load(SobolHi);
	return uint2(Packed, Packed << 8u) & 0xff00u;
}

#line 38 "/Engine/Private/SobolRandom.ush"
uint2 SobolIndex(uint2 Base, int Index, int Bits = 10)
{
	uint2 SobolNumbers[10] = {
		uint2(0x8680u, 0x4c80u), uint2(0xf240u, 0x9240u), uint2(0x8220u, 0x0e20u), uint2(0x4110u, 0x1610u), uint2(0xa608u, 0x7608u),
		uint2(0x8a02u, 0x280au), uint2(0xe204u, 0x9e04u), uint2(0xa400u, 0x4682u), uint2(0xe300u, 0xa74du), uint2(0xb700u, 0x9817u),
	};

	uint2 Result = Base;
	[unroll] for (int b = 0; b < 10 && b < Bits; ++b)
	{
		Result ^= (Index & (1u << b)) ? SobolNumbers[b] : 0;
	}
	return Result;
}

#line 13 "/Engine/Private/MonteCarlo.ush"
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;

	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}

#line 48 "/Engine/Private/MonteCarlo.ush"
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

#line 214 "/Engine/Private/MonteCarlo.ush"
float4 UniformSampleSphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = 1 - 2 * E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (4 * PI);

	return float4( H, PDF );
}

#line 248 "/Engine/Private/MonteCarlo.ush"
float4 CosineSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt(E.y);
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

	float PDF = CosTheta * (1.0 / PI);

	return float4(H, PDF);
}

#line 274 "/Engine/Private/MonteCarlo.ush"
float4 CosineSampleHemisphere( float2 E, float3 N ) 
{
	float3 H = UniformSampleSphere( E ).xyz;
	H = normalize( N + H );

	float PDF = dot(H, N) * (1.0 /  PI);

	return float4( H, PDF );
}

#line 303 "/Engine/Private/MonteCarlo.ush"
float4 UniformSampleConeRobust(float2 E, float SinThetaMax2)
{
	float Phi = 2 * PI * E.x;



	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);

	float CosTheta = 1 - OneMinusCosThetaMax * E.y;
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 L;
	L.x = SinTheta * cos(Phi);
	L.y = SinTheta * sin(Phi);
	L.z = CosTheta;
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}

#line 323 "/Engine/Private/MonteCarlo.ush"
float UniformConeSolidAngle(float SinThetaMax2)
{
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	return 2 * PI * OneMinusCosThetaMax;
}

#line 347 "/Engine/Private/MonteCarlo.ush"
float4 ImportanceSampleGGX( float2 E, float a2 )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( (1 - E.y) / ( 1 + (a2 - 1) * E.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float d = ( CosTheta * a2 - CosTheta ) * CosTheta + 1;
	float D = a2 / ( PI*d*d );
	float PDF = D * CosTheta;

	return float4( H, PDF );
}

#line 18 "/Engine/Private/OctahedralCommon.ush"
float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}

#line 28 "/Engine/Private/OctahedralCommon.ush"
float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}

#line 90 "/Engine/Private/SceneData.ush"
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		PositionHigh;
	uint		PrimitiveComponentId; 
	FDFMatrix	LocalToWorld;
	FDFInverseMatrix WorldToLocal;
	FDFMatrix	PreviousLocalToWorld;
	FDFInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FDFVector3	ObjectWorldPosition;
	FDFVector3	ActorWorldPosition;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;

	FLWCVector3	ObjectWorldPositionTO;
	FLWCVector3	ActorWorldPositionTO;

	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	uint		NaniteAssemblyTransformOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		PrimitiveColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	uint		CustomStencilValueAndMask;
	float		PixelProgrammableDistanceSquared;
	float		MaterialDisplacementFadeOutSize;
	uint2		MeshPaintTextureDescriptor;
	uint2		MaterialCacheTextureDescriptor;
	float4		CustomPrimitiveData[9u]; 
};

#line 149 "/Engine/Private/SceneData.ush"
float3 UnpackColorRGB24(float PackedColorFloat)
{
	uint PackedColor = asuint(PackedColorFloat);
	return float3
	(
		float((PackedColor >> 24u) & 0xFF),
		float((PackedColor >> 16u) & 0xFF),
		float((PackedColor >>  8u) & 0xFF)
	) * (1.0f / 255.0f);
}

#line 236 "/Engine/Private/SceneData.ush"
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};

#line 244 "/Engine/Private/SceneData.ush"
struct FInstanceSceneData
{
	uint InstanceId; 
	FDFMatrix LocalToWorld;
	FDFMatrix PrevLocalToWorld;
	FDFInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;
	uint     NaniteAssemblyTransformOffset;
	uint     SkinningData;
	float    RandomID;





	float4   LightMapAndShadowMapUVBias;

	bool     ValidInstance;
	uint     Flags;


	FInstanceSceneEditorData EditorData;

};

#line 341 "/Engine/Private/SceneData.ush"
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;

#line 359 "/Engine/Private/SceneData.ush"

	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];

}

#line 370 "/Engine/Private/SceneData.ush"
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{











	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;


	uint PrimitiveIndex = PrimitiveId * 44;

	float3 PositionHigh = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;

	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));

	float4 ObjectWorldPositionHighAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);
	float4 ObjectWorldPositionLow			= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19);

	float4 ActorWorldPositionHigh	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20);
	float4 ActorWorldPositionLow	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);

	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.PositionHigh							= PositionHigh; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeDFMatrix4x3(PositionHigh, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeDFInverseMatrix4x3(PositionHigh, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeDFMatrix4x3(PositionHigh, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeDFInverseMatrix4x3(PositionHigh, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectRadius							= ObjectWorldPositionHighAndRadius.w;

	PrimitiveData.ObjectWorldPositionTO					= MakeLWCVector3(ObjectWorldPositionHighAndRadius.xyz, ObjectWorldPositionLow.xyz);
	PrimitiveData.ActorWorldPositionTO					= MakeLWCVector3(ActorWorldPositionHigh.xyz, ActorWorldPositionLow.xyz);
	PrimitiveData.ObjectWorldPosition					= DFFromTileOffset(PrimitiveData.ObjectWorldPositionTO);
	PrimitiveData.ActorWorldPosition					= DFFromTileOffset(PrimitiveData.ActorWorldPositionTO);




	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w;
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) >> 24;
	PrimitiveData.WireframeColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).x);
	PrimitiveData.PrimitiveColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).y);
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z);
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).x;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).y);
	PrimitiveData.PixelProgrammableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).z;
	PrimitiveData.MaterialDisplacementFadeOutSize		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).w;
	PrimitiveData.MeshPaintTextureDescriptor			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 33).xy);
	PrimitiveData.NaniteAssemblyTransformOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 33).z);
	PrimitiveData.MaterialCacheTextureDescriptor			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 34).xy);




	[unroll]
	for (uint DataIndex = 0; DataIndex < 9u; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  35 + DataIndex);
	}
	return PrimitiveData;

}

#line 527 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData_FromFlags(uint Flags)
{
	const float CapsuleRepresentation = CondMask(Flags & 0x100, 1.0f, 0.0f);
	const float CastContactShadow     = CondMask(Flags & 0x200,    1.0f, 0.0f);
	return (2.0f * CapsuleRepresentation + CastContactShadow) / 3.0f;
}

#line 534 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData(uint PrimitiveId)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}

#line 540 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(Primitive_Flags);
}

#line 546 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask_FromFlags(uint Flags)
{
	const uint Channel0 = CondMask(Flags & 0x800, 1u, 0u);
	const uint Channel1 = CondMask(Flags & 0x1000, 1u, 0u);
	const uint Channel2 = CondMask(Flags & 0x2000, 1u, 0u);
	return (Channel0 | (Channel1 << 1u) | (Channel2 << 2u));
}

#line 554 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask(uint PrimitiveId)
{
	return GetPrimitive_LightingChannelMask_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}

#line 560 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_LightingChannelMask_FromFlags(Primitive_Flags);
}

#line 1303 "/Engine/Private/SceneData.ush"
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;

	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};

#line 20 "/Engine/Private/HairShadingCommon.ush"
struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;
	bool bClampBSDFValue;

	float  OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;

	uint ScatteringComponent;
};

#line 34 "/Engine/Private/HairShadingCommon.ush"
FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;
	o.bClampBSDFValue = true;

	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent = 0x1u | 0x2u | 0x4u | (bMultipleScatterEnable ? 0x20u : 0);

	return o;
}

#line 73 "/Engine/Private/HairShadingCommon.ush"
float3 HairColorToAbsorption(float3 C, float B = 0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return Pow2(log(C) / D);
}

#line 91 "/Engine/Private/ShadingCommon.ush"
bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID == 6;
}

#line 104 "/Engine/Private/ShadingCommon.ush"
float F0RGBToF0(float3 F0)
{
	return max3(F0.r, F0.g, F0.b);
}

#line 114 "/Engine/Private/ShadingCommon.ush"
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}

#line 140 "/Engine/Private/ShadingCommon.ush"
float  F0ToMicroOcclusion(float F0)   { return saturate(50.0 * F0); }
float3 F0ToMicroOcclusion(float3 F0)  { return saturate(50.0 * F0); }

#line 143 "/Engine/Private/ShadingCommon.ush"
float F0RGBToMicroOcclusion(float3 F0)
{
	return F0ToMicroOcclusion(F0RGBToF0(F0));
}

#line 148 "/Engine/Private/ShadingCommon.ush"
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

#line 24 "/Engine/Private/LightAccumulator.ush"
struct FLightAccumulator
{
	float3 TotalLight;
	float TotalLightLuminance;




	float ScatterableLightLuma;




	float3 ScatterableLight;



	float EstimatedCost;



	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;

};

#line 50 "/Engine/Private/LightAccumulator.ush"
struct FDeferredLightingSplit
{
	float4 DiffuseLighting;
	float4 SpecularLighting;
	float LightingLuminance;
};

#line 58 "/Engine/Private/LightAccumulator.ush"
void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{

	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;
	In.TotalLightLuminance += Luminance((DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier);


	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if (1 == 1)
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if (1 == 2)
		{

			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}

	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}

#line 85 "/Engine/Private/LightAccumulator.ush"
void LightAccumulator_Add(inout FLightAccumulator In, float3 TotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	LightAccumulator_AddSplit(In, TotalLight, 0.0f, ScatterableLight, CommonMultiplier, bNeedsSeparateSubsurfaceLightAccumulation);
}

#line 90 "/Engine/Private/LightAccumulator.ush"
float4 ConvertEstimatedCostToColor(float EstimatedCost)
{
	return 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * EstimatedCost;
}

#line 98 "/Engine/Private/LightAccumulator.ush"
float4 LightAccumulator_GetResult(FLightAccumulator In)
{
	float4 Ret;

	if (0 == 1)
	{

		Ret = ConvertEstimatedCostToColor(In.EstimatedCost);
	}
	else
	{
		Ret = float4(In.TotalLight, 0);

		if (1 == 1 )
		{








			if (View_bCheckerboardSubsurfaceProfileRendering == 0 && View_bSubsurfacePostprocessEnabled)
			{

				Ret.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{


			Ret.a = Luminance(In.ScatterableLight);

		}
	}

	return Ret;
}

#line 140 "/Engine/Private/LightAccumulator.ush"
FDeferredLightingSplit LightAccumulator_GetResultSplit(FLightAccumulator In)
{
	float4 RetDiffuse;
	float4 RetSpecular;

	if (0 == 1)
	{

		RetDiffuse  = ConvertEstimatedCostToColor(In.EstimatedCost);
		RetSpecular = RetDiffuse;
	}
	else
	{
		RetDiffuse = float4(In.TotalLightDiffuse, 0);
		RetSpecular = float4(In.TotalLightSpecular, 0);

		if (1 == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0 && View_bSubsurfacePostprocessEnabled)
			{

				RetDiffuse.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{


			RetDiffuse.a = Luminance(In.ScatterableLight);

		}
	}

	FDeferredLightingSplit Ret;
	Ret.DiffuseLighting = RetDiffuse;
	Ret.SpecularLighting = RetSpecular;
	Ret.LightingLuminance = In.TotalLightLuminance;

	return Ret;
}

#line 310 "/Engine/Private/DeferredShadingCommon.ush"
bool UseSubsurfaceProfile(int ShadingModel)
{
	return ShadingModel == 5 || ShadingModel == 9;
}

#line 333 "/Engine/Private/DeferredShadingCommon.ush"
struct FGBufferData
{

	float3 WorldNormal;

	float3 WorldTangent;

	float3 DiffuseColor;

	float3 SpecularColor;

	float3 BaseColor;

	float Metallic;

	float Specular;

	float4 CustomData;

	float GenericAO;

	float IndirectIrradiance;


	float4 PrecomputedShadowFactors;

	float Roughness;

	float Anisotropy;

	float GBufferAO;

	uint DiffuseIndirectSampleOcclusion;

	uint ShadingModelID;

	uint SelectiveOutputMask;

	float PerObjectGBufferData;

	float CustomDepth;

	uint CustomStencil;


	float Depth;

	float4 Velocity;


	float3 StoredBaseColor;

	float StoredSpecular;

	float StoredMetallic;


	float Curvature;
};

#line 393 "/Engine/Private/DeferredShadingCommon.ush"
bool CastContactShadow(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	bool bCastContactShadowBit = PackedAlpha & 1;

	bool bShadingModelCastContactShadows = (GBufferData.ShadingModelID != 9);
	return bCastContactShadowBit && bShadingModelCastContactShadows;
}

#line 402 "/Engine/Private/DeferredShadingCommon.ush"
bool HasDynamicIndirectShadowCasterRepresentation(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	return (PackedAlpha & 2) != 0;
}

#line 420 "/Engine/Private/DeferredShadingCommon.ush"
bool CheckerFromPixelPos(uint2 PixelPos)
{


	uint TemporalAASampleIndex = uint(View_TemporalAAParams.x);


	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;



}

#line 1060 "/Engine/Private/DeferredShadingCommon.ush"
float3 ExtractSubsurfaceColor(FGBufferData BufferData)
{
	return Square(BufferData.CustomData.rgb);
}

#line 1065 "/Engine/Private/DeferredShadingCommon.ush"
uint ExtractSubsurfaceProfileInt(float ProfileNormFloat)
{
	return uint(ProfileNormFloat * 255.0f + 0.5f);
}

#line 1070 "/Engine/Private/DeferredShadingCommon.ush"
uint ExtractSubsurfaceProfileInt(FGBufferData BufferData)
{
	return ExtractSubsurfaceProfileInt(BufferData.CustomData.r);
}

#line 1220 "/Engine/Private/DeferredShadingCommon.ush"
float3 AOMultiBounce(float3 BaseColor, float AO)
{
	float3 a = 2.0404 * BaseColor - 0.3324;
	float3 b = -4.7951 * BaseColor + 0.6417;
	float3 c = 2.7552 * BaseColor + 0.6903;
	return max(AO, ((AO * a + b) * AO + c) * AO);
}

#line 227 "/Engine/Private/ColorSpace.ush"
float3 HUE_2_LinearRGB(in float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

#line 235 "/Engine/Private/ColorSpace.ush"
float3 HSV_2_LinearRGB(in float3 HSV)
{
	float3 RGB = HUE_2_LinearRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

#line 241 "/Engine/Private/ColorSpace.ush"
float3 RGB_2_HCV(in float3 RGB)
{

	float4 P = (RGB.g < RGB.b)	? float4(RGB.bg, -1.0f, 2.0f / 3.0f): float4(RGB.gb, 0.0f, -1.0f / 3.0f);
	float4 Q = (RGB.r < P.x)	? float4(P.xyw, RGB.r)				: float4(RGB.r, P.yzx);
	float Chroma = Q.x - min(Q.w, Q.y);
	float Hue = abs((Q.w - Q.y) / (6.0f * Chroma + 1e-10f) + Q.z);
	return float3(Hue, Chroma, Q.x);
}

#line 251 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_HSV(in float3 RGB)
{
	float3 HCV = RGB_2_HCV(RGB);
	float s = HCV.y / (HCV.z + 1e-10f);
	return float3(HCV.x, s, HCV.z);
}

#line 206 "/Engine/Generated/Material.ush"
struct FSubstrateData
{
	uint Dummy;
};

#line 210 "/Engine/Generated/Material.ush"
FSubstrateData GetInitialisedSubstrateData() { return (FSubstrateData)0; }

#line 53 "/Engine/Private/DBufferDecalShared.ush"
uint GetDBufferTargetMask(uint2 PixelPos)
{

	{






		return 0x07;

	}





}

#line 363 "/Engine/Private/DBufferDecalShared.ush"
struct FDBufferData
{

	float3 PreMulColor;

	float ColorOpacity;


	float3 PreMulWorldNormal;

	float NormalOpacity;


	float PreMulRoughness;

	float PreMulMetallic;

	float PreMulSpecular;

	float RoughnessOpacity;
};

#line 403 "/Engine/Private/DBufferDecalShared.ush"
FDBufferData DecodeDBufferData(
	float4 DBufferA,
	float4 DBufferB,
	float4 DBufferC)
{
	FDBufferData ret;


	ret.PreMulColor = DBufferA.rgb;
	ret.ColorOpacity = DBufferA.a;


	ret.PreMulWorldNormal = DBufferB.rgb * 2 - (256.0 / 255.0);
	ret.NormalOpacity = DBufferB.a;


	ret.PreMulMetallic = DBufferC.r;
	ret.PreMulSpecular = DBufferC.g;
	ret.PreMulRoughness = DBufferC.b;
	ret.RoughnessOpacity = DBufferC.a;

	return ret;
}

#line 428 "/Engine/Private/DBufferDecalShared.ush"
FDBufferData GetDBufferData(float2 BufferUV, uint RTMaskBit, uint EyeIndex)
{

	float4 DBufferA = float4(0.0, 0.0, 0.0, 1.0);
	float4 DBufferB = float4(128.0f / 255.0f, 128.f / 255.5f, 128.f / 255.5f, 1.0);
	float4 DBufferC = float4(0.0, 0.0, 0.0, 1.0);


	[branch]
	if (RTMaskBit & 0x1)
	{



		DBufferA = Texture2DSampleLevel(OpaqueBasePass_DBufferATexture, OpaqueBasePass_DBufferATextureSampler, BufferUV, 0);

	}

	[branch]
	if (RTMaskBit & 0x2)
	{



		DBufferB = Texture2DSampleLevel(OpaqueBasePass_DBufferBTexture, OpaqueBasePass_DBufferATextureSampler, BufferUV, 0);

	}

	[branch]
	if (RTMaskBit & 0x4)
	{



		DBufferC = Texture2DSampleLevel(OpaqueBasePass_DBufferCTexture, OpaqueBasePass_DBufferATextureSampler, BufferUV, 0);

	}
#line 484 "/Engine/Private/DBufferDecalShared.ush"


	return DecodeDBufferData(DBufferA, DBufferB, DBufferC);
}

#line 489 "/Engine/Private/DBufferDecalShared.ush"
FDBufferData GetDBufferData(float2 BufferUV, uint RTMaskBit)
{
	return GetDBufferData(BufferUV, RTMaskBit, 0);
}

#line 495 "/Engine/Private/DBufferDecalShared.ush"
void ApplyDBufferData(
	FDBufferData DBufferData, inout float3 WorldNormal, inout float3 SubsurfaceColor, inout float Roughness, 
	inout float3 BaseColor, inout float Metallic, inout float Specular )
{

	BaseColor = BaseColor * DBufferData.ColorOpacity + DBufferData.PreMulColor;
	SubsurfaceColor *= DBufferData.ColorOpacity;




	WorldNormal = normalize(WorldNormal * DBufferData.NormalOpacity + DBufferData.PreMulWorldNormal);



	Roughness = Roughness * DBufferData.RoughnessOpacity + DBufferData.PreMulRoughness;
	Metallic = Metallic * DBufferData.RoughnessOpacity + DBufferData.PreMulMetallic;
	Specular = Specular * DBufferData.RoughnessOpacity + DBufferData.PreMulSpecular;

}

#line 223 "/Engine/Generated/Material.ush"
struct FMaterialParticleParameters
{

	float RelativeTime;

	float MotionBlurFade;

	float Random;

	float4 Velocity;

	float4 Color;

	float4 TranslatedWorldPositionAndSize;

	float4 PrevTranslatedWorldPositionAndSize;

	FLWCVector3 WorldPosition;

	FLWCVector3 PrevWorldPosition;

	float4 MacroUV;





	float4 DynamicParameter;














	FDFMatrix ParticleToWorld;


	FDFInverseMatrix WorldToParticle;









	float2 Size;


	float SpriteRotation;
};

#line 338 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")

#line 342 "/Engine/Generated/Material.ush"
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float CustomData0;
	float CustomData1;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FSubstrateData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
	float ThinTranslucentSurfaceCoverage;
	float FirstPersonInterpolationAlpha;
	float4 MaterialCache;
};

#line 422 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic pop")

#line 427 "/Engine/Generated/Material.ush"
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float CustomData0;
	float CustomData1;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FSubstrateData FrontMaterial;
	float SurfaceThickness;
	float Displacement;












};

#line 466 "/Engine/Generated/Material.ush"
struct FMaterialLWCData
{

	FLWCVector3 AbsoluteWorldPosition;
	FLWCVector3 WorldPosition_NoOffsets;


	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;

	FLWCMatrix	InstanceToWorld;
	FLWCInverseMatrix WorldToInstance;
	FLWCMatrix	PreviousInstanceToWorld;

	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;

	FLWCMatrix ParticleToWorld;
	FLWCInverseMatrix WorldToParticle;
	FLWCVector3 ParticleWorldPosition;
	FLWCVector3 PrevParticleWorldPosition;


	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
};

#line 503 "/Engine/Generated/Material.ush"
struct FMaterialPixelParameters
{

	float2 TexCoords[1];



	float4 VertexColor;


	float3 WorldNormal;


	float3 WorldTangent;


	float3 ReflectionVector;


	float3 CameraVector;


	float3 LightVector;






	float4 SvPosition;


	float4 ScreenPosition;





	float2 ViewBufferUV;





	float UnMirrored;

	float TwoSidedSign;





	float3x3 TangentToWorld;










	FDFVector3 AbsoluteWorldPosition;




	float3 WorldPosition_CamRelative;





	FDFVector3 WorldPosition_NoOffsets;





	float3 WorldPosition_NoOffsets_CamRelative;


	float3 LightingPositionOffset;


	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float3 WorldGeoNormal_DDX;
	float3 WorldGeoNormal_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;


	float2 TexCoords_DDX[1];
	float2 TexCoords_DDY[1];


	float AOMaterialMask;







	float PerInstanceRandom;






	uint PrimitiveId;

































	FMaterialParticleParameters Particle;














	uint Dummy;











	float4 FontSignedDistanceData;













#line 719 "/Engine/Generated/Material.ush"


	FMaterialAttributes MaterialAttributes;

	FMaterialLWCData LWCData;
};

#line 738 "/Engine/Generated/Material.ush"
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}

#line 750 "/Engine/Generated/Material.ush"
struct FMaterialVertexParameters
{



	float3 WorldPosition;


	float3 PositionPrimitiveSpace;

	float3 PositionInstanceSpace;


	float3x3 TangentToWorld;






	float PerInstanceRandom;















	FDFMatrix PrevFrameLocalToWorld;

	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;

	float4 VertexColor;

	float2 TexCoords[1];











	FMaterialParticleParameters Particle;





	FMaterialAttributes MaterialAttributes;


	FSceneDataIntermediates SceneData;



	uint PrimitiveId;

	bool bEvaluateWorldPositionOffset;

	FMaterialLWCData LWCData;
};

#line 854 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{

	return Parameters.SceneData.Primitive;



}

#line 863 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{

	return GetPrimitiveData(Parameters.PrimitiveId);



}

#line 928 "/Engine/Generated/Material.ush"
FDFInverseMatrix GetWorldToInstanceDF(FMaterialVertexParameters Parameters)
{



		return GetPrimitiveData(Parameters).WorldToLocal;

}

#line 938 "/Engine/Generated/Material.ush"
FDFInverseMatrix GetWorldToInstanceDF(FMaterialPixelParameters Parameters)
{



		return GetPrimitiveData(Parameters).WorldToLocal;

}

#line 948 "/Engine/Generated/Material.ush"
FDFMatrix GetInstanceToWorldDF(FMaterialVertexParameters Parameters)
{



		return GetPrimitiveData(Parameters).LocalToWorld;

}

#line 958 "/Engine/Generated/Material.ush"
FDFMatrix GetPrevInstanceToWorldDF(FMaterialVertexParameters Parameters)
{



	return GetPrimitiveData(Parameters).PreviousLocalToWorld;

}

#line 969 "/Engine/Generated/Material.ush"
FDFMatrix GetInstanceToWorldDF(FMaterialPixelParameters Parameters)
{



		return GetPrimitiveData(Parameters).LocalToWorld;

}

#line 979 "/Engine/Generated/Material.ush"
FDFMatrix GetPrevInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}

#line 1063 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}

#line 1073 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}

#line 1675 "/Engine/Generated/Material.ush"
FDFMatrix GetLocalToWorldDF(FMaterialVertexParameters Parameters)
{





	return GetPrimitiveData(Parameters).LocalToWorld;

}

#line 1691 "/Engine/Generated/Material.ush"
FDFMatrix GetLocalToWorldDF(FMaterialPixelParameters Parameters)
{



	return GetPrimitiveData(Parameters).LocalToWorld;

}

#line 1705 "/Engine/Generated/Material.ush"
FDFMatrix GetPrevLocalToWorldDF(FMaterialVertexParameters Parameters)
{



	return GetPrimitiveData(Parameters).PreviousLocalToWorld;

}

#line 1719 "/Engine/Generated/Material.ush"
FDFMatrix GetPrevLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}

#line 1730 "/Engine/Generated/Material.ush"
FDFInverseMatrix GetWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}

#line 1740 "/Engine/Generated/Material.ush"
FDFInverseMatrix GetWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}

#line 1750 "/Engine/Generated/Material.ush"
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}

#line 1760 "/Engine/Generated/Material.ush"
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}

#line 1891 "/Engine/Generated/Material.ush"
FMaterialLWCData MakeMaterialLWCData(FMaterialVertexParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;


	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;









	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition, Result.PreViewTranslation);

	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));

	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFToWS(GetPrevWorldToLocalDF(Parameters));




















	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;





	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;






	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);

	return Result;
}

#line 1962 "/Engine/Generated/Material.ush"
FMaterialLWCData MakeMaterialLWCData(FMaterialPixelParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;


	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;









	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition_CamRelative, Result.PreViewTranslation);
	Result.WorldPosition_NoOffsets = LWCSubtract(Parameters.WorldPosition_NoOffsets_CamRelative, Result.PreViewTranslation);

	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));

	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));














	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;







	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);

	return Result;
}

#line 2691 "/Engine/Generated/Material.ush"
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}

#line 3607 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")

#line 3642 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic pop")

#line 3712 "/Engine/Generated/Material.ush"
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

#line 3717 "/Engine/Generated/Material.ush"
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;





		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

#line 3749 "/Engine/Generated/Material.ush"
float3 GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

#line 3754 "/Engine/Generated/Material.ush"
float3 GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

#line 3772 "/Engine/Generated/Material.ush"
uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

#line 3777 "/Engine/Generated/Material.ush"
float3 GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

#line 3782 "/Engine/Generated/Material.ush"
float3 GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

#line 3787 "/Engine/Generated/Material.ush"
float GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

#line 3792 "/Engine/Generated/Material.ush"
float GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

#line 3797 "/Engine/Generated/Material.ush"
float GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

#line 3802 "/Engine/Generated/Material.ush"
float GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

#line 3807 "/Engine/Generated/Material.ush"
float GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

#line 3812 "/Engine/Generated/Material.ush"
float GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{



	float Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;
}

#line 3829 "/Engine/Generated/Material.ush"
float GetMaterialAnisotropyRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Anisotropy;
}

#line 3834 "/Engine/Generated/Material.ush"
float GetMaterialAnisotropy(FPixelMaterialInputs PixelMaterialInputs)
{
	return clamp(GetMaterialAnisotropyRaw(PixelMaterialInputs), -1.0f, 1.0f);
}

#line 3839 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")

#line 3879 "/Engine/Generated/Material.ush"
float GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}

#line 3884 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic pop")

#line 3898 "/Engine/Generated/Material.ush"
float GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}

#line 3920 "/Engine/Generated/Material.ush"
float GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}

#line 4094 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")

#line 4107 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic pop")

#line 4109 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	float AmbientOcclusion = PixelMaterialInputs.AmbientOcclusion;


	{

		AmbientOcclusion = AmbientOcclusion * ResolvedView.AmbientOcclusionOverrideParameter.y + ResolvedView.AmbientOcclusionOverrideParameter.x;
	}


	return AmbientOcclusion;
}

#line 4123 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

#line 4171 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")

#line 4184 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic pop")

#line 4210 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld(float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}

#line 4276 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")

#line 4282 "/Engine/Generated/Material.ush"
_Pragma("dxc diagnostic pop")

#line 4290 "/Engine/Generated/Material.ush"
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")



	PixelMaterialInputs.Normal = float3(0.00000000f,0.00000000f,1.00000000f);

_Pragma("dxc diagnostic pop")












	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);





	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);









	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;


_Pragma("dxc diagnostic push")
_Pragma("dxc diagnostic ignored \"-Wall\"") 					_Pragma("dxc diagnostic ignored \"-Wconversion\"") 				_Pragma("dxc diagnostic ignored \"-Wfor-redefinition\"") 		_Pragma("dxc diagnostic ignored \"-Winline-asm\"")				_Pragma("dxc diagnostic ignored \"-Wunsequenced\"")

	float3 Local0 = lerp(float3(0.00000000f,0.00000000f,0.00000000f),Material_PreshaderBuffer[0].yzw,Material_PreshaderBuffer[0].x);
	float2 Local1 = Parameters.TexCoords[0].xy;
	float2 Local2 = (  Local1  / ((float2)100.00000000f));
	float Local3 = MaterialExpressionNoise(  Local2 ,1.00000000f,1.00000000f,5.00000000f,1.00000000f,6.00000000f,-1.00000000f,1.00000000f,2.00000000f,0.00000000f,0.00000000f,512.00000000f);

	PixelMaterialInputs.EmissiveColor = Local0;
	PixelMaterialInputs.Opacity = 1.00000000f;
	PixelMaterialInputs.OpacityMask = 1.00000000f;
	PixelMaterialInputs.BaseColor = Local3;
	PixelMaterialInputs.Metallic = 0.00000000f;
	PixelMaterialInputs.Specular = 0.50000000f;
	PixelMaterialInputs.Roughness = 0.50000000f;
	PixelMaterialInputs.Anisotropy = 0.00000000f;
	PixelMaterialInputs.Normal = float3(0.00000000f,0.00000000f,1.00000000f);
	PixelMaterialInputs.Tangent = float3(1.00000000f,0.00000000f,0.00000000f);
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.CustomData0 = 1.00000000f;
	PixelMaterialInputs.CustomData1 = 0.10000000f;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000f;
	PixelMaterialInputs.Refraction = 0;
	PixelMaterialInputs.PixelDepthOffset = 0.00000000f;
	PixelMaterialInputs.ShadingModel = 1;
	PixelMaterialInputs.FrontMaterial = GetInitialisedSubstrateData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000f;
	PixelMaterialInputs.Displacement = -1.00000000f;

_Pragma("dxc diagnostic pop")




	Parameters.WorldTangent = 0;

}
void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));




		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

#line 3718 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}

#line 3747 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}

#line 3750 "/Engine/Generated/Material.ush"
void ClipLODTransition(float2 SvPosition)
{
}

#line 3781 "/Engine/Generated/Material.ush"
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);

#line 3817 "/Engine/Generated/Material.ush"

}

#line 3896 "/Engine/Generated/Material.ush"
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition;
	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;

	Parameters.LWCData = MakeMaterialLWCData(Parameters);


	Parameters.AbsoluteWorldPosition = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.AbsoluteWorldPosition.Tile, 2097152.00f, Parameters.LWCData.AbsoluteWorldPosition.Offset);








	Parameters.WorldPosition_NoOffsets = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.WorldPosition_NoOffsets.Tile, 2097152.00f, Parameters.LWCData.WorldPosition_NoOffsets.Offset);





	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);





		Parameters.CameraVector =  select_internal( IsOrthoProjection(ResolvedView) , -ResolvedView.ViewForward , normalize(-Parameters.WorldPosition_CamRelative.xyz) );


	Parameters.LightVector = 0;







	Parameters.TwoSidedSign = 1.0f;



























	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}

#line 4011 "/Engine/Generated/Material.ush"
float3x3 AssembleTangentToWorld( float3 TangentToWorld0, float4 TangentToWorld2 )
{





	float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}

#line 4142 "/Engine/Generated/Material.ush"
float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{







	return MaterialParameters.WorldNormal;

}

#line 72 "/Engine/Private/BasePassCommon.ush"
struct FSharedBasePassInterpolants
{



	float4 VertexFog		: TEXCOORD7;







	float3 PixelPositionExcludingWPO : TEXCOORD9;


























};

#line 129 "/Engine/Private/BasePassCommon.ush"
struct FShadingOcclusion
{
	float  DiffOcclusion;
	float  SpecOcclusion;
	float3 BentNormal;
};

#line 226 "/Engine/Private/BasePassCommon.ush"
FShadingOcclusion ApplyBentNormal(
	in float3 CameraVector, 
	in float3 WorldNormal, 
	in float3 WorldBentNormal0, 
	in float Roughness,
	in float MaterialAO)
{
	FShadingOcclusion Out;
	Out.DiffOcclusion = MaterialAO;
	Out.SpecOcclusion = MaterialAO;
	Out.BentNormal    = WorldNormal;

#line 261 "/Engine/Private/BasePassCommon.ush"

	return Out;
}

#line 9 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4	TangentToWorld2	: TEXCOORD11_centroid;











	float4	TexCoords[(1+1)/2]	: TEXCOORD0;









	nointerpolation uint PrimitiveId : PRIMITIVE_ID;






























};

#line 67 "/Engine/Private/LocalVertexFactoryCommon.ush"
float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

#line 87 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

#line 133 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

#line 138 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

#line 152 "/Engine/Private/LocalVertexFactoryCommon.ush"
uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;



}

#line 290 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediatesCommon
{

	FSceneDataIntermediates SceneData;






};

#line 305 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	FVertexFactoryIntermediatesCommon Common;

	int PrimitiveLocalInstanceIndex;


	float3x3 TangentToLocal;
	float3x3 TangentToWorld;
	float TangentToWorldSign;

	float4 Color;

	bool bEvaluateWorldPositionOffset;






	float IsVisible;







	float3 PreSkinPosition;
};

#line 336 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediatesCommon Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

#line 341 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return GetPrimitiveData(Intermediates.Common);
}

#line 519 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex < 1; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}








	float3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);


	Result.Particle.Color = float4(1,1,1,1);








	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );















	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);





























	return Result;
}

#line 25 "/Engine/Private/VolumetricLightmapShared.ush"
float3 ComputeVolumetricLightmapBrickTextureUVs(float3 WorldPosition) 
{

	float3 IndirectionVolumeUVs = clamp(WorldPosition * View_VolumetricLightmapWorldToUVScale + View_VolumetricLightmapWorldToUVAdd, 0.0f, .99f);
	float3 IndirectionTextureTexelCoordinate = IndirectionVolumeUVs * View_VolumetricLightmapIndirectionTextureSize;
	float4 BrickOffsetAndSize = View_VolumetricLightmapIndirectionTexture.Load(int4(IndirectionTextureTexelCoordinate, 0));

	float PaddedBrickSize = View_VolumetricLightmapBrickSize + 1;
	return (BrickOffsetAndSize.xyz * PaddedBrickSize + frac(IndirectionTextureTexelCoordinate / BrickOffsetAndSize.w) * View_VolumetricLightmapBrickSize + .5f) * View_VolumetricLightmapBrickTexelSize;
}

#line 134 "/Engine/Private/VolumetricLightmapShared.ush"
float GetVolumetricLightmapDirectionalLightShadowing(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_DirectionalLightShadowingBrickTexture, View_SharedBilinearClampedSampler, BrickTextureUVs, 0).x;
}

#line 230 "/Engine/Private/LightmapCommon.ush"
float4 GetPrecomputedShadowMasks(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters, float3 VolumetricLightmapBrickTextureUVs)
{

#line 261 "/Engine/Private/LightmapCommon.ush"


		float DirectionalLightShadowing = 1.0f;








		[branch]
		if ((GetPrimitiveData(MaterialParameters).Flags & 0x4) != 0)
		{


				VolumetricLightmapBrickTextureUVs = ComputeVolumetricLightmapBrickTextureUVs(LWCToFloat(GetWorldPosition(MaterialParameters)));


			DirectionalLightShadowing = GetVolumetricLightmapDirectionalLightShadowing(VolumetricLightmapBrickTextureUVs);
		}


		return float4(DirectionalLightShadowing, 1, 1, 1);






}

#line 9 "/Engine/Private/BRDF.ush"
struct BxDFContext
{
	float NoV;
	float NoL;
	float VoL;
	float NoH;
	float VoH;
	float XoV;
	float XoL;
	float XoH;
	float YoV;
	float YoL;
	float YoH;
};

#line 24 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );



	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}

#line 43 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 X, float3 Y, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );



	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}

#line 83 "/Engine/Private/BRDF.ush"
void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );

		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );





			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );

			if (bNewtonIteration)
			{

				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );

				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;

				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1   + VoTr;

				float p = NoBr   * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr   * NoLVTr;

				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}

			Context.NoL = Context.NoL * CosAlpha + NoTr; 





			Context.VoL = Context.VoL * CosAlpha + VoTr;








			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );





			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}

#line 177 "/Engine/Private/BRDF.ush"
float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}

#line 183 "/Engine/Private/BRDF.ush"
float3 Diffuse_Burley( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float FD90 = 0.5 + 2 * VoH * VoH * Roughness;
	float FdV = 1 + (FD90 - 1) * Pow5( 1 - NoV );
	float FdL = 1 + (FD90 - 1) * Pow5( 1 - NoL );
	return DiffuseColor * ( (1 / PI) * FdV * FdL );
}

#line 284 "/Engine/Private/BRDF.ush"
float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;	
	return a2 / ( PI*d*d );					
}

#line 292 "/Engine/Private/BRDF.ush"
float D_GGXaniso( float ax, float ay, float NoH, float XoH, float YoH )
{


	float a2 = ax * ay;
	float3 V = float3(ay * XoH, ax * YoH, a2 * NoH);
	float S = dot(V, V);

	return (1.0f / PI) * a2 * Square(a2 / S);




}

#line 346 "/Engine/Private/BRDF.ush"
float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}

#line 363 "/Engine/Private/BRDF.ush"
float Vis_SmithJointAniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	float Vis_SmithV = NoL * length(float3(ax * XoV, ay * YoV, NoV));
	float Vis_SmithL = NoV * length(float3(ax * XoL, ay * YoL, NoL));
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}

#line 376 "/Engine/Private/BRDF.ush"
float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );					



	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}

#line 385 "/Engine/Private/BRDF.ush"
float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}

#line 524 "/Engine/Private/BRDF.ush"
void GetAnisotropicRoughness(float Alpha, float Anisotropy, out float ax, out float ay)
{



	ax = max(Alpha * (1.0 + Anisotropy), 0.001f);
	ay = max(Alpha * (1.0 - Anisotropy), 0.001f);





}

#line 539 "/Engine/Private/BRDF.ush"
float2 GetAnisotropicRoughness(float Roughness, float Anisotropy)
{


	float2 Out = saturate(Roughness);
	Anisotropy = clamp(Anisotropy, -1.0, 1.0);
	Out.x = max(Roughness * sqrt(1.0 + Anisotropy), 0.001f);
	Out.y = max(Roughness * sqrt(1.0 - Anisotropy), 0.001f);
	return Out;
}

#line 583 "/Engine/Private/BRDF.ush"
float2 EnvBRDFApproxLazarov(float Roughness, float NoV)
{


	const float4 c0 = { -1, -0.0275, -0.572, 0.022 };
	const float4 c1 = { 1, 0.0425, 1.04, -0.04 };
	float4 r = Roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;
	float2 AB = float2(-1.04, 1.04) * a004 + r.zw;
	return AB;
}

#line 595 "/Engine/Private/BRDF.ush"
float3 EnvBRDFApprox( float3 SpecularColor, float Roughness, float NoV )
{
	float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);



	float F90 = saturate( 50.0 * SpecularColor.g );

	return SpecularColor * AB.x + F90 * AB.y;
}

#line 606 "/Engine/Private/BRDF.ush"
float3 EnvBRDFApprox(float3 F0, float3 F90, float Roughness, float NoV)
{
	float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);
	return F0 * AB.x + F90 * AB.y;
}

#line 621 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 SpecularColor)
{

	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;

}

#line 628 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}

#line 633 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 F0, inout float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}

#line 658 "/Engine/Private/BRDF.ush"
float D_InvGGX( float a2, float NoH )
{
	float A = 4;
	float d = ( NoH - a2 * NoH ) * NoH + a2;
	return rcp( PI * (1 + A*a2) ) * ( 1 + 4 * a2*a2 / ( d*d ) );
}

#line 665 "/Engine/Private/BRDF.ush"
float Vis_Cloth( float NoV, float NoL )
{
	return rcp( 4 * ( NoL + NoV - NoL * NoV ) );
}

#line 706 "/Engine/Private/BRDF.ush"
float3 SimpleClearCoatTransmittance(float NoL, float NoV, float Metallic, float3 BaseColor)
{
	float3 Transmittance = 1.0;

	float ClearCoatCoverage = Metallic;
	if (ClearCoatCoverage > 0.0)
	{
		float LayerThickness = 1.0;	



		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));


		float3 TransmittanceColor = Diffuse_Lambert(BaseColor);


		float3 ExtinctionCoefficient = -log(max(TransmittanceColor,0.0001)) / (2.0 * LayerThickness);



		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);


		Transmittance = exp(-OpticalDepth);

		Transmittance = lerp(1.0, Transmittance, ClearCoatCoverage);
	}






	return Transmittance;
}

#line 22 "/Engine/Private/CapsuleLight.ush"
struct FCapsuleLight
{
	float3	LightPos[2];
	float	Length;
	float	Radius;
	float	SoftRadius;
	float	DistBiasSqr;
};

#line 48 "/Engine/Private/CapsuleLight.ush"
float3 ClosestPointLineToRay( float3 Line0, float3 Line1, float Length, float3 R )
{
	float3 L0 = Line0;
	float3 L1 = Line1;
	float3 Line01 = Line1 - Line0;


	float A = Square( Length );
	float B = dot( R, Line01 );
	float t = saturate( dot( Line0, B*R - Line01 ) / (A - B*B) );

	return Line0 + t * Line01;
}

#line 78 "/Engine/Private/CapsuleLight.ush"
float3 LineIrradiance( float3 N, float3 Line0, float3 Line1, float DistanceBiasSqr, out float CosSubtended, out float BaseIrradiance, out float NoL )
{
	float LengthSqr0 = dot( Line0, Line0 );
	float LengthSqr1 = dot( Line1, Line1 );
	float InvLength0 = rsqrt( LengthSqr0 );
	float InvLength1 = rsqrt( LengthSqr1 );
	float InvLength01 = InvLength0 * InvLength1;

	CosSubtended = dot( Line0, Line1 ) * InvLength01;
	BaseIrradiance = InvLength01 / ( CosSubtended * 0.5 + 0.5 + DistanceBiasSqr * InvLength01 );
	NoL = 0.5 * ( dot(N, Line0) * InvLength0 + dot(N, Line1) * InvLength1 );

	float3 VectorIrradiance = ( BaseIrradiance * 0.5 ) * ( Line0 * InvLength0 + Line1 * InvLength1 );
	return VectorIrradiance;
}

#line 95 "/Engine/Private/CapsuleLight.ush"
float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{

	float SinAlpha = sqrt( SinAlphaSqr );

	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
#line 115 "/Engine/Private/CapsuleLight.ush"





		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );

	}




	return NoL;
}

#line 19 "/Engine/Private/LightData.ush"
struct FRectTexture
{
	float2 AtlasUVOffset;
	float2 AtlasUVScale;
	float  AtlasMaxLevel;
};

#line 26 "/Engine/Private/LightData.ush"
FRectTexture InitRectTexture()
{
	FRectTexture Out;
	Out.AtlasUVOffset = 0;
	Out.AtlasUVScale  = 0;
	Out.AtlasMaxLevel = 32;
	return Out;
}

#line 35 "/Engine/Private/LightData.ush"
struct FRectLightData
{
	float		 BarnCosAngle;
	float		 BarnLength;
	FRectTexture AtlasData;
};

#line 42 "/Engine/Private/LightData.ush"
FRectLightData UnpackRectLightData(uint In0, uint In1, uint In2)
{
	FRectLightData Out;
	Out.AtlasData.AtlasUVOffset	= float2(f16tof32(In0 & 0xFFFF), f16tof32(In0 >> 16));
	Out.AtlasData.AtlasUVScale	= float2(f16tof32(In1 & 0xFFFF), f16tof32(In1 >> 16));
	Out.BarnLength				= f16tof32(In2 & 0xFFFF);			
	Out.BarnCosAngle			= UnpackUnorm10(In2 >> 16);			
	Out.AtlasData.AtlasMaxLevel = float(In2 >> 26);					
	return Out;
}

#line 56 "/Engine/Private/LightData.ush"
struct FDirectionalLightData
{
	uint   HasDirectionalLight;
	uint   DirectionalLightSceneInfoExtraDataPacked;
	float2 DirectionalLightDistanceFadeMAD;
	float3 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float  DirectionalLightSourceRadius;
	float  DirectionalLightSoftSourceRadius;
	float  DirectionalLightSpecularScale;
	float  DirectionalLightDiffuseScale;
	uint  LightFunctionAtlasLightIndex;
	uint  bAffectsTranslucentLighting;
};

#line 73 "/Engine/Private/LightData.ush"
struct FForwardLightData
{

	float4 LightPositionAndInvRadius;
	float4 LightColorAndIdAndFalloffExponent;
	float4 SpotAnglesAndSourceRadiusPacked;
	float4 LightDirectionAndSceneInfoExtraDataPacked;
	float4 LightTangentAndIESDataAndSpecularScale;
	float3 RectData;



	int  VirtualShadowMapId;

	int  PrevLocalLightIndex;

	int LightSceneId;
};

#line 95 "/Engine/Private/LightData.ush"
struct FLocalLightData
{
	FForwardLightData Internal;

	uint Unused; 

};

#line 121 "/Engine/Private/LightData.ush"
struct FLightShaderParameters
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float2 SpotAngles;
	float  SpecularScale;
	float  DiffuseScale;
	float  SourceRadius;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float  RectLightAtlasMaxLevel;
	float  IESAtlasIndex;
	uint  LightFunctionAtlasLightIndex;
	uint  bAffectsTranslucentLighting;
};

#line 154 "/Engine/Private/LightData.ush"
struct FDeferredLightData
{
	float3 TranslatedWorldPosition;
	float   InvRadius;

	float3 Color;
	float   FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float  SoftSourceRadius;
	float2  SpotAngles;
	float  SourceRadius;
	float  SourceLength;
	float   SpecularScale;
	float   DiffuseScale;
	float  ContactShadowLength;

	float ContactShadowCastingIntensity;

	float ContactShadowNonCastingIntensity;
	float2 DistanceFadeMAD;
	float4  ShadowMapChannelMask;

	bool   ContactShadowLengthInWS;

	bool   bInverseSquared;

	bool   bRadialLight;

	bool   bSpotLight;
	bool   bRectLight;

	uint   ShadowedBits;

	FRectLightData RectLightData;

	float  IESAtlasIndex;

	uint  LightFunctionAtlasLightIndex;

	FHairTransmittanceData HairTransmittance;

	uint  bAffectsTranslucentLighting;
};

#line 242 "/Engine/Private/LightData.ush"
float3 UnpackLightColor(float2 In)
{
	float3 Dir = float3(
		((asuint(In.y) >> 0) & 0x3FF),
		((asuint(In.y) >> 10) & 0x3FF),
		((asuint(In.y) >> 20) & 0x3FF));
	return In.x * Dir;
}

#line 251 "/Engine/Private/LightData.ush"
float3 UnpackLightColor(FForwardLightData In)
{
	return UnpackLightColor(In.LightColorAndIdAndFalloffExponent.xy);
}

#line 256 "/Engine/Private/LightData.ush"
float3 UnpackLightColor(FLocalLightData In)
{
	return UnpackLightColor(In.Internal);
}

#line 271 "/Engine/Private/LightData.ush"
float4 UnpackShadowMapChannelMask(uint In)
{

	return float4((In & 0x1), (In & 0x2) >> 1, (In & 0x4) >> 2, (In & 0x8) >> 3);
}

#line 277 "/Engine/Private/LightData.ush"
uint UnpackLightingChannelMask(uint In)
{
	return (In >> 8) & 0x7;
}

#line 282 "/Engine/Private/LightData.ush"
uint UnpackLightingChannelMask(FForwardLightData In)
{
	const uint LightSceneInfoExtraDataPacked = asuint(In.LightDirectionAndSceneInfoExtraDataPacked.w);
	return UnpackLightingChannelMask(LightSceneInfoExtraDataPacked);
}

#line 288 "/Engine/Private/LightData.ush"
uint UnpackLightingChannelMask(FLocalLightData In)
{
	return UnpackLightingChannelMask(In.Internal);
}

#line 293 "/Engine/Private/LightData.ush"
uint UnpackLightType(uint InLightSceneInfoExtraDataPacked)
{
	return (InLightSceneInfoExtraDataPacked >> 16) & 0x3;
}

#line 341 "/Engine/Private/LightData.ush"
uint UnpackLightFunctionAtlasIndex(uint InLightSceneInfoExtraDataPacked)
{
	return ((InLightSceneInfoExtraDataPacked >> 20) & 0xFF);
}

#line 346 "/Engine/Private/LightData.ush"
uint UnpackLightFunctionAtlasIndex(FForwardLightData In)
{
	const uint LightSceneInfoExtraDataPacked = asuint(In.LightDirectionAndSceneInfoExtraDataPacked.w);
	return UnpackLightFunctionAtlasIndex(LightSceneInfoExtraDataPacked);
}

#line 352 "/Engine/Private/LightData.ush"
uint UnpackLightFunctionAtlasIndex(FLocalLightData In)
{
	return UnpackLightFunctionAtlasIndex(In.Internal);
}

#line 357 "/Engine/Private/LightData.ush"
uint UnpackAffectsTranslucentLighting(uint InLightSceneInfoExtraDataPacked)
{
	return ((InLightSceneInfoExtraDataPacked >> 28) & 0x1);
}

#line 362 "/Engine/Private/LightData.ush"
uint UnpackAffectsTranslucentLighting(FForwardLightData In)
{
	const uint LightSceneInfoExtraDataPacked = asuint(In.LightDirectionAndSceneInfoExtraDataPacked.w);
	return UnpackAffectsTranslucentLighting(LightSceneInfoExtraDataPacked);
}

#line 368 "/Engine/Private/LightData.ush"
uint UnpackAffectsTranslucentLighting(FLocalLightData In)
{
	return UnpackAffectsTranslucentLighting(In.Internal);
}

#line 415 "/Engine/Private/LightData.ush"
float UnpackLightSourceRadius(FForwardLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.z) & 0xFFFF);
}

#line 420 "/Engine/Private/LightData.ush"
float UnpackLightSourceRadius(FLocalLightData In)
{
	return UnpackLightSourceRadius(In.Internal);
}

#line 425 "/Engine/Private/LightData.ush"
float UnpackLightSoftSourceRadius(FForwardLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.z) >> 16);
}

#line 430 "/Engine/Private/LightData.ush"
float UnpackLightSoftSourceRadius(FLocalLightData In)
{
	return UnpackLightSoftSourceRadius(In.Internal);
}

#line 435 "/Engine/Private/LightData.ush"
float UnpackLightSourceLength(FForwardLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.w));
}

#line 440 "/Engine/Private/LightData.ush"
float UnpackLightSourceLength(FLocalLightData In)
{
	return UnpackLightSourceLength(In.Internal);
}

#line 455 "/Engine/Private/LightData.ush"
float2 GetLightSpotAngles(FForwardLightData In)
{
	return In.SpotAnglesAndSourceRadiusPacked.xy;
}

#line 460 "/Engine/Private/LightData.ush"
float2 GetLightSpotAngles(FLocalLightData In)
{
	return GetLightSpotAngles(In.Internal);
}

#line 465 "/Engine/Private/LightData.ush"
float UnpackLightSpecularScale(FForwardLightData In)
{
	return UnpackUnorm10(asuint(In.LightTangentAndIESDataAndSpecularScale.w));
}

#line 470 "/Engine/Private/LightData.ush"
float UnpackLightSpecularScale(FLocalLightData In)
{
	return UnpackLightSpecularScale(In.Internal);
}

#line 475 "/Engine/Private/LightData.ush"
float UnpackLightDiffuseScale(FForwardLightData In)
{
	return UnpackUnorm10(asuint(In.LightTangentAndIESDataAndSpecularScale.w)>>10);
}

#line 480 "/Engine/Private/LightData.ush"
float UnpackLightDiffuseScale(FLocalLightData In)
{
	return UnpackLightDiffuseScale(In.Internal);
}

#line 485 "/Engine/Private/LightData.ush"
float UnpackLigthIESAtlasIndex(FForwardLightData In)
{

	return int(asuint(In.LightTangentAndIESDataAndSpecularScale.w) >> 20) - 1;
}

#line 491 "/Engine/Private/LightData.ush"
float UnpackLigthIESAtlasIndex(FLocalLightData In)
{
	return UnpackLigthIESAtlasIndex(In.Internal);
}

#line 499 "/Engine/Private/LightData.ush"
FRectTexture ConvertToRectTexture(FDeferredLightData In)
{
	FRectTexture Output;
	Output.AtlasUVOffset = In.RectLightData.AtlasData.AtlasUVOffset;
	Output.AtlasUVScale  = In.RectLightData.AtlasData.AtlasUVScale;
	Output.AtlasMaxLevel = In.RectLightData.AtlasData.AtlasMaxLevel;
	return Output;
}

#line 509 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(
	const FForwardLightData In, 
	float InSpecularScale, 
	inout float4 OutPreviewShadowMapChannelMask,
	inout uint  OutLightingChannelMask)
{
	FDeferredLightData Out = (FDeferredLightData)0;

	const uint LightSceneInfoExtraDataPacked = asuint(In.LightDirectionAndSceneInfoExtraDataPacked.w);
	const uint LightType = UnpackLightType(LightSceneInfoExtraDataPacked);

	Out.TranslatedWorldPosition = In.LightPositionAndInvRadius.xyz;
	Out.InvRadius				= In.LightPositionAndInvRadius.w;
	Out.Color					= UnpackLightColor(In.LightColorAndIdAndFalloffExponent.xy);
	Out.FalloffExponent			= In.LightColorAndIdAndFalloffExponent.w;
	Out.Direction				= In.LightDirectionAndSceneInfoExtraDataPacked.xyz;
	Out.SpotAngles				= GetLightSpotAngles(In);
	Out.SourceRadius			= UnpackLightSourceRadius(In);
	Out.SourceLength			= UnpackLightSourceLength(In);
	Out.Tangent					= In.LightTangentAndIESDataAndSpecularScale.xyz;
	Out.SoftSourceRadius		= UnpackLightSoftSourceRadius(In);
	Out.bInverseSquared			= Out.FalloffExponent == 0 && (LightType != 0); 
	Out.SpecularScale			= UnpackLightSpecularScale(In) * InSpecularScale;
	Out.DiffuseScale			= UnpackLightDiffuseScale(In);
	Out.bRadialLight			= LightType != 0;
	Out.bSpotLight				= LightType == 2;
	Out.bRectLight				= LightType == 3;
	Out.HairTransmittance		= InitHairTransmittanceData();
	Out.RectLightData			= UnpackRectLightData(
									asuint(In.RectData.x),
									asuint(In.RectData.y),
									asuint(In.RectData.z));
	Out.IESAtlasIndex			= UnpackLigthIESAtlasIndex(In);
	Out.LightFunctionAtlasLightIndex = UnpackLightFunctionAtlasIndex(In);

	Out.bAffectsTranslucentLighting = UnpackAffectsTranslucentLighting(In);








	Out.ShadowedBits				= (LightSceneInfoExtraDataPacked & 0xFF) != 0 ? 1 : 0;
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(LightSceneInfoExtraDataPacked);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(LightSceneInfoExtraDataPacked >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(LightSceneInfoExtraDataPacked);
	return Out;
}

#line 560 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(
	const FLocalLightData In, 
	float InSpecularScale, 
	inout float4 OutPreviewShadowMapChannelMask,
	inout uint  OutLightingChannelMask)
{
	FDeferredLightData DeferredLightData = ConvertToDeferredLight(In.Internal, InSpecularScale, OutPreviewShadowMapChannelMask, OutLightingChannelMask);
	DeferredLightData.bRadialLight = true;
	DeferredLightData.bInverseSquared = DeferredLightData.FalloffExponent == 0;

	return DeferredLightData;
}

#line 573 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(const FForwardLightData In)
{
	float4 OutPreviewShadowMapChannelMask = 0;
	uint OutLightingChannelMask = 0x7;
	return ConvertToDeferredLight(In, 1.0f, OutPreviewShadowMapChannelMask, OutLightingChannelMask);
}

#line 580 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(const FLocalLightData In)
{
	float4 OutPreviewShadowMapChannelMask = 0;
	uint OutLightingChannelMask = 0x7;
	return ConvertToDeferredLight(In, 1.0f, OutPreviewShadowMapChannelMask, OutLightingChannelMask);
}

#line 677 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(
	FDirectionalLightData In, 
	float InSpecularScale, 
	inout float4 OutPreviewShadowMapChannelMask,
	inout uint OutLightingChannelMask)
{
	FDeferredLightData Out	= (FDeferredLightData)0;
	Out.Color				= In.DirectionalLightColor;
	Out.FalloffExponent		= 0;
	Out.Direction			= In.DirectionalLightDirection;
	Out.DistanceFadeMAD		= In.DirectionalLightDistanceFadeMAD;
	Out.bRadialLight		= false;
	Out.SpecularScale		= In.DirectionalLightSpecularScale * InSpecularScale;
	Out.DiffuseScale		= In.DirectionalLightDiffuseScale;
	Out.ShadowedBits		= (In.DirectionalLightSceneInfoExtraDataPacked & 0xFF) != 0 ? 1 : 0;
	Out.HairTransmittance	= InitHairTransmittanceData();
	Out.SourceRadius		= In.DirectionalLightSourceRadius;
	Out.SoftSourceRadius	= In.DirectionalLightSoftSourceRadius;
	Out.IESAtlasIndex		= -1;
	Out.LightFunctionAtlasLightIndex = In.LightFunctionAtlasLightIndex;
	Out.bAffectsTranslucentLighting = In.bAffectsTranslucentLighting;








	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(In.DirectionalLightSceneInfoExtraDataPacked);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(In.DirectionalLightSceneInfoExtraDataPacked >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(In.DirectionalLightSceneInfoExtraDataPacked);

	return Out;
}

#line 714 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(FLightSceneData In, FLightViewData InViewData)
{
	FDeferredLightData Out = (FDeferredLightData)0;

	const uint LightType = UnpackLightType(InViewData.LightSceneInfoExtraDataPacked);

	Out.TranslatedWorldPosition = InViewData.TranslatedWorldPosition;
	Out.InvRadius				= In.InvRadius;
	Out.Color					= InViewData.Color;
	Out.FalloffExponent			= In.FalloffExponent;
	Out.Direction				= In.Direction;
	Out.SpotAngles				= In.SpotAngles;
	Out.SourceRadius			= In.SourceRadius;
	Out.SourceLength			= In.SourceLength;
	Out.Tangent					= In.Tangent;
	Out.SoftSourceRadius		= In.SoftSourceRadius;
	Out.bInverseSquared			= In.FalloffExponent == 0 && (LightType != 0); 
	Out.SpecularScale			= In.SpecularScale;
	Out.DiffuseScale			= In.DiffuseScale;
	Out.bRadialLight			= LightType != 0;
	Out.bSpotLight				= LightType == 2;
	Out.bRectLight				= LightType == 3;
	Out.HairTransmittance		= InitHairTransmittanceData();

	Out.RectLightData.BarnCosAngle = In.RectLightBarnCosAngle;
	Out.RectLightData.BarnLength = In.RectLightBarnLength;
	Out.RectLightData.AtlasData.AtlasMaxLevel = InViewData.RectLightAtlasMaxLevel;
	Out.RectLightData.AtlasData.AtlasUVOffset = InViewData.RectLightAtlasUVOffset;
	Out.RectLightData.AtlasData.AtlasUVScale = InViewData.RectLightAtlasUVScale;

	Out.IESAtlasIndex					= InViewData.IESAtlasIndex;
	Out.LightFunctionAtlasLightIndex	= UnpackLightFunctionAtlasIndex(InViewData.LightSceneInfoExtraDataPacked);

	Out.bAffectsTranslucentLighting = UnpackAffectsTranslucentLighting(InViewData.LightSceneInfoExtraDataPacked);








	Out.ShadowedBits				= (InViewData.LightSceneInfoExtraDataPacked & 0xFF) != 0 ? 1 : 0;
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(InViewData.LightSceneInfoExtraDataPacked);
	return Out;
}

#line 22 "/Engine/Private/RectLight.ush"
struct FRect
{
	float3		Origin;
	float3x3	Axis;
	float2		Extent;
	float2		FullExtent;
	float2		Offset;
};

#line 31 "/Engine/Private/RectLight.ush"
float3 SampleRectTexture(FRectTexture RectTexture, float2 RectUV, float Level, bool bIsReference = false)
{

	const bool bIsValid = RectTexture.AtlasMaxLevel < 32;
	const float2 RectTextureSize = RectTexture.AtlasUVScale * View_RectLightAtlasSizeAndInvSize.xy;
	Level += log2(min(RectTextureSize.x, RectTextureSize.y)) - 2.f;
	Level  = min(Level, RectTexture.AtlasMaxLevel);

	RectUV = saturate(RectUV) * RectTexture.AtlasUVScale + RectTexture.AtlasUVOffset;



	const uint2 MippedResoluton = uint2(View_RectLightAtlasSizeAndInvSize.xy) >> uint(ceil(Level));
	const float2 UVBorder = 0.5f / float2(MippedResoluton);
	const float2 MinRectUV =  UVBorder + RectTexture.AtlasUVOffset;
	const float2 MaxRectUV = -UVBorder + RectTexture.AtlasUVOffset + RectTexture.AtlasUVScale;
	RectUV = clamp(RectUV, MinRectUV, MaxRectUV);

	return bIsValid ? View_RectLightAtlasTexture.SampleLevel(View_SharedTrilinearClampedSampler, RectUV, bIsReference ? 0 : Level).rgb : 1.f;



}

#line 56 "/Engine/Private/RectLight.ush"
float3 RectIrradianceLambert( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{







	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );		
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );		
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );		


	float x0 = LocalPosition.x - Rect.Extent.x;
	float x1 = LocalPosition.x + Rect.Extent.x;
	float y0 = LocalPosition.y - Rect.Extent.y;
	float y1 = LocalPosition.y + Rect.Extent.y;
	float z0 = LocalPosition.z;
	float z0Sqr = z0 * z0;


	float3 v0 = float3( x0, y0, z0 );
	float3 v1 = float3( x1, y0, z0 );
	float3 v2 = float3( x1, y1, z0 );
	float3 v3 = float3( x0, y1, z0 );

	float3 L0 = v0 * rsqrt( dot( v0.xy, v0.xy ) + z0Sqr );	
	float3 L1 = v1 * rsqrt( dot( v1.xy, v1.xy ) + z0Sqr );	
	float3 L2 = v2 * rsqrt( dot( v2.xy, v2.xy ) + z0Sqr );	
	float3 L3 = v3 * rsqrt( dot( v3.xy, v3.xy ) + z0Sqr );	












	float c01 = dot( L0, L1 );
	float c12 = dot( L1, L2 );
	float c23 = dot( L2, L3 );
	float c30 = dot( L3, L0 );
















	float w01 = ( 1.5708 - 0.175 * c01 ) * rsqrt( max(c01 + 1, 1.0e-4f) );	
	float w12 = ( 1.5708 - 0.175 * c12 ) * rsqrt( max(c12 + 1, 1.0e-4f) );	
	float w23 = ( 1.5708 - 0.175 * c23 ) * rsqrt( max(c23 + 1, 1.0e-4f) );	
	float w30 = ( 1.5708 - 0.175 * c30 ) * rsqrt( max(c30 + 1, 1.0e-4f) );	










	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	




	L = L.x * Rect.Axis[0] + L.y * Rect.Axis[1] + L.z * Rect.Axis[2];	

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;


	L *= InvLength;

	BaseIrradiance = 0.5 * Length;




	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);

	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );

	return L;
}

#line 295 "/Engine/Private/RectLight.ush"
float3 SampleSourceTexture( float3 L, FRect Rect, FRectTexture RectTexture)
{


	L += Rect.Axis[2] * saturate( 0.001 - dot( Rect.Axis[2], L ) );


	float DistToPlane = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * DistToPlane;

	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );


    float2 RectUV = (PointInRect + Rect.Offset) / max(0.0001f, Rect.FullExtent) * float2(0.5, -0.5) + 0.5;

	float Level = log2( DistToPlane * rsqrt( max(0.0001f, Rect.FullExtent.x * Rect.FullExtent.y) ) );

    return SampleRectTexture(RectTexture, RectUV, Level);



}

#line 320 "/Engine/Private/RectLight.ush"
float IntegrateEdge( float3 L0, float3 L1 )
{
	float c01 = dot( L0, L1 );












	float w01 = ( 0.8543985 + (0.4965155 + 0.0145206 * abs(c01)) * abs(c01) ) /
				( 3.4175940 + (4.1616724 + abs(c01)) * abs(c01) );

	w01 = c01 > 0 ? w01 : 0.5 * rsqrt( max(1 - c01 * c01, 1.0e-4f)  ) - w01;


	return w01;
}

#line 345 "/Engine/Private/RectLight.ush"
float3 PolygonIrradiance( float3 Poly[4] )
{
	float3 L0 = normalize( Poly[0] );	
	float3 L1 = normalize( Poly[1] );	
	float3 L2 = normalize( Poly[2] );	
	float3 L3 = normalize( Poly[3] );	









	float w01 = IntegrateEdge( L0, L1 );
	float w12 = IntegrateEdge( L1, L2 );
	float w23 = IntegrateEdge( L2, L3 );
	float w30 = IntegrateEdge( L3, L0 );








	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	




	return L;
}

#line 382 "/Engine/Private/RectLight.ush"
struct FRectLTC
{
	float3x3 LTC;
	float3x3 InvLTC;
	float3 IrradianceScale;
};

#line 390 "/Engine/Private/RectLight.ush"
FRectLTC GetRectLTC_GGX(float Roughness, float3 F0, float3 F90, float NoV)
{
	float2 UV = float2( Roughness, sqrt( 1 - NoV ) );
	UV = UV * (63.0 / 64.0) + (0.5 / 64.0);

	float4 LTCMat = View_GGXLTCMatTexture.SampleLevel( View_SharedBilinearClampedSampler, UV, 0 );
	float4 LTCAmp = View_GGXLTCAmpTexture.SampleLevel( View_SharedBilinearClampedSampler, UV, 0 );

	float3x3 LTC = {
		float3( LTCMat.x, 0, LTCMat.z ),
		float3(        0, 1,        0 ),
		float3( LTCMat.y, 0, LTCMat.w )
	};

	float LTCDet = LTCMat.x * LTCMat.w - LTCMat.y * LTCMat.z;

	float4 InvLTCMat = LTCMat / LTCDet;
	float3x3 InvLTC = {
		float3( InvLTCMat.w, 0,-InvLTCMat.z ),
		float3(	          0, 1,           0 ),
		float3(-InvLTCMat.y, 0, InvLTCMat.x )
	};

	FRectLTC Out = (FRectLTC)0;
	Out.LTC = LTC;
	Out.InvLTC = InvLTC;
	Out.IrradianceScale = F90 * LTCAmp.y + ( LTCAmp.x - LTCAmp.y ) * F0;
	return Out;
}

#line 420 "/Engine/Private/RectLight.ush"
FRectLTC GetRectLTC_GGX( float Roughness, float3 SpecularColor, float NoV)
{

	const float3 F0  = SpecularColor;
	const float3 F90 = saturate(50.0 * SpecularColor);

	return GetRectLTC_GGX(Roughness, F0, F90, NoV);
}

#line 468 "/Engine/Private/RectLight.ush"
float3 RectApproxLTC(FRectLTC In, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{	

	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;


	float3 T1 = normalize( V - N * dot( N, V ) );
	float3 T2 = cross( N, T1 );
	float3x3 TangentBasis = float3x3( T1, T2, N );

	In.LTC = mul( In.LTC, TangentBasis );
	In.InvLTC = mul( transpose( TangentBasis ), In.InvLTC );

	float3 Poly[4];
	Poly[0] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[1] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[2] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	Poly[3] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );


	float3 L = PolygonIrradiance( Poly );










	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;


	L *= InvLength;




	float SinAlphaSqr = Length;

	float NoL = SphereHorizonCosWrap( L.z, SinAlphaSqr );
	float Irradiance = SinAlphaSqr * NoL;


	Irradiance = -min(-Irradiance, 0.0);











	L = mul( In.InvLTC, L );
	OutMeanLightWorldDirection = L;

	float3 LightColor = SampleSourceTexture( L, Rect, RectTexture );

	return LightColor * Irradiance * In.IrradianceScale;
}

#line 536 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC( float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{

	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	const FRectLTC LTC = GetRectLTC_GGX(Roughness, SpecularColor, NoV);
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, OutMeanLightWorldDirection);
}

#line 547 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC(float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture)
{
	float3 MeanLightWorldDirection = 0.0f;
	return RectGGXApproxLTC(Roughness, SpecularColor, N, V, Rect, RectTexture, MeanLightWorldDirection);
}

#line 553 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC(float Roughness, float3 F0, float3 F90, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{

	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	const float NoV = saturate(abs(dot(N, V)) + 1e-5);

	const FRectLTC LTC = GetRectLTC_GGX(Roughness, F0, F90, NoV);
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, OutMeanLightWorldDirection);
}

#line 564 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC(float Roughness, float3 F0, float3 F90, float3 N, float3 V, FRect Rect, FRectTexture RectTexture)
{
	float3 MeanLightWorldDirection = 0.0f;
	return RectGGXApproxLTC(Roughness, F0, F90, N, V, Rect, RectTexture, MeanLightWorldDirection);
}

#line 588 "/Engine/Private/RectLight.ush"
struct FSphericalRect
{
	float3x3	Axis;

	float		x0;
	float		x1;
	float		y0;
	float		y1;
	float		z0;

	float		b0;
	float		b1;
	float		k;
	float		SolidAngle;
};

#line 606 "/Engine/Private/RectLight.ush"
float SphericalRectAsin(float x)
{
	const float HalfPI = PI / 2;


	float a = saturate(abs(x));
	bool inner = a < 0.5f;
	float a2 = inner ? a * a : 0.5 - 0.5 * a;
	a = inner ? a : sqrt(a2);


	float r = 0.100323f;
	r = mad(r, a2, 0.163288f);
	r = mad(r, a2, 1.00011f) * a;
	r = inner ? r : HalfPI - 2 * r;

	return asfloat(asuint(r) ^ (asuint(x) & 0x80000000u)); 
}

#line 626 "/Engine/Private/RectLight.ush"
FSphericalRect BuildSphericalRect( FRect Rect )
{
	FSphericalRect SphericalRect;

	SphericalRect.Axis = Rect.Axis;

	float3 LocalPosition = mul(Rect.Axis, Rect.Origin);

	SphericalRect.x0 = LocalPosition.x - Rect.Extent.x;
	SphericalRect.x1 = LocalPosition.x + Rect.Extent.x;
	SphericalRect.y0 = LocalPosition.y - Rect.Extent.y;
	SphericalRect.y1 = LocalPosition.y + Rect.Extent.y;
	SphericalRect.z0 = -abs( LocalPosition.z );

	SphericalRect.Axis[2] *= LocalPosition.z > 0 ? -1 : 1;




	float z0sq = LocalPosition.z * LocalPosition.z;
	float n0z = -SphericalRect.y0 * rsqrt(z0sq + SphericalRect.y0 * SphericalRect.y0);
	float n1z =  SphericalRect.x1 * rsqrt(z0sq + SphericalRect.x1 * SphericalRect.x1);
	float n2z =  SphericalRect.y1 * rsqrt(z0sq + SphericalRect.y1 * SphericalRect.y1);
	float n3z = -SphericalRect.x0 * rsqrt(z0sq + SphericalRect.x0 * SphericalRect.x0);



	float G0G1 = SphericalRectAsin(n0z * n1z) + SphericalRectAsin(n1z * n2z);
	float G2G3 = SphericalRectAsin(n2z * n3z) + SphericalRectAsin(n3z * n0z);

	SphericalRect.b0 = n0z;
	SphericalRect.b1 = n2z;
	SphericalRect.k = G2G3;
	SphericalRect.SolidAngle = G0G1 + SphericalRect.k;

	return SphericalRect;
}

#line 664 "/Engine/Private/RectLight.ush"
struct FSphericalRectSample {
	float3 Direction;
	float  Distance;
	float2 UV;
	float  InvPdf;
};

#line 673 "/Engine/Private/RectLight.ush"
float GetSphericalRectInversePdf(float3 Direction, float DistanceSquared, FSphericalRect Rect)
{
	if (Rect.SolidAngle > 1e-3)
	{

		return Rect.SolidAngle;
	}
	else
	{

		float Area = (Rect.y1 - Rect.y0) * (Rect.x1 - Rect.x0);
		float NoL = abs(dot(Direction, Rect.Axis[2]));
		return Area * NoL / DistanceSquared;
	}
}

#line 689 "/Engine/Private/RectLight.ush"
FSphericalRectSample UniformSampleSphericalRect(float2 E, FSphericalRect Rect)
{
	float xu, yv;
	if (Rect.SolidAngle > 1e-3)
	{

		float au = E.x * Rect.SolidAngle - Rect.k;
		float fu = (cos(au) * Rect.b0 + Rect.b1) / sin(au);
		float cu = rsqrt(fu * fu + Rect.b0 * Rect.b0) * (fu > 0 ? 1 : -1);
		cu = clamp(cu, -1, 1);				

		xu = -(cu * Rect.z0) * rsqrt(1 - cu * cu);
		xu = clamp(xu, Rect.x0, Rect.x1);	

		float d2 = xu * xu + Rect.z0 * Rect.z0;
		float h0 = Rect.y0 * rsqrt(d2 + Rect.y0 * Rect.y0);
		float h1 = Rect.y1 * rsqrt(d2 + Rect.y1 * Rect.y1);
		float hv = h0 + E.y * (h1 - h0);
		float rv = 1.0 - hv * hv;
		yv = (rv > 0) ? (hv * d2 * rsqrt(rv * d2)) : Rect.y1;
	}
	else
	{

		xu = lerp(Rect.x0, Rect.x1, E.x);
		yv = lerp(Rect.y0, Rect.y1, E.y);
	}
	FSphericalRectSample Result;
	Result.Direction = mul(float3(xu, yv, Rect.z0), Rect.Axis);
	Result.UV = float2(xu - Rect.x0, yv - Rect.y0) / float2(Rect.x1 - Rect.x0, Rect.y1 - Rect.y0);

	float DistanceSquared = xu * xu + yv * yv + Rect.z0 * Rect.z0;
	float InvDistance = rsqrt(DistanceSquared);

	Result.Distance = DistanceSquared * InvDistance;
	Result.Direction *= InvDistance;

	Result.InvPdf = GetSphericalRectInversePdf(Result.Direction, DistanceSquared, Rect);
	return Result;
}

#line 730 "/Engine/Private/RectLight.ush"
FRect GetRect(
	float3 ToLight, 
	float3 LightDataDirection, 
	float3 LightDataTangent, 
	float LightDataSourceRadius, 
	float LightDataSourceLength, 
	float LightDataRectLightBarnCosAngle, 
	float LightDataRectLightBarnLength,
	bool bComputeVisibleRect)
{

	FRect Rect;
	Rect.Origin = ToLight;
	Rect.Axis[1] = LightDataTangent;
	Rect.Axis[2] = LightDataDirection;
	Rect.Axis[0] = cross( Rect.Axis[1], Rect.Axis[2] );
	Rect.Extent = float2(LightDataSourceRadius, LightDataSourceLength);
	Rect.FullExtent = Rect.Extent;
	Rect.Offset = 0;





















	if (bComputeVisibleRect && LightDataRectLightBarnCosAngle > 0.035f)
	{
		const float3 LightdPdv = -Rect.Axis[1];
		const float3 LightdPdu = -Rect.Axis[0];
		const float2 LightExtent = float2(LightDataSourceRadius, LightDataSourceLength);
		const float BarnLength = LightDataRectLightBarnLength;


		float3 S_Light = mul(Rect.Axis, ToLight);




		const float CosTheta = LightDataRectLightBarnCosAngle;
		const float SinTheta = sqrt(1 - CosTheta * CosTheta);
		const float BarnDepth = min(S_Light.z, CosTheta * BarnLength);
		const float S_ratio = BarnDepth / max(0.0001f, CosTheta * BarnLength);
		const float D_B = SinTheta * BarnLength * S_ratio;


		const float2 SignS = sign(S_Light.xy);
		S_Light.xy = SignS * max(abs(S_Light.xy), LightExtent + D_B.xx);


		const float3 C = float3(SignS * (LightExtent + D_B.xx), BarnDepth);



		const float3 SProj = S_Light - C;
		const float CosEta = max(SProj.z, 0.001f);
		const float2 SinEta = abs(SProj.xy);
		const float2 TanEta = abs(SProj.xy) / CosEta;
		const float2 D_S = BarnDepth * TanEta;




		const float2 MinXY = clamp(-LightExtent + (D_S - D_B.xx) * max(0, -SignS), -LightExtent, LightExtent);
		const float2 MaxXY = clamp( LightExtent - (D_S - D_B.xx) * max(0,  SignS), -LightExtent, LightExtent);
		const float2 RectOffset = 0.5f * (MinXY + MaxXY);

		Rect.Extent = 0.5f * (MaxXY - MinXY);
		Rect.Origin = Rect.Origin + LightdPdu * RectOffset.x + LightdPdv * RectOffset.y;
		Rect.Offset = -RectOffset;
		Rect.FullExtent = LightExtent;
	}

	return Rect;
}

#line 821 "/Engine/Private/RectLight.ush"
FRect GetRect(FLightShaderParameters In, float3 TranslatedWorldPosition)
{
	return GetRect(In.TranslatedWorldPosition - TranslatedWorldPosition,
		In.Direction,
		In.Tangent,
		In.SourceRadius,
		In.SourceLength,
		In.RectLightBarnCosAngle,
		In.RectLightBarnLength,
		true);
}

#line 833 "/Engine/Private/RectLight.ush"
bool IsRectVisible(FRect Rect)
{

	return Rect.Extent.x != 0 && Rect.Extent.y != 0;
}

#line 7 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLight
{
	float		SphereSinAlpha;
	float		SphereSinAlphaSoft;
	float		LineCosSubtended;

	float3		FalloffColor;

	FRect		Rect;
	FRectTexture Texture;

	uint		IsRectAndDiffuseMicroReflWeight;
};

#line 21 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLightIntegrateContext
{
	FAreaLight AreaLight;
	float3 L;
	float NoL;
	float Falloff;
};

#line 29 "/Engine/Private/AreaLightCommon.ush"
void SetIsRectLight(inout FAreaLight AreaLight, bool bIsRectLight)
{
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0xFFFFFFFE) | (bIsRectLight ? 0x1 : 0x0);
}

#line 34 "/Engine/Private/AreaLightCommon.ush"
bool IsRectLight(FAreaLight AreaLight)
{
	return (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) == 0x1;
}

#line 39 "/Engine/Private/AreaLightCommon.ush"
void SetAreaLightDiffuseMicroReflWeight(inout FAreaLight AreaLight, float Weight)
{

	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) | (asuint(Weight) << 1);
}

#line 55 "/Engine/Private/AreaLightCommon.ush"
FAreaLightIntegrateContext InitAreaLightIntegrateContext()
{

	FAreaLightIntegrateContext Out;
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 0;
	Out.AreaLight.FalloffColor = 0;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.L = 0;
	Out.NoL = 0;
	Out.Falloff = 0;
	return Out;
}

#line 10 "/Engine/Private/HairBsdf.ush"
float Hair_g(float B, float Theta, bool bClampBSDFValue)
{



	const float DenominatorB = bClampBSDFValue ? max(B, 0.01f) : B;
	return exp(-0.5 * Pow2(Theta) / (B * B)) / (sqrt(2 * PI) * DenominatorB);
}

#line 19 "/Engine/Private/HairBsdf.ush"
float Hair_F(float CosTheta)
{
	const float n = 1.55;
	const float F0 = Pow2((1 - n) / (1 + n));
	return F0 + (1 - F0) * Pow5(1 - CosTheta);
}

#line 26 "/Engine/Private/HairBsdf.ush"
float3 KajiyaKayDiffuseAttenuation(FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow)
{

	float KajiyaDiffuse = 1 - abs(dot(N, L));

	float3 FakeNormal = normalize(V - N * dot(V, N));

	N = FakeNormal;


	float MinValue = 0.0001f;
	float Wrap = 1;
	float NoL = saturate((dot(N, L) + Wrap) / Square(1 + Wrap));
	float DiffuseScatter = (1 / PI) * lerp(NoL, KajiyaDiffuse, 0.33) * GBuffer.Metallic;
	float Luma = Luminance(GBuffer.BaseColor);
    float3 BaseOverLuma = abs(GBuffer.BaseColor / max(Luma, MinValue));
	float3 ScatterTint = Shadow < 1 ? pow(BaseOverLuma, 1 - Shadow) : 1;
	return sqrt(abs(GBuffer.BaseColor)) * DiffuseScatter * ScatterTint;
}

#line 46 "/Engine/Private/HairBsdf.ush"
float3 EvaluateHairMultipleScattering(
	const FHairTransmittanceData TransmittanceData,
	const float Roughness,
	const float3 Fs)
{
	return TransmittanceData.GlobalScattering * (Fs + TransmittanceData.LocalScattering) * TransmittanceData.OpaqueVisibility;
}

#line 277 "/Engine/Private/HairBsdf.ush"
float3 HairShading( FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow, FHairTransmittanceData HairTransmittance, float InBacklit, float Area, uint2 Random )
{



	float ClampedRoughness = clamp(GBuffer.Roughness, 1/255.0f, 1.0f);


	const float Backlit	= min(InBacklit, HairTransmittance.bUseBacklit ? GBuffer.CustomData.z : 1);








	const float VoL       = dot(V,L);                                                      
	const float SinThetaL = clamp(dot(N,L), -1.f, 1.f);
	const float SinThetaV = clamp(dot(N,V), -1.f, 1.f);
	float CosThetaD = cos( 0.5 * abs( asinFast( SinThetaV ) - asinFast( SinThetaL ) ) );



	const float3 Lp = L - SinThetaL * N;
	const float3 Vp = V - SinThetaV * N;
	const float CosPhi = dot(Lp,Vp) * rsqrt( dot(Lp,Lp) * dot(Vp,Vp) + 1e-4 );
	const float CosHalfPhi = sqrt( saturate( 0.5 + 0.5 * CosPhi ) );


	float n = 1.55;

	float n_prime = 1.19 / CosThetaD + 0.36 * CosThetaD;

	float Shift = 0.035;
	float Alpha[] =
	{
		-Shift * 2,
		Shift,
		Shift * 4,
	};	
	float B[] =
	{
		Area + Pow2(ClampedRoughness),
		Area + Pow2(ClampedRoughness) / 2,
		Area + Pow2(ClampedRoughness) * 2,
	};

	float3 S = 0;
	if (HairTransmittance.ScatteringComponent & 0x1u)
	{
		const float sa = sin(Alpha[0]);
		const float ca = cos(Alpha[0]);
		float ShiftR = 2 * sa * (ca * CosHalfPhi * sqrt(1 - SinThetaV * SinThetaV) + sa * SinThetaV);
		float BScale = HairTransmittance.bUseSeparableR ? sqrt(2.0) * CosHalfPhi : 1;
		float Mp = Hair_g(B[0] * BScale, SinThetaL + SinThetaV - ShiftR, HairTransmittance.bClampBSDFValue);
		float Np = 0.25 * CosHalfPhi;
		float Fp = Hair_F(sqrt(saturate(0.5 + 0.5 * VoL)));
		S += Mp * Np * Fp * (GBuffer.Specular * 2) * lerp(1, Backlit, saturate(-VoL));
	}


	if (HairTransmittance.ScatteringComponent & 0x2u)
	{
		float Mp = Hair_g( B[1], SinThetaL + SinThetaV - Alpha[1], HairTransmittance.bClampBSDFValue);

		float a = 1 / n_prime;


		float h = CosHalfPhi * ( 1 + a * ( 0.6 - 0.8 * CosPhi ) );




		float f = Hair_F( CosThetaD * sqrt( saturate( 1 - h*h ) ) );
		float Fp = Pow2(1 - f);


		float3 Tp = 0;
		if (HairTransmittance.bUseLegacyAbsorption)
		{
			Tp = pow(abs(GBuffer.BaseColor), 0.5 * sqrt(1 - Pow2(h * a)) / CosThetaD);
		}
		else
		{

			const float3 AbsorptionColor = HairColorToAbsorption(GBuffer.BaseColor);
			Tp = exp(-AbsorptionColor * 2 * abs(1 - Pow2(h * a) / CosThetaD));
		}







		float Np = exp( -3.65 * CosPhi - 3.98 );

		S += Mp * Np * Fp * Tp * Backlit;
	}


	if (HairTransmittance.ScatteringComponent & 0x4u)
	{
		float Mp = Hair_g( B[2], SinThetaL + SinThetaV - Alpha[2], HairTransmittance.bClampBSDFValue);


		float f = Hair_F( CosThetaD * 0.5 );
		float Fp = Pow2(1 - f) * f;

		float3 Tp = pow(abs(GBuffer.BaseColor), 0.8 / CosThetaD );



		float Np = exp( 17 * CosPhi - 16.78 );

		S += Mp * Np * Fp * Tp;
	}


	if (HairTransmittance.ScatteringComponent & 0x20u)
	{
		S  = EvaluateHairMultipleScattering(HairTransmittance, ClampedRoughness, S);
		S += KajiyaKayDiffuseAttenuation(GBuffer, L, V, N, Shadow);
	}

	S = -min(-S, 0.0);
	return S;
}

#line 20 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3   GetF0F90RGB(float3 InF0)
{



	return InF0;

}

#line 38 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
struct   FBxDFEnergyTermsRGB
{
	float3 W; 
	float3 E; 
};

#line 66 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0, float3 F90)
{
	  FBxDFEnergyTermsRGB Out;





	{
		Out.W = 1.0f;
		Out.E =   GetF0F90RGB(F0);
	}

	return Out;
}

#line 82 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0)
{
	const float F90 = F0RGBToMicroOcclusion(F0);
	return   ComputeGGXSpecEnergyTermsRGB(Roughness, NoV, F0, F90);
}

#line 126 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsRGB EnergyTerms)
{







	return 1.0f;

}

#line 140 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3 ComputeEnergyConservation(  FBxDFEnergyTermsRGB EnergyTerms)
{
	return EnergyTerms.W;
}
struct   FBxDFEnergyTermsA
{
	float W; 
	float E; 
};

#line 88 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsA   ComputeClothEnergyTermsA(float Roughness, float NoV)
{
	  FBxDFEnergyTermsA Out;






	{
		Out.W = 1.0f;
		Out.E = 1.0f;
	}

	return Out;
}

#line 126 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsA EnergyTerms)
{







	return 1.0f;

}

#line 140 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyConservation(  FBxDFEnergyTermsA EnergyTerms)
{
	return EnergyTerms.W;
}

#line 91 "/Engine/Private/ParticipatingMediaCommon.ush"
float HenyeyGreensteinPhase(float G, float CosTheta)
{


	float Numer = 1.0f - G * G;
	float Denom = 1.0f + G * G + 2.0f * G * CosTheta;
	return Numer / (4.0f * PI * Denom * sqrt(Denom));
}

#line 170 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 TransmittanceToExtinction(in float3 TransmittanceColor, in float ThicknessMeters)
{


	return -log(clamp(TransmittanceColor, 0.000000000001f, 1.0f)) / max(0.000000000001f, ThicknessMeters);
}

#line 182 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 ExtinctionToTransmittance(in float3 Extinction, in float ThicknessMeters)
{
	return exp(-Extinction * ThicknessMeters);
}

#line 121 "/Engine/Private/ShadingModels.ush"
struct FDirectLighting
{
	float3	Diffuse;
	float3	Specular;
	float3	Transmission;
};

#line 128 "/Engine/Private/ShadingModels.ush"
struct FShadowTerms
{
	float	SurfaceShadow;
	float	TransmissionShadow;
	float	TransmissionThickness;
	FHairTransmittanceData HairTransmittance;
};

#line 135 "/Engine/Private/ShadingModels.ush"
FDirectLighting HairBxDF(FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)
{
	const float3 BsdfValue = HairShading(GBuffer, L, V, N, Shadow.TransmissionShadow, Shadow.HairTransmittance, 1, 0, uint2(0, 0));

	FDirectLighting Lighting;
	Lighting.Diffuse = 0;
	Lighting.Specular = 0;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * BsdfValue;
	return Lighting;
}

#line 146 "/Engine/Private/ShadingModels.ush"
float New_a2( float a2, float SinAlpha, float VoH )
{
	return a2 + 0.25 * SinAlpha * (3.0 * sqrtFast(a2) + SinAlpha) / ( VoH + 0.001 );


}

#line 153 "/Engine/Private/ShadingModels.ush"
float EnergyNormalization( inout float a2, float VoH, FAreaLight AreaLight )
{
	if( AreaLight.SphereSinAlphaSoft > 0 )
	{

		a2 = saturate( a2 + Pow2( AreaLight.SphereSinAlphaSoft ) / ( VoH * 3.6 + 0.4 ) );
	}

	float Sphere_a2 = a2;
	float Energy = 1;
	if( AreaLight.SphereSinAlpha > 0 )
	{
		Sphere_a2 = New_a2( a2, AreaLight.SphereSinAlpha, VoH );
		Energy = a2 / Sphere_a2;
	}

	if( AreaLight.LineCosSubtended < 1 )
	{

		float LineCosTwoAlpha = AreaLight.LineCosSubtended;
		float LineTanAlpha = sqrt( ( 1.0001 - LineCosTwoAlpha ) / ( 1 + LineCosTwoAlpha ) );
		float Line_a2 = New_a2( Sphere_a2, LineTanAlpha, VoH );
		Energy *= sqrt( Sphere_a2 / max(Line_a2, 1e-5) );






	}

	return Energy;
}

#line 187 "/Engine/Private/ShadingModels.ush"
float3 SpecularGGX(float Roughness, float Anisotropy, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float Alpha = Roughness * Roughness;
	float a2 = Alpha * Alpha;

	FAreaLight Punctual = AreaLight;
	Punctual.SphereSinAlpha = 0;
	Punctual.SphereSinAlphaSoft = 0;
	Punctual.LineCosSubtended = 1;
	Punctual.Rect = (FRect)0;
	Punctual.IsRectAndDiffuseMicroReflWeight = 0;

	float Energy = EnergyNormalization(a2, Context.VoH, Punctual);

	float ax = 0;
	float ay = 0;
	GetAnisotropicRoughness(Alpha, Anisotropy, ax, ay);


	float3 D = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH) * Energy;
	float3 Vis = Vis_SmithJointAniso(ax, ay, Context.NoV, NoL, Context.XoV, Context.XoL, Context.YoV, Context.YoL);
	float3 F = F_Schlick( SpecularColor, Context.VoH );

	return (D * Vis) * F;
}

#line 213 "/Engine/Private/ShadingModels.ush"
float3 SpecularGGX( float Roughness, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight )
{
	float a2 = Pow4( Roughness );
	float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );


	float D = D_GGX( a2, Context.NoH ) * Energy;
	float Vis = Vis_SmithJointApprox( a2, Context.NoV, NoL );
	float3 F = F_Schlick( SpecularColor, Context.VoH );

	return (D * Vis) * F;
}

#line 226 "/Engine/Private/ShadingModels.ush"
float3 DualSpecularGGX(float AverageRoughness, float Lobe0Roughness, float Lobe1Roughness, float LobeMix, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float AverageAlpha2 = Pow4(AverageRoughness);
	float Lobe0Alpha2 = Pow4(Lobe0Roughness);
	float Lobe1Alpha2 = Pow4(Lobe1Roughness);

	float Lobe0Energy = EnergyNormalization(Lobe0Alpha2, Context.VoH, AreaLight);
	float Lobe1Energy = EnergyNormalization(Lobe1Alpha2, Context.VoH, AreaLight);


	float D = lerp(D_GGX(Lobe0Alpha2, Context.NoH) * Lobe0Energy, D_GGX(Lobe1Alpha2, Context.NoH) * Lobe1Energy, LobeMix);
	float Vis = Vis_SmithJointApprox(AverageAlpha2, Context.NoV, NoL); 
	float3 F = F_Schlick(SpecularColor, Context.VoH);

	return (D * Vis) * F;
}

#line 243 "/Engine/Private/ShadingModels.ush"
FDirectLighting DefaultLitBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;
	FDirectLighting Lighting;
	Lighting.Diffuse = 0;
	Lighting.Specular = 0;
	Lighting.Transmission = 0;









	[branch]
	if (NoL > 0.0f)
	{



		bool bHasAnisotropy = false;


		float NoV, VoH, NoH;
		[branch]
		if (bHasAnisotropy)
		{
			float3 X = GBuffer.WorldTangent;
			float3 Y = normalize(cross(N, X));
			Init(Context, N, X, Y, V, L);

			NoV = Context.NoV;
			VoH = Context.VoH;
			NoH = Context.NoH;
		}
		else
		{



			Init(Context, N, V, L);


			NoV = Context.NoV;
			VoH = Context.VoH;
			NoH = Context.NoH;

			SphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);
		}

		Context.NoV = saturate(abs( Context.NoV ) + 1e-5);






		Lighting.Diffuse = Diffuse_Lambert(GBuffer.DiffuseColor);

		Lighting.Diffuse *= AreaLight.FalloffColor * (Falloff * NoL);

		[branch]
		if (bHasAnisotropy)
		{

			Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.Anisotropy, GBuffer.SpecularColor, Context, NoL, AreaLight);
		}
		else
		{
			if( IsRectLight(AreaLight) )
			{
				Lighting.Specular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
			}
			else
			{
				Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);
			}
		}

		FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);


		Lighting.Diffuse *= ComputeEnergyPreservation(EnergyTerms);


		Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);

		Lighting.Transmission = 0;
	}

	return Lighting;
}

#line 364 "/Engine/Private/ShadingModels.ush"
float RefractBlendClearCoatApprox(float VoH)
{

	return (0.63 - 0.22 * VoH) * VoH - 0.745;
}

#line 377 "/Engine/Private/ShadingModels.ush"
BxDFContext RefractClearCoatContext(BxDFContext Context)
{








	BxDFContext RefractedContext = Context;
	float Eta = 1.0 / 1.5;
	float RefractionBlendFactor = RefractBlendClearCoatApprox(Context.VoH);
	float RefractionProjectionTerm = RefractionBlendFactor * Context.NoH;
	RefractedContext.NoV = clamp(Eta * Context.NoV - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.NoL = clamp(Eta * Context.NoL - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.VoH = saturate(Eta * Context.VoH - RefractionBlendFactor);
	RefractedContext.VoL = 2.0 * RefractedContext.VoH * RefractedContext.VoH - 1.0;
	RefractedContext.NoH = Context.NoH;
	return RefractedContext;
}

#line 399 "/Engine/Private/ShadingModels.ush"
FDirectLighting ClearCoatBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float ClearCoat			= GBuffer.CustomData.x;
	const float ClearCoatRoughness	= max(GBuffer.CustomData.y, 0.02f);

	FDirectLighting Lighting = {
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0)
	};

	BxDFContext Context;
	float3 Nspec = N;

	if (0)
	{
		Nspec = GBuffer.WorldNormal;
	}




	bool bHasAnisotropy = false;


	float3 X = 0;
	float3 Y = 0;






	Init(Context, Nspec, V, L);



	float SphereSinAlpha = AreaLight.SphereSinAlpha;
	float RoughnessCompensation = 1 - Pow2(GBuffer.Roughness);
	float Alpha = ClearCoatRoughness * ClearCoatRoughness;
	RoughnessCompensation = RoughnessCompensation > 0.0 ? (1 - Alpha) / RoughnessCompensation : 0.0;
	AreaLight.SphereSinAlpha = saturate(AreaLight.SphereSinAlpha * RoughnessCompensation);

	SphereMaxNoH(Context, AreaLight.SphereSinAlpha, 0 == 0);
	Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;


	float F0 = 0.04;
	float Fc = Pow5(1 - Context.VoH);
	float F = Fc + (1 - Fc) * F0;

	FBxDFEnergyTermsRGB EnergyTermsCoat   = ComputeGGXSpecEnergyTermsRGB(ClearCoatRoughness, Context.NoV, F0);

	if (bIsRect)
	{
		Lighting.Specular = ClearCoat * RectGGXApproxLTC(ClearCoatRoughness, F0, Nspec, V, AreaLight.Rect, AreaLight.Texture);
	}
	else
	{

		float a2 = Pow2(Alpha);
		float ClearCoatEnergy = EnergyNormalization(a2, Context.VoH, AreaLight);
		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
		float D = D_GGX(a2, Context.NoH) * ClearCoatEnergy;
		float Fr1 = (D * Vis) * F;
		Lighting.Specular = ClearCoat * AreaLight.FalloffColor * (Falloff * NoL * Fr1);
	}
	Lighting.Specular *= ComputeEnergyConservation(EnergyTermsCoat);



	AreaLight.SphereSinAlpha = SphereSinAlpha;
	Alpha = Pow2(GBuffer.Roughness);







	float FresnelCoeff = 1.0 - F;

	FresnelCoeff *= FresnelCoeff;





	if (0)
	{
		BxDFContext TempContext;

		[branch]
		if (bHasAnisotropy)
		{
			Init(TempContext, N, X, Y, V, L);
		}
		else
		{
			Init(TempContext, Nspec, V, L);
		}


		float3 H = normalize(V + L);
		Context.NoH = saturate(dot(N, H));
		Context.NoV = saturate(dot(N, V));
		Context.NoL = saturate(dot(N, L));
		Context.VoL = saturate(dot(V, L));
		Context.VoH = saturate(dot(V, H));

		Context.XoV = TempContext.XoV;
		Context.XoL = TempContext.XoL;
		Context.XoH = TempContext.XoH;
		Context.YoV = TempContext.YoV;
		Context.YoL = TempContext.YoL;
		Context.YoH = TempContext.YoH;

		if (!bHasAnisotropy)
		{
			bool bNewtonIteration = true;
			SphereMaxNoH(Context, AreaLight.SphereSinAlpha, bNewtonIteration);
		}

		Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	}










	if (bHasAnisotropy)
	{

		X = GBuffer.WorldTangent;
		Y = normalize(cross(N, X));
		Init(Context, Nspec, X, Y, V, L);
	}
	BxDFContext BottomContext = RefractClearCoatContext(Context);
	BottomContext.VoH = bIsRect ? BottomContext.NoV : BottomContext.VoH;

	FBxDFEnergyTermsRGB EnergyTermsBottom = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, BottomContext.NoV, GBuffer.SpecularColor);


	float3 Transmission = SimpleClearCoatTransmittance(BottomContext.NoL, BottomContext.NoV, GBuffer.Metallic, GBuffer.BaseColor);


	float3 DefaultDiffuse = (Falloff * NoL) * AreaLight.FalloffColor * Diffuse_Lambert(GBuffer.DiffuseColor) * ComputeEnergyPreservation(EnergyTermsBottom);
	float3 RefractedDiffuse = FresnelCoeff * Transmission * DefaultDiffuse;
	Lighting.Diffuse = lerp(DefaultDiffuse, RefractedDiffuse, ClearCoat);

	if (!bHasAnisotropy && bIsRect)
	{

		float3 DefaultSpecular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 RefractedSpecular = FresnelCoeff * Transmission * DefaultSpecular;
		Lighting.Specular += lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}
	else
	{
		float a2 = Pow4(GBuffer.Roughness);
		float D2 = 0;
		float Vis2 = 0;



		float Energy = 0;
		[branch]
		if (bHasAnisotropy)
		{
			FAreaLight Punctual = AreaLight;
			Punctual.SphereSinAlpha = 0;
			Punctual.SphereSinAlphaSoft = 0;
			Punctual.LineCosSubtended = 1;
			Punctual.Rect = (FRect)0;
			Punctual.IsRectAndDiffuseMicroReflWeight = 0;

			Energy = EnergyNormalization(a2, Context.VoH, Punctual);
		}
		else
		{
			Energy = EnergyNormalization(a2, Context.VoH, AreaLight);
		}

		[branch]
		if (bHasAnisotropy)
		{
			float ax = 0;
			float ay = 0;
			GetAnisotropicRoughness(Alpha, GBuffer.Anisotropy, ax, ay); 

			D2 = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH);
			Vis2 = Vis_SmithJointAniso(ax, ay, BottomContext.NoV, BottomContext.NoL, BottomContext.XoV, BottomContext.XoL, BottomContext.YoV, BottomContext.YoL);
		}
		else
		{

			Vis2 = Vis_SmithJointApprox(a2, BottomContext.NoV, NoL);
			D2 = D_GGX(a2, BottomContext.NoH);
		}
		float3 F_Bot = F_Schlick(GBuffer.SpecularColor, BottomContext.VoH);
		float3 F_DefaultLit = F_Schlick(GBuffer.SpecularColor, Context.VoH);



		float3 CommonSpecular = (Energy * Falloff * NoL * D2 * Vis2) * AreaLight.FalloffColor;
		float3 DefaultSpecular = F_DefaultLit;
		float3 RefractedSpecular = FresnelCoeff * Transmission * F_Bot;
		Lighting.Specular += CommonSpecular * lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}

	return Lighting;
}

#line 631 "/Engine/Private/ShadingModels.ush"
void GetProfileDualSpecular(uint SubsurfaceProfileInt, float Roughness, float Opacity, out float LobeRoughness0, out float LobeRoughness1, out float LobeMix)
{




	LobeRoughness0 = Roughness;
	LobeRoughness1 = Roughness;
	LobeMix = 0.f;

}

#line 643 "/Engine/Private/ShadingModels.ush"
FDirectLighting SubsurfaceProfileBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;



	Init( Context, N, V, L );

	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	uint SubsurfaceProfileId = ExtractSubsurfaceProfileInt(GBuffer);
	float Opacity = GBuffer.CustomData.a;
	float Roughness = GBuffer.Roughness;

	float Lobe0Roughness = 0;
	float Lobe1Roughness = 0;
	float LobeMix = 0;

	GetProfileDualSpecular(SubsurfaceProfileId, Roughness, Opacity, Lobe0Roughness, Lobe1Roughness, LobeMix);
	float AverageRoughness = lerp(Lobe0Roughness, Lobe1Roughness, LobeMix);


	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(AverageRoughness, Context.NoV, GBuffer.SpecularColor);

	FDirectLighting Lighting;
#line 681 "/Engine/Private/ShadingModels.ush"






	const float3 DiffuseReflection = Diffuse_Burley(GBuffer.DiffuseColor, GBuffer.Roughness, Context.NoV, NoL, Context.VoH);


	Lighting.Diffuse  = AreaLight.FalloffColor * (Falloff * NoL) * DiffuseReflection;


	if (IsRectLight(AreaLight))
	{
		float3 Lobe0Specular = RectGGXApproxLTC(Lobe0Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 Lobe1Specular = RectGGXApproxLTC(Lobe1Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		Lighting.Specular = lerp(Lobe0Specular, Lobe1Specular, LobeMix);
	}
	else
	{
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * DualSpecularGGX(AverageRoughness, Lobe0Roughness, Lobe1Roughness, LobeMix, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}

	Lighting.Diffuse  *= ComputeEnergyPreservation(EnergyTerms);
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);

#line 721 "/Engine/Private/ShadingModels.ush"


	Lighting.Transmission = 0;



	return Lighting;
}

#line 730 "/Engine/Private/ShadingModels.ush"
FDirectLighting ClothBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float3 FuzzColor	= ExtractSubsurfaceColor(GBuffer);
	const float  Cloth		= saturate(GBuffer.CustomData.a);

	BxDFContext Context;



	Init( Context, N, V, L );

	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	float3 Spec1;
	if(IsRectLight(AreaLight))
		Spec1 = RectGGXApproxLTC( GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture );
	else
		Spec1 = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX( GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight );

	const FBxDFEnergyTermsRGB EnergyTerms1 = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);
	Spec1 *= ComputeEnergyConservation(EnergyTerms1);


	float D2 = D_InvGGX( Pow4( GBuffer.Roughness ), Context.NoH );
	float Vis2 = Vis_Cloth( Context.NoV, NoL );



	float3 F2 = F_Schlick( FuzzColor, Context.VoH );
	float3 Spec2 = AreaLight.FalloffColor * (Falloff * NoL) * (D2 * Vis2) * F2;

	const FBxDFEnergyTermsA EnergyTerms2 = ComputeClothEnergyTermsA(GBuffer.Roughness, Context.NoV);
	Spec2 *= ComputeEnergyConservation(EnergyTerms2);

	FDirectLighting Lighting;
	Lighting.Diffuse  = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Lambert( GBuffer.DiffuseColor ); 
	Lighting.Specular = lerp( Spec1, Spec2, Cloth );
	Lighting.Transmission = 0;

	Lighting.Diffuse *= lerp(ComputeEnergyPreservation(EnergyTerms1), ComputeEnergyPreservation(EnergyTerms2), Cloth);

	return Lighting;
}

#line 775 "/Engine/Private/ShadingModels.ush"
FDirectLighting SubsurfaceBxDF(FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;



	float InScatter = pow(saturate(dot(L, -V)), 12) * lerp(3, .1f, Opacity);







	const float WrappedDiffuse = pow(saturate(dot(N, L) * (1.f / 1.5f) + (0.5f / 1.5f)), 1.5f) * (2.5f / 1.5f);
	const float NormalContribution = lerp(1.f, WrappedDiffuse, Opacity);
	const float BackScatter = GBuffer.GBufferAO * NormalContribution / (PI * 2);






	const float3 ExtinctionCoefficients = TransmittanceToExtinction(SubsurfaceColor, View_SubSurfaceColorAsTransmittanceAtDistanceInMeters);
	const float3 RawTransmittedColor = ExtinctionToTransmittance(ExtinctionCoefficients, 1.0f );
	const float3 TransmittedColor = HSV_2_LinearRGB(float3(LinearRGB_2_HSV(RawTransmittedColor).xy, LinearRGB_2_HSV(SubsurfaceColor).z));


	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * lerp(BackScatter, 1, InScatter)) * lerp(TransmittedColor, SubsurfaceColor, Shadow.TransmissionThickness);

	return Lighting;
}

#line 811 "/Engine/Private/ShadingModels.ush"
FDirectLighting TwoSidedBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);


	float Wrap = 0.5;
	float WrapNoL = saturate( ( -dot(N, L) + Wrap ) / Square( 1 + Wrap ) );


	float VoL = dot(V, L);
	float Scatter = D_GGX( 0.6*0.6, saturate( -VoL ) );

	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * WrapNoL * Scatter) * SubsurfaceColor;

	return Lighting;
}

#line 830 "/Engine/Private/ShadingModels.ush"
FDirectLighting EyeBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{









	const float3 IrisNormal		= OctahedronToUnitVector( GBuffer.CustomData.yz * 2 - 1 );
	const float  IrisDistance	= GBuffer.StoredMetallic;
	const float  IrisMask		= 1.0f - GBuffer.CustomData.w;





	const float3 CausticNormal = normalize(lerp(IrisNormal, -N, IrisMask*IrisDistance));


	BxDFContext Context;



	Init( Context, N, V, L );

	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, false );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;


	float F0 = GBuffer.Specular * 0.08;
	float Fc = Pow5( 1 - Context.VoH );
	float F = Fc + (1 - Fc) * F0;

	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, F0);

	FDirectLighting Lighting;

	if( bIsRect )
	{
		Lighting.Specular = RectGGXApproxLTC( GBuffer.Roughness, F0, N, V, AreaLight.Rect, AreaLight.Texture );
	}
	else
	{
		float a2 = Pow4( GBuffer.Roughness );
		float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );

		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
		float D = D_GGX(a2, Context.NoH) * Energy;
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * D * Vis * F;
	}

	float IrisNoL = saturate( dot( IrisNormal, L ) );
	float Power = lerp( 12, 1, IrisNoL );
	float Caustic = 0.8 + 0.2 * ( Power + 1 ) * pow( saturate( dot( CausticNormal, L ) ), Power );
	float Iris = IrisNoL * Caustic;
	float Sclera = NoL;

	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);





	const float EnergyPreservation = 1.0f - F;


	Lighting.Diffuse = 0;
	Lighting.Transmission = AreaLight.FalloffColor * ( Falloff * lerp( Sclera, Iris, IrisMask ) * EnergyPreservation ) * Diffuse_Lambert( GBuffer.DiffuseColor );
#line 922 "/Engine/Private/ShadingModels.ush"

	return Lighting;
}

#line 926 "/Engine/Private/ShadingModels.ush"
FDirectLighting PreintegratedSkinBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;

	float3 PreintegratedBRDF = Texture2DSampleLevel(View_PreIntegratedBRDF, View_PreIntegratedBRDFSampler, float2(saturate(dot(N, L) * .5 + .5), 1 - Opacity), 0).rgb;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * PreintegratedBRDF * SubsurfaceColor;

	return Lighting;
}

#line 939 "/Engine/Private/ShadingModels.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	switch( GBuffer.ShadingModelID )
	{
		case 1:
		case 10:
		case 11:
			return DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 2:
			return SubsurfaceBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 3:
			return PreintegratedSkinBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 4:
			return ClearCoatBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 5:
			return SubsurfaceProfileBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 6:
			return TwoSidedBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 7:
			return HairBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 8:
			return ClothBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 9:
			return EyeBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		default:
			return (FDirectLighting)0;
	}
}

#line 968 "/Engine/Private/ShadingModels.ush"
FDirectLighting EvaluateBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float NoL, FShadowTerms Shadow )
{
	FAreaLight AreaLight;
	AreaLight.SphereSinAlpha = 0;
	AreaLight.SphereSinAlphaSoft = 0;
	AreaLight.LineCosSubtended = 1;
	AreaLight.FalloffColor = 1;
	AreaLight.Rect = (FRect)0;
	AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	AreaLight.Texture = InitRectTexture();

	return IntegrateBxDF( GBuffer, N, V, L, 1, NoL, AreaLight, Shadow );
}

#line 420 "/Engine/Private/HeightFogCommon.ush"
float4 CombineVolumetricFog(float4 GlobalFog, float3 VolumeUV, uint EyeIndex, float SceneDepth, ViewState InView)
{
	float4 VolumetricFogLookup = float4(0, 0, 0, 1);

	if (InView.RenderingReflectionCaptureMask == 0.0f && ! (( InView.EnvironmentComponentsFlags [0] & 0x20)  > 0))
	{
		return VolumetricFogLookup;
	}


	float VolFogStartDistance = 0.0f;
	if (OpaqueBasePass_Shared_Fog_ApplyVolumetricFog > 0)
	{

		if (EyeIndex == 0)
		{
			VolFogStartDistance = OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance;
			VolumetricFogLookup = Texture3DSampleLevel(OpaqueBasePass_Shared_Fog_IntegratedLightScattering, View_SharedBilinearClampedSampler, VolumeUV, 0);
		}
		else
		{
			VolFogStartDistance = OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance;
			VolumetricFogLookup = Texture3DSampleLevel(OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, View_SharedBilinearClampedSampler, VolumeUV, 0);
		}






		VolumetricFogLookup.rgb *= InView.OneOverPreExposure;
	}



	VolumetricFogLookup = lerp(float4(0, 0, 0, 1), VolumetricFogLookup, saturate((SceneDepth - VolFogStartDistance) * 100000000.0f));













	return float4(VolumetricFogLookup.rgb + GlobalFog.rgb * VolumetricFogLookup.a, VolumetricFogLookup.a * GlobalFog.a);
}

#line 472 "/Engine/Private/HeightFogCommon.ush"
float4 CombineVolumetricFog(float4 GlobalFog, float3 VolumeUV, uint EyeIndex, float SceneDepth)
{
	return CombineVolumetricFog(GlobalFog, VolumeUV, EyeIndex, SceneDepth, GetPrimaryView());
}

#line 477 "/Engine/Private/HeightFogCommon.ush"
float ComputeNormalizedZSliceFromDepth(float SceneDepth, ViewState InView)
{
	return log2(SceneDepth * InView.VolumetricFogGridZParams.x + InView.VolumetricFogGridZParams.y) * InView.VolumetricFogGridZParams.z * InView.VolumetricFogInvGridSize.z;
}

#line 482 "/Engine/Private/HeightFogCommon.ush"
float ComputeNormalizedZSliceFromDepth(float SceneDepth)
{
	return ComputeNormalizedZSliceFromDepth(SceneDepth, GetPrimaryView());
}

#line 487 "/Engine/Private/HeightFogCommon.ush"
float3 ComputeVolumeUVFromNDC(float4 NDCPosition, ViewState InView)
{
	NDCPosition.xy /= NDCPosition.w;
	float3 VolumeUV = float3(NDCPosition.xy * float2(.5f, -.5f) + .5f, ComputeNormalizedZSliceFromDepth(NDCPosition.w, InView));
	return min(VolumeUV * float3(InView.VolumetricFogScreenToResourceUV.xy, 1.0), float3(InView.VolumetricFogUVMax, 1.0));
}

#line 494 "/Engine/Private/HeightFogCommon.ush"
float3 ComputeVolumeUVFromNDC(float4 NDCPosition)
{
	return ComputeVolumeUVFromNDC(NDCPosition, GetPrimaryView());
}

#line 513 "/Engine/Private/HeightFogCommon.ush"
float3 ComputeVolumeUV(FDFVector3 WorldPosition, FDFInverseMatrix WorldToClip, ViewState InView)
{
	float4 NDCPosition = DFMultiplyDemote(MakeDFVector(WorldPosition, 1.0f), WorldToClip);
	return ComputeVolumeUVFromNDC(NDCPosition, InView);
}

#line 518 "/Engine/Private/HeightFogCommon.ush"
float3 ComputeVolumeUV(FDFVector3 WorldPosition, FDFInverseMatrix WorldToClip)
{
	return ComputeVolumeUV(WorldPosition, WorldToClip, GetPrimaryView());
}

#line 11 "/Engine/Private/ReflectionEnvironmentShared.ush"
float GetSkyLightCubemapBrightness()
{
	return View_SkyIrradianceEnvironmentMap[7].x; 
}

#line 26 "/Engine/Private/ReflectionEnvironmentShared.ush"
float ComputeReflectionCaptureMipFromRoughness(float Roughness, float CubemapMaxMip)
{



	float LevelFrom1x1 = 1 - 1.2 * log2(max(Roughness, 0.001));
	return CubemapMaxMip - 1 - LevelFrom1x1;
}

#line 43 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkyLightReflection(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, OpaqueBasePass_Shared_Reflection_SkyLightParameters.x);
	float3 Reflection = TextureCubeSampleLevel(OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

	OutSkyAverageBrightness = GetSkyLightCubemapBrightness() * Luminance(View_SkyLightColor.rgb);
	return Reflection * View_SkyLightColor.rgb;
}

#line 84 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkySHDiffuse(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1.0f); 

	float3 Intermediate0, Intermediate1, Intermediate2;
	Intermediate0.x = dot(View_SkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View_SkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View_SkyIrradianceEnvironmentMap[2], NormalVector);

	float4 vB = NormalVector.xyzz * NormalVector.yzzx;
	Intermediate1.x = dot(View_SkyIrradianceEnvironmentMap[3], vB);
	Intermediate1.y = dot(View_SkyIrradianceEnvironmentMap[4], vB);
	Intermediate1.z = dot(View_SkyIrradianceEnvironmentMap[5], vB);

	float vC = NormalVector.x * NormalVector.x - NormalVector.y * NormalVector.y;
	Intermediate2 = View_SkyIrradianceEnvironmentMap[6].xyz * vC;


	return max(0, Intermediate0 + Intermediate1 + Intermediate2);
}

#line 110 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkySHDiffuseSimple(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1);

	float3 Intermediate0;
	Intermediate0.x = dot(View_SkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View_SkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View_SkyIrradianceEnvironmentMap[2], NormalVector);		


	return max(0, Intermediate0);
}

#line 203 "/Engine/Private/ReflectionEnvironmentShared.ush"
float ComputeMixingWeight(float IndirectIrradiance, float AverageBrightness, float Roughness)
{

	float MixingAlpha = smoothstep(0, 1, saturate(Roughness * View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.x + View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.y));





	float MixingWeight = IndirectIrradiance / max(AverageBrightness, .0001f);

	MixingWeight = min(MixingWeight, View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.z);

	return lerp(1.0f, MixingWeight, MixingAlpha);
}

#line 12 "/Engine/Private/ShadingModelsMaterial.ush"
void SetGBufferForShadingModel(
	in out FGBufferData GBuffer, 
	in out FMaterialPixelParameters MaterialParameters,
	FPixelMaterialInputs PixelMaterialInputs,
	const float Opacity,
	const float3 BaseColor,
	const float  Metallic,
	const float  Specular,
	const float Roughness,
	const float Anisotropy,
	const float3 SubsurfaceColor,
	const float SubsurfaceProfile,
	const float Dither,
	const uint ShadingModel)
{
	GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	GBuffer.WorldTangent = MaterialParameters.WorldTangent;
	GBuffer.BaseColor = BaseColor;
	GBuffer.Metallic = Metallic;
	GBuffer.Specular = Specular;
	GBuffer.Roughness = Roughness;
	GBuffer.Anisotropy = Anisotropy;
	GBuffer.ShadingModelID = ShadingModel;




	if (false)
	{
	}














#line  85 "/Engine/Private/ShadingModelsMaterial.ush"

#line 119 "/Engine/Private/ShadingModelsMaterial.ush"























#line 204 "/Engine/Private/ShadingModelsMaterial.ush"

}

#line 20 "/Engine/Private/DynamicLightingCommon.ush"
float RadialAttenuationMask(float3 WorldLightVector)
{
	float NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);
	return 1.0f - saturate(NormalizeDistanceSquared);
}

#line 25 "/Engine/Private/DynamicLightingCommon.ush"
float RadialAttenuation(float3 WorldLightVector, float FalloffExponent)
{

	return pow(RadialAttenuationMask(WorldLightVector), FalloffExponent);





















}

#line 58 "/Engine/Private/DynamicLightingCommon.ush"
float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}

#line 62 "/Engine/Private/DynamicLightingCommon.ush"
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}

#line 7 "/Engine/Private/CapsuleLightSampling.ush"
float SqrtOneMinusX(float x)
{
	return x < 0.01 ? 1 - x * (0.5 + x * 0.125) : sqrt(1 - x);
}

#line 14 "/Engine/Private/CapsuleLightSampling.ush"
struct FCapsuleSphericalBounds
{
	FSphericalRect SphericalRect;
	float3 ConeAxis;
	float ConeSinThetaMax2;
	float ConeSolidAngle;
};

#line 22 "/Engine/Private/CapsuleLightSampling.ush"
float GetCapsuleBoundsInversePdf(float3 Direction, FCapsuleSphericalBounds Bounds)
{
	if (Bounds.ConeSolidAngle < Bounds.SphericalRect.SolidAngle)
	{
		return Bounds.ConeSolidAngle;
	}
	float LocalDirZ = dot(Direction, Bounds.SphericalRect.Axis[2]);
	float DistanceSquared = Square(Bounds.SphericalRect.z0 / LocalDirZ);
	return GetSphericalRectInversePdf(Direction, DistanceSquared, Bounds.SphericalRect);
}

#line 34 "/Engine/Private/CapsuleLightSampling.ush"
float4 SampleCapsuleBounds(FCapsuleSphericalBounds Bounds, float2 E)
{
	if (Bounds.ConeSolidAngle < Bounds.SphericalRect.SolidAngle)
	{
		return float4(TangentToWorld(UniformSampleConeRobust(E, Bounds.ConeSinThetaMax2).xyz, Bounds.ConeAxis), Bounds.ConeSolidAngle);
	}
	else
	{
		FSphericalRectSample Result = UniformSampleSphericalRect(E, Bounds.SphericalRect);
		return float4(Result.Direction, Result.InvPdf);
	}
}

#line 48 "/Engine/Private/CapsuleLightSampling.ush"
FCapsuleSphericalBounds CapsuleGetSphericalBounds(float3 Origin, float3 Axis, float Radius, float Length)
{
	float h = dot(Axis, Origin);
	float3 ClosestPointOnAxis = Origin - Axis * h;

	float DistanceToAxisSqr = dot(ClosestPointOnAxis, ClosestPointOnAxis);
	float RadiusSqr = Pow2(Radius);

	if (DistanceToAxisSqr <= RadiusSqr)
	{

		float3 CapCenter = Origin - Axis * Length * 0.5 * sign(h);
		float LightDistanceSquared = dot(CapCenter, CapCenter);
		float SinThetaMax2 = saturate(RadiusSqr / LightDistanceSquared);

		FCapsuleSphericalBounds Result;
		Result.SphericalRect = (FSphericalRect)0;
		Result.SphericalRect.SolidAngle = (asfloat(0x7F800000)); 
		Result.ConeAxis = normalize(CapCenter);
		Result.ConeSinThetaMax2 = SinThetaMax2;
		Result.ConeSolidAngle = UniformConeSolidAngle(SinThetaMax2);
		return Result;
	}


	FRect Rect;
	Rect.Origin = Origin;
	Rect.Axis[1] = Axis;
	Rect.Axis[2] = normalize(-ClosestPointOnAxis);
	Rect.Axis[0] = cross(Rect.Axis[1], Rect.Axis[2]);

	float SinCylinderAngle = Radius * rsqrt(DistanceToAxisSqr);

	float RectRadius = Radius * rsqrt(1 - Pow2(SinCylinderAngle));

	float Extension[2];
	for (int i = 0; i < 2; i++)
	{
		float hi = Length * (i > 0 ? 0.5 : -0.5);
		float3 PointPos = Origin + Axis * hi;

		float InverseDist = rsqrt(dot(PointPos, PointPos));

		float SinSphereAngle = saturate(Radius * InverseDist);
		float CosSphereAngle = SqrtOneMinusX(Pow2(SinSphereAngle));

		float CosAxisAngle = -dot(Axis, PointPos) * InverseDist;
		CosAxisAngle = sign(CosAxisAngle * hi) * saturate(abs(CosAxisAngle));
		float SinAxisAngle = SqrtOneMinusX(Pow2(CosAxisAngle));

		float CosExtension = SinAxisAngle * CosSphereAngle + CosAxisAngle * SinSphereAngle;
		Extension[i] = Radius / CosExtension;
	}

	float Translate = 0.5 * (Extension[1] - Extension[0]);
	float Extend = 0.5 * (Extension[0] + Extension[1]);

	Rect.Origin += Translate * Rect.Axis[1];
	Rect.Extent = float2(RectRadius, 0.5 * Length + Extend);


	float3 R0 = Rect.Origin - Rect.Axis[1] * Rect.Extent.y;
	float3 R1 = Rect.Origin + Rect.Axis[1] * Rect.Extent.y;
	float InvDistR0 = rsqrt(dot(R0, R0));
	float InvDistR1 = rsqrt(dot(R1, R1));

	FCapsuleSphericalBounds Result;
	Result.SphericalRect = BuildSphericalRect(Rect);
	Result.ConeAxis = normalize(lerp(R0, R1, saturate(InvDistR1 / (InvDistR0 + InvDistR1))));
	Result.ConeSinThetaMax2 = saturate(0.5 - 0.5 * dot(R0, R1) * InvDistR0 * InvDistR1); 
	Result.ConeSolidAngle = UniformConeSolidAngle(Result.ConeSinThetaMax2);
	return Result;
}

#line 161 "/Engine/Private/CapsuleLightSampling.ush"
float CapsuleTest(float3 Rd, float3 Center, float3 Axis, float Radius2, float Length)
{

	float B = dot(Rd, Axis);
	float t = clamp(dot(Center, B * Rd - Axis) / (1 - B * B), -0.5 * Length, 0.5 * Length);
	float3 ToSphere = Center + t * Axis;
	float3 C = cross(Rd, ToSphere);
	return dot(C, C) <= Radius2 ? length(ToSphere) : -1.0;
}

#line 37 "/Engine/Private/CapsuleLightIntegrate.ush"
FAreaLightIntegrateContext CreateCapsuleIntegrateContext(float Roughness, float3 N, float3 V, FCapsuleLight Capsule, bool bInverseSquared )
{
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();

	float NoL;
	float Falloff;
	float LineCosSubtended = 1;







	[branch]
	if( Capsule.Length > 0 )
	{
		LineIrradiance( N, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float DistSqr = dot( Capsule.LightPos[0], Capsule.LightPos[0] );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );

		float3 L = Capsule.LightPos[0] * rsqrt( DistSqr );
		NoL = dot( N, L );
	}

	if( Capsule.Radius > 0 )
	{

		float SinAlphaSqr = saturate( Pow2( Capsule.Radius ) * Falloff );
		NoL = SphereHorizonCosWrap( NoL, SinAlphaSqr );
	}

	NoL = saturate( NoL );
	Falloff = bInverseSquared ? Falloff : 1;

	float3 ToLight = Capsule.LightPos[0];
	if( Capsule.Length > 0 )
	{
		float3 R = reflect( -V, N );









		ToLight = ClosestPointLineToRay( Capsule.LightPos[0], Capsule.LightPos[1], Capsule.Length, R );
	}

	float DistSqr = dot( ToLight, ToLight );
	float InvDist = rsqrt( DistSqr );
	float3 L = ToLight * InvDist;

	Roughness = max( Roughness, View_MinRoughness );
	float a = Pow2( Roughness );



	const float SizeFadesOutDiffuseMicroRefl = 20.0;

	Out.AreaLight.SphereSinAlpha = saturate( Capsule.Radius * InvDist * (1 - a) );
	Out.AreaLight.SphereSinAlphaSoft = saturate( Capsule.SoftRadius * InvDist );
	Out.AreaLight.LineCosSubtended = LineCosSubtended;
	Out.AreaLight.FalloffColor = 1;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, false);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, saturate(1.0f - max(Capsule.Length, Capsule.Radius) / SizeFadesOutDiffuseMicroRefl));
	Out.NoL = NoL;
	Out.Falloff = Falloff;	
	Out.L = L;
	return Out;
}

#line 118 "/Engine/Private/CapsuleLightIntegrate.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, bool bInverseSquared )
{
	GBuffer.Roughness = max( GBuffer.Roughness, View_MinRoughness );
	FAreaLightIntegrateContext Context = CreateCapsuleIntegrateContext(GBuffer.Roughness, N, V, Capsule, bInverseSquared);
	return IntegrateBxDF( GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow );
}

#line 125 "/Engine/Private/CapsuleLightIntegrate.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	Capsule.Radius = max( 1, Capsule.Radius );

	const float SphereArea = (4*PI) * Pow2( Capsule.Radius );
	const float CylinderArea = (2*PI) * Capsule.Radius * Capsule.Length;
	const float SurfaceArea = SphereArea + CylinderArea;
	const float SurfaceColor = 4.0 / SurfaceArea;

	float3 ToLight = 0.5 * ( Capsule.LightPos[0] + Capsule.LightPos[1] );
	float3 CapsuleAxis = normalize( Capsule.LightPos[1] - Capsule.LightPos[0] );

	float DistanceSqr = dot( ToLight, ToLight );
	float3 ConeAxis = ToLight * rsqrt( DistanceSqr );
	float SineConeSqr = saturate(Pow2(Capsule.Radius) / DistanceSqr);

	FCapsuleSphericalBounds CapsuleBounds = CapsuleGetSphericalBounds(ToLight, CapsuleAxis, Capsule.Radius, Capsule.Length);

	const uint NumSets = 3;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		16,	
	};

	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );

	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;



			float3 L, H;
			if( Set == 0 )
			{
				L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
				H = normalize(V + L);
			}
			else if( Set == 1 )
			{
				H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
				L = 2 * dot( V, H ) * H - V;
			}
			else
			{
















































				if( Capsule.Length > 0 )
				{
					float3 ToArea = SampleCapsuleBounds(CapsuleBounds, E).xyz;
					L = normalize( ToArea );
					H = normalize( V + L );
				}
				else
				{
					L = TangentToWorld( UniformSampleConeRobust( E, SineConeSqr).xyz, ConeAxis );
					H = normalize(V + L);
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{
				{
					if (CapsuleTest(L, ToLight, CapsuleAxis, Pow2(Capsule.Radius), Capsule.Length) > 0)
					{

						continue;
					}
				}

				float PDF[] =
				{
					NoL / PI,
					D_GGX(Pow4(GBuffer.Roughness), NoH) * NoH / (4 * VoH),
					rcp(GetCapsuleBoundsInversePdf(L, CapsuleBounds))
				};

				if( Capsule.Length == 0 )
				{
					PDF[2] = 1.0 / UniformConeSolidAngle(SineConeSqr);
				}


				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];

				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse		+= SurfaceColor * Weight * LightingSample.Diffuse;
				Lighting.Specular		+= SurfaceColor * Weight * LightingSample.Specular;
				Lighting.Transmission	+= SurfaceColor * Weight * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}

#line 68 "/Engine/Private/RectLightIntegrate.ush"
FAreaLightIntegrateContext CreateRectIntegrateContext( float Roughness, float3 N, float3 V, FRect Rect, FRectTexture SourceTexture )
{
	float NoL = 0;
	float Falloff = 0;

	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();


	float3 L = RectIrradianceLambert( N, Rect, Falloff, NoL );








#line 232 "/Engine/Private/RectLightIntegrate.ush"

	float3 FalloffColor = SampleSourceTexture( L, Rect, SourceTexture );

	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 1;
	Out.AreaLight.FalloffColor = FalloffColor;
	Out.AreaLight.Rect = Rect;
	Out.AreaLight.Texture = SourceTexture;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, true);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, 0.0);
	Out.L = L;
	Out.NoL = NoL;
	Out.Falloff = Falloff;

	return Out;
}

#line 251 "/Engine/Private/RectLightIntegrate.ush"
FDirectLighting IntegrateBxDF(FGBufferData GBuffer, float3 N, float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture)
{


	const float Distance = dot(Rect.Axis[2], Rect.Origin);


	FDirectLighting Out = (FDirectLighting)0;
	if (IsRectVisible(Rect) && Distance > 0.001f)
	{
		FAreaLightIntegrateContext Context = CreateRectIntegrateContext(GBuffer.Roughness, N, V, Rect, SourceTexture);
		GBuffer.Roughness = max(GBuffer.Roughness, 0.02);
		Out = IntegrateBxDF(GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow);
	}
	return Out;
}

#line 268 "/Engine/Private/RectLightIntegrate.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	const float SurfaceArea = 4 * Rect.Extent.x * Rect.Extent.y;
	const float SurfaceColor = 2.0 / SurfaceArea;


	if( dot( Rect.Axis[2], Rect.Origin ) < 0 )
		return Lighting;


	if (!IsRectVisible(Rect))
		return Lighting;

	FSphericalRect SphericalRect = BuildSphericalRect( Rect );

	const uint NumSets = 4;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		0,	
		16,	
	};

	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );

	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;



			float3 L, H;
			switch( Set )
			{
				case 0:
				{
					L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
					H = normalize( V + L );
					break;
				}
				case 1:
				{
					H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
					L = 2 * dot( V, H ) * H - V;
					break;
				}
				case 2:
				{
					float3 ToArea = Rect.Origin;
					ToArea += (E.x * 2 - 1) * Rect.Axis[0] * Rect.Extent.x;
					ToArea += (E.y * 2 - 1) * Rect.Axis[1] * Rect.Extent.y;
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
				case 3:
				{
					L = UniformSampleSphericalRect( E, SphericalRect ).Direction;
					H = normalize( V + L );
					break;
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{

				float t = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
				float3 PointOnPlane = L * t;

				float2 PointInRect;
				PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
				PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

				float2 RectUV = PointInRect / Rect.Extent * float2( 0.5, -0.5 ) + 0.5;
				float3 LightColor = SampleRectTexture(SourceTexture, RectUV, 0, true);

				if( Set == 0 || Set == 1 )
				{
					bool InExtentX = abs( PointInRect.x ) <= Rect.Extent.x;
					bool InExtentY = abs( PointInRect.y ) <= Rect.Extent.y;

					[branch]
					if( t < 0 || !InExtentX || !InExtentY )
					{

						continue;
					}
				}

				float PDF[] =
				{
					NoL * (1 / PI),
					D_GGX( Pow4(GBuffer.Roughness), NoH ) * NoH / (4 * VoH),
					dot( PointOnPlane, PointOnPlane ) / ( SurfaceArea * abs( dot( L, Rect.Axis[2] ) ) ),
					1.0 / SphericalRect.SolidAngle,
				};


				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];

				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse		+= ( LightColor * Weight ) * LightingSample.Diffuse;
				Lighting.Specular		+= ( LightColor * Weight ) * LightingSample.Specular;
				Lighting.Transmission	+= ( LightColor * Weight ) * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}

#line 53 "/Engine/Private/DeferredLightingCommon.ush"
float DistanceFromCameraFade(float SceneDepth, FDeferredLightData LightData)
{

	float Fade = saturate(SceneDepth * LightData.DistanceFadeMAD.x + LightData.DistanceFadeMAD.y);
	return Fade * Fade;
}

#line 99 "/Engine/Private/DeferredLightingCommon.ush"
void GetShadowTermsBase(
	float SceneDepth, 
	float4 PrecomputedShadowFactors, 
	FDeferredLightData LightData, 
	float4 LightAttenuation, 
	inout FShadowTerms OutShadow)
{
	[branch]
	if (LightData.ShadowedBits)
	{






		float UsesStaticShadowMap = dot(LightData.ShadowMapChannelMask, float4(1, 1, 1, 1));
		float StaticShadowing = lerp(1, dot(PrecomputedShadowFactors, LightData.ShadowMapChannelMask), UsesStaticShadowMap);




		if (LightData.bRadialLight || 0)
		{


			OutShadow.SurfaceShadow = LightAttenuation.z * StaticShadowing;


			OutShadow.TransmissionShadow = LightAttenuation.w * StaticShadowing;

			OutShadow.TransmissionThickness = LightAttenuation.w;
		}
		else
		{




			float DynamicShadowFraction = DistanceFromCameraFade(SceneDepth, LightData);

			OutShadow.SurfaceShadow = lerp(LightAttenuation.x, StaticShadowing, DynamicShadowFraction);

			OutShadow.TransmissionShadow = min(lerp(LightAttenuation.y, StaticShadowing, DynamicShadowFraction), LightAttenuation.w);

			OutShadow.SurfaceShadow *= LightAttenuation.z;
			OutShadow.TransmissionShadow *= LightAttenuation.z;


			OutShadow.TransmissionThickness = min(LightAttenuation.y, LightAttenuation.w);
		}
	}

	OutShadow.HairTransmittance = LightData.HairTransmittance;
	OutShadow.HairTransmittance.OpaqueVisibility = OutShadow.SurfaceShadow;
}

#line 156 "/Engine/Private/DeferredLightingCommon.ush"
void ApplyContactShadowWithShadowTerms(
	float SceneDepth, 
	uint ShadingModelID, 
	float ContactShadowOpacity, 
	FDeferredLightData LightData, 
	float3 TranslatedWorldPosition, 
	float3 L, 
	float Dither, 
	inout FShadowTerms OutShadow)
{
#line 229 "/Engine/Private/DeferredLightingCommon.ush"

}

#line 232 "/Engine/Private/DeferredLightingCommon.ush"
void GetShadowTerms(
	float SceneDepth,
	float4 PrecomputedShadowFactors,
	uint ShadingModelID,
	float ContactShadowOpacity,
	FDeferredLightData LightData,
	float3 TranslatedWorldPosition,
	float3 L,
	float4 LightAttenuation,
	float Dither,
	inout FShadowTerms OutShadow)
{

	GetShadowTermsBase(SceneDepth, PrecomputedShadowFactors, LightData, LightAttenuation, OutShadow);


	ApplyContactShadowWithShadowTerms (SceneDepth, ShadingModelID, ContactShadowOpacity, LightData, TranslatedWorldPosition, L, Dither, OutShadow);
}

#line 251 "/Engine/Private/DeferredLightingCommon.ush"
float GetLocalLightAttenuation(
	float3 TranslatedWorldPosition, 
	FDeferredLightData LightData, 
	inout float3 ToLight, 
	inout float3 L)
{
	ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;

	float DistanceSqr = dot( ToLight, ToLight );
	L = ToLight * rsqrt( DistanceSqr );

	float LightMask;
	if (LightData.bInverseSquared)
	{
		LightMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );








	}
	else
	{
		LightMask = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}

	if (LightData.bSpotLight)
	{
		LightMask *= SpotAttenuation(L, -LightData.Direction, LightData.SpotAngles);
	}

	if( LightData.bRectLight )
	{

		LightMask = dot( LightData.Direction, L ) < 0 ? 0 : LightMask;
	}

	return LightMask;
}

#line 296 "/Engine/Private/DeferredLightingCommon.ush"
FRect GetRect(float3 ToLight, FDeferredLightData LightData)
{
	return GetRect(
		ToLight, 
		LightData.Direction, 
		LightData.Tangent, 
		LightData.SourceRadius, 
		LightData.SourceLength, 
		LightData.RectLightData.BarnCosAngle, 
		LightData.RectLightData.BarnLength,
		1);
}

#line 309 "/Engine/Private/DeferredLightingCommon.ush"
FCapsuleLight GetCapsule( float3 ToLight, FDeferredLightData LightData )
{
	FCapsuleLight Capsule;
	Capsule.Length = LightData.SourceLength;
	Capsule.Radius = LightData.SourceRadius;
	Capsule.SoftRadius = LightData.SoftSourceRadius;
	Capsule.DistBiasSqr = 1;
	Capsule.LightPos[0] = ToLight - 0.5 * Capsule.Length * LightData.Tangent;
	Capsule.LightPos[1] = ToLight + 0.5 * Capsule.Length * LightData.Tangent;
	return Capsule;
}

#line 321 "/Engine/Private/DeferredLightingCommon.ush"
FLightAccumulator AccumulateDynamicLighting(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion,
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = (FLightAccumulator)0;

	float3 V = -CameraVector;
	float3 N = GBuffer.WorldNormal;
	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		N = OctahedronToUnitVector(oct1);			
	}

	float3 L = LightData.Direction;	
	float3 ToLight = L;
	float3 MaskedLightColor = LightData.Color;
	float LightMask = 1;
	if (LightData.bRadialLight)
	{
		LightMask = GetLocalLightAttenuation( TranslatedWorldPosition, LightData, ToLight, L );




		MaskedLightColor *= LightMask;
	}

	LightAccumulator.EstimatedCost += 0.3f;		

	[branch]
	if( LightMask > 0 )
	{
		FShadowTerms Shadow;
		Shadow.SurfaceShadow = AmbientOcclusion;
		Shadow.TransmissionShadow = 1;
		Shadow.TransmissionThickness = 1;
		Shadow.HairTransmittance.OpaqueVisibility = 1;
		const float ContactShadowOpacity = GBuffer.CustomData.a;
		GetShadowTerms(GBuffer.Depth, GBuffer.PrecomputedShadowFactors, GBuffer.ShadingModelID, ContactShadowOpacity,
			LightData, TranslatedWorldPosition, L, LightAttenuation, Dither, Shadow);
		SurfaceShadow = Shadow.SurfaceShadow;

		LightAccumulator.EstimatedCost += 0.3f;		

#line 398 "/Engine/Private/DeferredLightingCommon.ush"

		[branch]
		if( Shadow.SurfaceShadow + Shadow.TransmissionShadow > 0 )
		{
			const bool bNeedsSeparateSubsurfaceLightAccumulation = UseSubsurfaceProfile(GBuffer.ShadingModelID);

#line 422 "/Engine/Private/DeferredLightingCommon.ush"

			FDirectLighting Lighting;

			if (LightData.bRectLight)
			{
				FRect Rect = GetRect( ToLight, LightData );
				const FRectTexture SourceTexture = ConvertToRectTexture(LightData);




					Lighting = IntegrateBxDF( GBuffer, N, V, Rect, Shadow, SourceTexture);

			}
			else
			{
				FCapsuleLight Capsule = GetCapsule( ToLight, LightData );




					Lighting = IntegrateBxDF( GBuffer, N, V, Capsule, Shadow, LightData.bInverseSquared );

			}

			Lighting.Specular *= LightData.SpecularScale;
			Lighting.Diffuse  *= LightData.DiffuseScale;





			LightAccumulator_AddSplit( LightAccumulator, Lighting.Diffuse, Lighting.Specular, Lighting.Diffuse, MaskedLightColor * Shadow.SurfaceShadow, bNeedsSeparateSubsurfaceLightAccumulation );
			LightAccumulator_AddSplit( LightAccumulator, Lighting.Transmission, 0.0f, Lighting.Transmission, MaskedLightColor * Shadow.TransmissionShadow, bNeedsSeparateSubsurfaceLightAccumulation );

			LightAccumulator.EstimatedCost += 0.4f;		

		}

	}
	return LightAccumulator;
}

#line 466 "/Engine/Private/DeferredLightingCommon.ush"
FDeferredLightingSplit GetDynamicLightingSplit(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, 
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = AccumulateDynamicLighting(TranslatedWorldPosition, CameraVector, GBuffer, AmbientOcclusion, LightData, LightAttenuation, Dither, SVPos, SurfaceShadow);
	return LightAccumulator_GetResultSplit(LightAccumulator);
}

#line 15 "/Engine/Private/LightGridCommon.ush"
uint GetCulledLightDataGrid(uint GridIndex)
{

	return OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit[GridIndex];



}

#line 24 "/Engine/Private/LightGridCommon.ush"
struct FLightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};

#line 31 "/Engine/Private/LightGridCommon.ush"
FLightGridData GetLightGridData()
{
	FLightGridData Result;
	Result.LightGridPixelSizeShift = OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;
	Result.LightGridZParams = OpaqueBasePass_Shared_Forward_LightGridZParams;
	Result.CulledGridSize = OpaqueBasePass_Shared_Forward_CulledGridSize;
	return Result;
}

#line 40 "/Engine/Private/LightGridCommon.ush"
uint3 ComputeLightGridCellCoordinate(uint2 PixelPos, float SceneDepth)
{
	const FLightGridData GridData = GetLightGridData();
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	return uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
}

#line 48 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint3 GridCoordinate, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData();
	uint Index = (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;

	Index += (EyeIndex == 0) ? 0 : OpaqueBasePass_Shared_Forward_CulledBufferOffsetISR;

	return Index;
}

#line 58 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	return ComputeLightGridCellIndex(ComputeLightGridCellCoordinate(PixelPos, SceneDepth), EyeIndex);
}

#line 76 "/Engine/Private/LightGridCommon.ush"
uint GetMaxLightsPerCell()
{
	return OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell;
}

#line 91 "/Engine/Private/LightGridCommon.ush"
void UnpackCulledLightsGridHeader0(uint PackedData0, out uint NumVisibleLights, out uint NumVisibleMegaLights)
{
	NumVisibleLights = PackedData0 & 0xFFFF;
	NumVisibleMegaLights = (PackedData0 >> 16) & 0xFFFF;
}

#line 97 "/Engine/Private/LightGridCommon.ush"
void UnpackCulledLightsGridHeader1(uint PackedData1, out uint CulledLightDataStart, out bool bHasRectLight, out bool bHasTexturedLight)
{
	CulledLightDataStart = (PackedData1 & 0x3FFFFFFF);
	bHasRectLight = (PackedData1 & 0x40000000) != 0;
	bHasTexturedLight = (PackedData1 & 0x80000000) != 0;
}

#line 104 "/Engine/Private/LightGridCommon.ush"
struct FCulledLightsGridHeader
{
	uint NumLights;
	uint NumMegaLights;
	uint DataStartIndex;
	uint MegaLightsDataStartIndex;
	bool bHasRectLight;
	bool bHasTexturedLight;
};

#line 114 "/Engine/Private/LightGridCommon.ush"
FCulledLightsGridHeader GetCulledLightsGridHeader(uint GridIndex)
{
	FCulledLightsGridHeader Result;

	const uint PackedData0 = OpaqueBasePass_Shared_Forward_NumCulledLightsGrid[GridIndex * 2 + 0];
	UnpackCulledLightsGridHeader0(PackedData0, Result.NumLights, Result.NumMegaLights);
	Result.NumLights = min(Result.NumLights, OpaqueBasePass_Shared_Forward_NumLocalLights);
	Result.NumMegaLights = min(Result.NumMegaLights, OpaqueBasePass_Shared_Forward_NumLocalLights);

	const uint PackedData1 = OpaqueBasePass_Shared_Forward_NumCulledLightsGrid[GridIndex * 2 + 1];
	UnpackCulledLightsGridHeader1(PackedData1, Result.DataStartIndex, Result.bHasRectLight, Result.bHasTexturedLight);

	Result.MegaLightsDataStartIndex = Result.DataStartIndex + Result.NumLights - Result.NumMegaLights;

	return Result;
}

#line 131 "/Engine/Private/LightGridCommon.ush"
struct FCulledReflectionCapturesGridHeader
{
	uint NumReflectionCaptures;
	uint DataStartIndex;
};

#line 137 "/Engine/Private/LightGridCommon.ush"
FCulledReflectionCapturesGridHeader GetCulledReflectionCapturesGridHeader(uint GridIndex)
{
	FCulledReflectionCapturesGridHeader Result;
	const uint NumCulledEntryIndex = (OpaqueBasePass_Shared_Forward_NumGridCells + GridIndex) * 2;
	Result.NumReflectionCaptures = min(OpaqueBasePass_Shared_Forward_NumCulledLightsGrid[NumCulledEntryIndex + 0], OpaqueBasePass_Shared_Forward_NumReflectionCaptures);
	Result.DataStartIndex = OpaqueBasePass_Shared_Forward_NumCulledLightsGrid[NumCulledEntryIndex + 1];
	return Result;
}

#line 146 "/Engine/Private/LightGridCommon.ush"
FDirectionalLightData GetDirectionalLightData()
{
	FDirectionalLightData Result;
	Result.HasDirectionalLight						= OpaqueBasePass_Shared_Forward_HasDirectionalLight;
	Result.DirectionalLightSceneInfoExtraDataPacked = OpaqueBasePass_Shared_Forward_DirectionalLightSceneInfoExtraDataPacked;
	Result.DirectionalLightDistanceFadeMAD			= OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
	Result.DirectionalLightColor					= OpaqueBasePass_Shared_Forward_DirectionalLightColor;
	Result.DirectionalLightDirection				= OpaqueBasePass_Shared_Forward_DirectionalLightDirection;
	Result.DirectionalLightSourceRadius				= OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius;
	Result.DirectionalLightSoftSourceRadius			= OpaqueBasePass_Shared_Forward_DirectionalLightSoftSourceRadius;
	Result.DirectionalLightSpecularScale			= OpaqueBasePass_Shared_Forward_DirectionalLightSpecularScale;
	Result.DirectionalLightDiffuseScale				= OpaqueBasePass_Shared_Forward_DirectionalLightDiffuseScale;
	Result.LightFunctionAtlasLightIndex				= OpaqueBasePass_Shared_Forward_LightFunctionAtlasLightIndex;
	Result.bAffectsTranslucentLighting				= OpaqueBasePass_Shared_Forward_bAffectsTranslucentLighting;
	return Result;
}

#line 163 "/Engine/Private/LightGridCommon.ush"
FForwardLightData GetForwardLightData_Internal(
	uint LightIndex, uint EyeIndex,
	float4 InData0, float4 InData1, float4 InData2, float4 InData3, float4 InData4, float4 InData5)
{
	FForwardLightData Out = (FForwardLightData)0;

	Out.LightPositionAndInvRadius					= InData0;
	Out.LightColorAndIdAndFalloffExponent			= InData1;
	Out.LightDirectionAndSceneInfoExtraDataPacked	= InData2;
	Out.SpotAnglesAndSourceRadiusPacked				= InData3;
	Out.LightTangentAndIESDataAndSpecularScale		= InData4;
	Out.RectData									= InData5.xyz;

	Out.VirtualShadowMapId							= int(asuint(InData5.w) >> 16U) - 1;
	Out.PrevLocalLightIndex							= int(asuint(InData5.w) & 0xFFFF) - 1;
	Out.LightSceneId								= int(Out.LightColorAndIdAndFalloffExponent.z);


	if (EyeIndex != 0)
	{
		Out.LightPositionAndInvRadius.xyz += OpaqueBasePass_Shared_Forward_PreViewTranslationOffsetISR.xyz;
	}


	return Out;
}

#line 190 "/Engine/Private/LightGridCommon.ush"
FForwardLightData GetForwardLightData(uint LightIndex, uint EyeIndex)
{
	const uint LightBaseIndex = LightIndex * 6;

	return GetForwardLightData_Internal(
		LightIndex, EyeIndex,
		OpaqueBasePass_Shared_Forward_ForwardLightBuffer[LightBaseIndex + 0],
		OpaqueBasePass_Shared_Forward_ForwardLightBuffer[LightBaseIndex + 1],
		OpaqueBasePass_Shared_Forward_ForwardLightBuffer[LightBaseIndex + 2],
		OpaqueBasePass_Shared_Forward_ForwardLightBuffer[LightBaseIndex + 3],
		OpaqueBasePass_Shared_Forward_ForwardLightBuffer[LightBaseIndex + 4],
		OpaqueBasePass_Shared_Forward_ForwardLightBuffer[LightBaseIndex + 5]);
}

#line 204 "/Engine/Private/LightGridCommon.ush"
FLocalLightData GetLocalLightData(uint LightIndex, uint EyeIndex)
{
	FLocalLightData Out = (FLocalLightData)0;
	Out.Internal = GetForwardLightData(LightIndex, EyeIndex);
	return Out;
}

#line 217 "/Engine/Private/LightGridCommon.ush"
FLocalLightData GetLocalLightDataFromGrid(uint GridIndex, uint EyeIndex)
{
	uint LocalLightIndex = GetCulledLightDataGrid(GridIndex);
	return GetLocalLightData(LocalLightIndex, EyeIndex);
}

#line 56 "/Engine/Private/ForwardLightingCommon.ush"
void UpdateNearestSample(float Z, float2 UV, float FullResZ, inout float MinDist, inout float2 NearestUV)
{
    float DepthDelta = abs(Z - FullResZ);

	[flatten]
    if (DepthDelta < MinDist)
    {
        MinDist = DepthDelta;
        NearestUV = UV;
    }
}

#line 68 "/Engine/Private/ForwardLightingCommon.ush"
float2 CalculateNearestResolvedDepthScreenUV(float2 ScreenUV, float SceneDepth)
{
	float2 EffectiveScreenUV = ScreenUV;

	if (View_NumSceneColorMSAASamples > 1)
	{
		int2 IntScreenUV = int2(trunc(ScreenUV * View_BufferSizeAndInvSize.xy));

		float DeferredShadowingDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV, 0)).r);
		float RelativeDepthThreshold = .01f;




		if (abs(DeferredShadowingDepth - SceneDepth) / SceneDepth > RelativeDepthThreshold)
		{
			float2 TexelSize = View_BufferSizeAndInvSize.zw;
			float MinDist = 1.e8f;

			float2 LeftUV = ScreenUV + float2(-TexelSize.x, 0);
			float LeftDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x - 1, IntScreenUV.y, 0)).r);
			UpdateNearestSample(LeftDepth, LeftUV, SceneDepth, MinDist, EffectiveScreenUV);

			float2 UpUV = ScreenUV + float2(0, TexelSize.y);
			float UpDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x, IntScreenUV.y + 1, 0)).r);
			UpdateNearestSample(UpDepth, UpUV, SceneDepth, MinDist, EffectiveScreenUV);

			float2 RightUV = ScreenUV + float2(TexelSize.x, 0);
			float RightDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x + 1, IntScreenUV.y, 0)).r);
			UpdateNearestSample(RightDepth, RightUV, SceneDepth, MinDist, EffectiveScreenUV);

			float2 BottomUV = ScreenUV + float2(0, -TexelSize.y);
			float BottomDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x, IntScreenUV.y - 1, 0)).r);
			UpdateNearestSample(BottomDepth, BottomUV, SceneDepth, MinDist, EffectiveScreenUV);
		}
	}

	return EffectiveScreenUV;
}

#line 108 "/Engine/Private/ForwardLightingCommon.ush"
float4 GetForwardDynamicShadowFactors(float2 ScreenUV)
{
	int2 IntScreenUV = int2(trunc(ScreenUV * View_BufferSizeAndInvSize.xy));
	float4 Value = 1.0f;

	[branch]
	if (OpaqueBasePass_UseForwardScreenSpaceShadowMask)
	{
		Value = OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture.Load(int3(IntScreenUV, 0));
	}
	return DecodeLightAttenuation(Value);
}

#line 121 "/Engine/Private/ForwardLightingCommon.ush"
float GetIndirectOcclusion(float2 ScreenUV, bool bHasDynamicIndirectShadowCasterRepresentation)
{
	float IndirectOcclusion;

	uint IndirectOcclusionWidth, IndirectOcclusionHeight;
	OpaqueBasePass_IndirectOcclusionTexture.GetDimensions(IndirectOcclusionWidth, IndirectOcclusionHeight);

    int2 IntScreenUV = int2(trunc(ScreenUV * float2(IndirectOcclusionWidth, IndirectOcclusionHeight)));
	IndirectOcclusion = OpaqueBasePass_IndirectOcclusionTexture.Load(int3(IntScreenUV, 0)).x;


	IndirectOcclusion = lerp(1, IndirectOcclusion, bHasDynamicIndirectShadowCasterRepresentation ? View_IndirectCapsuleSelfShadowingIntensity : 1);

	return IndirectOcclusion;
}

#line 137 "/Engine/Private/ForwardLightingCommon.ush"
FDeferredLightingSplit GetForwardDirectLightingSplit(
	uint2 PixelPos,
	uint GridIndex, float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBufferData, float2 ScreenUV, uint PrimitiveId, uint EyeIndex, float Dither, 
	float InDirectionalLightCloudShadow, float3 InDirectionalLightAtmosphereTransmittance, inout float OutDirectionalLightShadow,
	bool bSeparateMainDirLightLuminance, inout float3 SeparatedMainDirLightLuminance, bool bSkipDirLightVirtualShadowMapEvaluation)
{
	float4 DynamicShadowFactors = 1;


		DynamicShadowFactors = GetForwardDynamicShadowFactors(ScreenUV);


	FDeferredLightingSplit DirectLighting;
	DirectLighting.DiffuseLighting = 0;
	DirectLighting.SpecularLighting = 0;
	DirectLighting.LightingLuminance = 0;

	float SpecularScale = 1;





	uint LightingChannelMask = GetPrimitive_LightingChannelMask(PrimitiveId);

	const FDirectionalLightData DirectionalLightData = GetDirectionalLightData();

	[branch]
	if (DirectionalLightData.HasDirectionalLight



		)
	{
		float4 PreviewShadowMapChannelMask = 1;
		uint  DirLightingChannelMask = 0x7;
		FDeferredLightData LightData = ConvertToDeferredLight(DirectionalLightData, SpecularScale, PreviewShadowMapChannelMask, DirLightingChannelMask);











			float DynamicShadowing = dot(PreviewShadowMapChannelMask, DynamicShadowFactors);




			float PerObjectShadowing = LightData.DistanceFadeMAD.y < 0.0f ? 1.0f : DynamicShadowing;
			float WholeSceneShadowing = LightData.DistanceFadeMAD.y < 0.0f ? DynamicShadowing : 1.0f;

			float4 LightAttenuation = float4(WholeSceneShadowing.xx, PerObjectShadowing.xx);
#line 240 "/Engine/Private/ForwardLightingCommon.ush"


		FDeferredLightingSplit NewLighting = GetDynamicLightingSplit(TranslatedWorldPosition, -CameraVector, GBufferData, 1, LightData, LightAttenuation, Dither, uint2(0,0), OutDirectionalLightShadow);

		[flatten]
		if (DirLightingChannelMask & LightingChannelMask)
		{






			NewLighting.DiffuseLighting.rgb *= InDirectionalLightAtmosphereTransmittance;
			NewLighting.SpecularLighting.rgb *= InDirectionalLightAtmosphereTransmittance;
			NewLighting.LightingLuminance *= Luminance(InDirectionalLightAtmosphereTransmittance);

			if (bSeparateMainDirLightLuminance)
			{
				SeparatedMainDirLightLuminance += NewLighting.DiffuseLighting.rgb;
				SeparatedMainDirLightLuminance += NewLighting.SpecularLighting.rgb;
			}
			else
			{
				DirectLighting.DiffuseLighting += NewLighting.DiffuseLighting;
				DirectLighting.SpecularLighting += NewLighting.SpecularLighting;
				DirectLighting.LightingLuminance += NewLighting.LightingLuminance;
			}
		}
	}



	const FCulledLightsGridHeader CulledLightsGridHeader = GetCulledLightsGridHeader(GridIndex);




	const uint NumLightsInGridCell = min(CulledLightsGridHeader.NumLights, GetMaxLightsPerCell());

	[loop]
	for (uint GridLightListIndex = 0; GridLightListIndex < NumLightsInGridCell; GridLightListIndex++)
	{
		float4 PreviewShadowMapChannelMask = 1;
		uint  LocalLightingChannelMask = 0x7;
		const FLocalLightData LocalLight = GetLocalLightDataFromGrid(CulledLightsGridHeader.DataStartIndex + GridLightListIndex, EyeIndex);








		FDeferredLightData LightData = ConvertToDeferredLight(LocalLight, SpecularScale, PreviewShadowMapChannelMask, LocalLightingChannelMask);


		LightData.bRectLight = LightData.bRectLight && 0;










		float DynamicShadowing = dot(PreviewShadowMapChannelMask, DynamicShadowFactors);
		float4 LightAttenuation = float4(1, 1, DynamicShadowing.x, DynamicShadowing.x);

#line 347 "/Engine/Private/ForwardLightingCommon.ush"


		float SurfaceShadow = 1.0f;
		FDeferredLightingSplit NewLighting = GetDynamicLightingSplit(TranslatedWorldPosition, -CameraVector, GBufferData, 1, LightData, LightAttenuation, Dither, uint2(0,0), SurfaceShadow);

		[flatten]
		if (LocalLightingChannelMask & LightingChannelMask)
		{
			DirectLighting.DiffuseLighting += NewLighting.DiffuseLighting;
			DirectLighting.SpecularLighting += NewLighting.SpecularLighting;
		}
	}




	if (OpaqueBasePass_Shared_Forward_DirectLightingShowFlag == 0)
	{
		DirectLighting.DiffuseLighting = 0.0f;
		DirectLighting.SpecularLighting = 0.0f;
	}

	return DirectLighting;
}

#line 12 "/Engine/Private/ReflectionEnvironmentComposite.ush"
float3 CompositeReflectionCapturesAndSkylightTWS(
	float CompositeAlpha, 
	float3 TranslatedWorldPosition, 
	float3 RayDirection, 
	float Roughness, 
	float IndirectIrradiance, 
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex, 
	int SingleCaptureIndex,
	bool bCompositeSkylight)
{
	float Mip = ComputeReflectionCaptureMipFromRoughness(Roughness, View_ReflectionCubemapMaxMip);
	float4 ImageBasedReflections = float4(0, 0, 0, CompositeAlpha);
	float2 CompositedAverageBrightness = float2(0.0f, 1.0f);

#line 111 "/Engine/Private/ReflectionEnvironmentComposite.ush"


	float3 ProjectedCaptureVector = RayDirection;

	FDFVector3 SingleCaptureWorldPosition = MakeDFVector3( ReflectionCaptureSM5_PositionHighAndRadius[ SingleCaptureIndex ].xyz,  ReflectionCaptureSM5_PositionLow[ SingleCaptureIndex ].xyz);
	float3 SingleCaptureTranslatedWorldPosition = DFFastAddDemote(SingleCaptureWorldPosition, ResolvedView.PreViewTranslation);
	float SingleCaptureRadius =  ReflectionCaptureSM5_PositionHighAndRadius[ SingleCaptureIndex ].w;

	float4 SingleCaptureOffsetAndAverageBrightness =  ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[ SingleCaptureIndex ];
	float SingleCaptureBrightness =  ReflectionCaptureSM5_CaptureProperties[ SingleCaptureIndex ].x;
	float SingleCaptureArrayIndex =  ReflectionCaptureSM5_CaptureProperties[ SingleCaptureIndex ].y;


#line 136 "/Engine/Private/ReflectionEnvironmentComposite.ush"


	float4 Sample = TextureCubeArraySampleLevel(OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, ProjectedCaptureVector, SingleCaptureArrayIndex, Mip);

	Sample.rgb *= SingleCaptureBrightness;
	ImageBasedReflections = float4(Sample.rgb, 1 - Sample.a);

	float AverageBrightness = SingleCaptureOffsetAndAverageBrightness.w;
	CompositedAverageBrightness.x += AverageBrightness * CompositedAverageBrightness.y;
	CompositedAverageBrightness.y = 0;



	ImageBasedReflections.rgb *= View_PrecomputedIndirectSpecularColorScale;
	CompositedAverageBrightness.x *= Luminance( View_PrecomputedIndirectSpecularColorScale );



	[branch]  
	if (OpaqueBasePass_Shared_Reflection_SkyLightParameters.y > 0 && bCompositeSkylight)
	{
		float SkyAverageBrightness = 1.0f;




			float3 SkyLighting = GetSkyLightReflection(RayDirection, Roughness, SkyAverageBrightness);



		bool bNormalize = OpaqueBasePass_Shared_Reflection_SkyLightParameters.z < 1 && 1;

		[flatten]
		if (bNormalize)
		{
			ImageBasedReflections.rgb += ImageBasedReflections.a * SkyLighting * IndirectSpecularOcclusion;
			CompositedAverageBrightness.x += SkyAverageBrightness * CompositedAverageBrightness.y;
		}
		else
		{
			ExtraIndirectSpecular += SkyLighting * IndirectSpecularOcclusion;
		}
	}



	ImageBasedReflections.rgb *= ComputeMixingWeight(IndirectIrradiance, CompositedAverageBrightness.x, Roughness);


	ImageBasedReflections.rgb += ImageBasedReflections.a * ExtraIndirectSpecular;

	return ImageBasedReflections.rgb;
}

#line 454 "/Engine/Private/ForwardLightingCommon.ush"
float3 GetImageBasedReflectionSpecular(FMaterialPixelParameters MaterialParameters, float3 RayDirection, float Roughness, float IndirectIrradiance, uint GridIndex, int SingleCaptureIndex)
{
	float3 SpecularIBL;
	bool bUseLumenFrontLayerReflection = false;

#line 487 "/Engine/Private/ForwardLightingCommon.ush"

	{
		FCulledReflectionCapturesGridHeader CulledReflectionCapturesGridHeader = GetCulledReflectionCapturesGridHeader(GridIndex);

		const bool bCompositeSkylight = true;
		SpecularIBL = CompositeReflectionCapturesAndSkylightTWS(
			1.0f, 
			MaterialParameters.WorldPosition_CamRelative, 
			RayDirection, 
			Roughness, 
			IndirectIrradiance, 
			1.0f, 
			0.0f, 
			CulledReflectionCapturesGridHeader.NumReflectionCaptures, 
			CulledReflectionCapturesGridHeader.DataStartIndex, 
			SingleCaptureIndex,
			bCompositeSkylight);
	}

#line 546 "/Engine/Private/ForwardLightingCommon.ush"


	float3 SpecularLighting = SpecularIBL.rgb;














	return SpecularLighting;
}

#line 566 "/Engine/Private/ForwardLightingCommon.ush"
float3 GetImageBasedReflectionLighting(FMaterialPixelParameters MaterialParameters, float Roughness, float3 SpecularColor, float IndirectIrradiance, uint GridIndex, int SingleCaptureIndex)
{
	float3 N = MaterialParameters.WorldNormal;
	float3 V = MaterialParameters.CameraVector;

	float3 RayDirection = 2 * dot(V, N) * N - V;
	float NoV = saturate(dot(N, V));

	const float3 SpecularLighting = GetImageBasedReflectionSpecular(MaterialParameters, RayDirection, Roughness, IndirectIrradiance, GridIndex, SingleCaptureIndex);




	SpecularColor = EnvBRDFApprox(SpecularColor, Roughness, NoV);

	return SpecularLighting * SpecularColor;
}

#line 14 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
struct FLocalFogVolumeGPUInstanceData
{
	float3x3	PreTranslatedInvTransform;
	float3		TranslatedWorlPos;
	float		UniformScale;
	float		UniformScaleInv;		

	float		RadialFogExtinction;
	float		HeightFogExtinction;
	float		HeightFogFalloff;
	float		HeightFogOffset;

	float3		Emissive;
	float3		Albedo;
	float		PhaseG;
};

#line 84 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
FLocalFogVolumeGPUInstanceData GetLocalFogVolumeGPUInstanceData(uint Index)
{
	FLocalFogVolumeGPUInstanceData Data;
	uint Offset = Index * 3;

	float4 Data0 = OpaqueBasePass_Shared_LFV_LocalFogVolumeInstances[Offset + 0];
	float4 Data1 = OpaqueBasePass_Shared_LFV_LocalFogVolumeInstances[Offset + 1];
	float4 Data2 = OpaqueBasePass_Shared_LFV_LocalFogVolumeInstances[Offset + 2];



	Data.TranslatedWorlPos	= Data0.xyz;
	Data.UniformScale		= Data0.w;
	Data.UniformScaleInv	= 1.0f / Data.UniformScale;


	float3 XVec;
	float3 YVec;
	XVec.xy		= UnpackFloat2FromUInt(asuint(Data1.x));
	float2 Temp	= UnpackFloat2FromUInt(asuint(Data1.y));
	XVec.z		= Temp.x;
	YVec.x		= Temp.y;
	YVec.yz		= UnpackFloat2FromUInt(asuint(Data1.z));

	float3 ZVec = cross(XVec, YVec);

	Data.PreTranslatedInvTransform = float3x3(float3(XVec * Data.UniformScaleInv), float3(YVec * Data.UniformScaleInv), float3(ZVec * Data.UniformScaleInv));


	float3 Data2X			= UnpackR11G11B10F(asuint(Data2.x));
	Data.RadialFogExtinction= Data2X.x;
	Data.HeightFogExtinction= Data2X.y;
	Data.HeightFogFalloff	= Data2X.z;

	uint PackEmissiveData   = asuint(Data2.y);
	if (PackEmissiveData > 0)
	{
		Data.Emissive = UnpackR11G11B10F(PackEmissiveData);
	}
	else
	{
		Data.Emissive = 0.0f.xxx;
	}

	float4 Data2Z			= UnpackRGBA8(asuint(Data2.z));
	Data.Albedo				= Data2Z.rgb;
	Data.PhaseG				= Data2Z.a;
	Data.HeightFogOffset	= Data2.w;

	return Data;
}

#line 160 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
struct FFogData
{
	float IntegratedLuminanceFactor;
	float Coverage;
};

#line 166 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
FFogData LocalFogVolumeEvaluateAnalyticalIntegral(FLocalFogVolumeGPUInstanceData FogInstance, float3 RayStartU, float3 RayDirU, float RayLengthU)
{
	FFogData FogData;

	float RadialOpticalDepth = 0.0f;
	float HeightOpticalDepth = 0.0f;

	if (FogInstance.RadialFogExtinction > 0.0f)
	{




		float3 SphereCenter = 0.0f;
		float3 VolumeCenterToRayO = (RayStartU - SphereCenter);

		float b = dot(RayDirU, VolumeCenterToRayO);
		float c = dot(VolumeCenterToRayO, VolumeCenterToRayO) - 1.0f;
		float h = b * b - c;

		if (h >= 0.0)
		{
			h = sqrt(h);
			float Length0 = -b - h;
			float Length1 = -b + h;

			Length0 = max(Length0, 0.0);
			Length1 = max(Length1, 0.0);
			Length1 = min(Length1, RayLengthU);


			const float Length0Sqr = Length0 * Length0;
			const float Length1Sqr = Length1 * Length1;
			float Integral0 = -(c * Length0 + b * Length0Sqr + Length0Sqr * Length0 / 3.0f);
			float Integral1 = -(c * Length1 + b * Length1Sqr + Length1Sqr * Length1 / 3.0f);
			RadialOpticalDepth = max(0.0, FogInstance.RadialFogExtinction * (Integral1 - Integral0) * (3.0f / 4.0f));
		}
	}

	if (FogInstance.HeightFogExtinction > 0.0f)
	{




		float StartHeight = RayStartU.z - FogInstance.HeightFogOffset; 


		const float SafeDirThreshold = 0.0001;
		const float SignRayDirUZ = RayDirU.z >= 0.0f ? 1.0f : -1.0f;
		const float SafeRayDirUZ = (abs(RayDirU.z) < SafeDirThreshold) ? SafeDirThreshold * SignRayDirUZ : RayDirU.z;









		float Factor0 = StartHeight * FogInstance.HeightFogFalloff;
		float Factor1 = SafeRayDirUZ * RayLengthU * FogInstance.HeightFogFalloff;
		Factor0 = max(-80.0f, Factor0); 

		HeightOpticalDepth += (FogInstance.HeightFogExtinction / (FogInstance.HeightFogFalloff * SafeRayDirUZ)) * (exp(-Factor0) - exp(-(Factor0 + Factor1)));
































	}





	float TR = exp(-RadialOpticalDepth);
	float TH = exp(-HeightOpticalDepth);
	float T = 1 - (1 - TR) * (1 - TH);
	float OpticalDepth = -log(T);


	float Transmittance = exp(-OpticalDepth * FogInstance.UniformScale * (1.0f / 100.0f));









	FogData.Coverage = (1.0 - Transmittance);


	FogData.IntegratedLuminanceFactor = FogData.Coverage;

	return FogData;
}

#line 298 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
float3 LocalFogVolumeEvaluateInScattering(in FLocalFogVolumeGPUInstanceData FogInstance, in FFogData FogData, in float3 RayDirWorld)
{
	float3 InScattering = 0.0f;




	InScattering += OpaqueBasePass_Shared_LFV_DirectionalLightColor * HenyeyGreensteinPhase(-FogInstance.PhaseG, dot(RayDirWorld, OpaqueBasePass_Shared_LFV_DirectionalLightDirection));


	if (View_SkyLightVolumetricScatteringIntensity > 0)
	{
		float3 SkyLighting = View_SkyLightColor.rgb * GetSkySHDiffuseSimple(RayDirWorld * -FogInstance.PhaseG);

		const float SkyVisibility = 1.0f; 
		InScattering += (SkyVisibility * View_SkyLightVolumetricScatteringIntensity) * SkyLighting;
	}


	InScattering *= FogInstance.Albedo;



	InScattering += FogInstance.Emissive;


	return InScattering * FogData.IntegratedLuminanceFactor;
}

#line 333 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
float4 GetLFVInstanceContribution(
	in uint InstanceIndex,
	in float3 CamRayTranslatedWorldOrigin,
	in float3 CamRayTranslatedWorldDir,
	in float3 DepthBufferTranslatedWorldPos,
	in bool bPlatformSupportsVolumetricFogOntranslucent)
{
	FLocalFogVolumeGPUInstanceData FogInstance = GetLocalFogVolumeGPUInstanceData(InstanceIndex);

	float3 LuminanceColor = float3(0.0f, 0.0f, 0.0f);
	float Transmittance = 1.0f;


	float3 DepthBufferPosU	= mul(DepthBufferTranslatedWorldPos - FogInstance.TranslatedWorlPos,	FogInstance.PreTranslatedInvTransform);
	float3 RayPosU			= mul(CamRayTranslatedWorldOrigin - FogInstance.TranslatedWorlPos,		FogInstance.PreTranslatedInvTransform);
	float3 RayDirU			= mul(CamRayTranslatedWorldDir,											FogInstance.PreTranslatedInvTransform);
	RayDirU.xyz				= normalize(RayDirU);

	float2 TsU = RayIntersectSphere(RayPosU, RayDirU, float4(0.0, 0.0, 0.0, 1.0));


	TsU = max(OpaqueBasePass_Shared_LFV_GlobalStartDistance.xx * FogInstance.UniformScaleInv, TsU);


	float3 ViewToDepthVector = DepthBufferPosU - RayPosU;
	float ViewToDepthVectorSqrLength = dot(ViewToDepthVector, ViewToDepthVector);
	float LengthDepthBufferU = sqrt(ViewToDepthVectorSqrLength);
	TsU = min(TsU, LengthDepthBufferU);

	if (any(TsU > 0.0))
	{

		if (OpaqueBasePass_Shared_LFV_ShouldRenderLocalFogVolumeInVolumetricFog && bPlatformSupportsVolumetricFogOntranslucent)
		{

			float CosAngle = dot(CamRayTranslatedWorldDir, View_ViewForward);
			float InvCosAngle = (CosAngle > 0.0001) ? rcp(CosAngle) : 0;
			float ExcludeDistance = View_VolumetricFogMaxDistance * InvCosAngle * FogInstance.UniformScaleInv;
			TsU = max(TsU, ExcludeDistance);
		}

		float RayTracedLengthU = max(0.0, abs(TsU.y - TsU.x));

		if (RayTracedLengthU > 0.0)
		{
			FFogData FogData = LocalFogVolumeEvaluateAnalyticalIntegral(FogInstance, RayPosU + RayDirU * TsU.x, RayDirU, RayTracedLengthU);

			LuminanceColor = LocalFogVolumeEvaluateInScattering(FogInstance, FogData, CamRayTranslatedWorldDir);
			Transmittance = 1.0 - FogData.Coverage;
		}
	}

	return float4(LuminanceColor, Transmittance);
}

#line 392 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
float4 GetLFVContribution(
	in ViewState ResolvedView,
	in uint2 TilePos,
	in float3 DepthBufferTranslatedWorldPos,
	in bool bPlatformSupportsVolumetricFogOntranslucent,
	inout uint OutLFVCount)
{
	const float3 CamRayTranslatedWorldOrigin= ResolvedView.TranslatedWorldCameraOrigin;
	const float3 CamRayWorldDir				= normalize(DepthBufferTranslatedWorldPos - CamRayTranslatedWorldOrigin);

	OutLFVCount = OpaqueBasePass_Shared_LFV_LocalFogVolumeTileDataTexture[uint3(TilePos, 0)];

	float3 LFVLuminanceColor = 0.0;
	float LFVTransmittance = 1.0;
	for (int LFVIndex = 0; LFVIndex < OutLFVCount; ++LFVIndex)
	{
		uint InstanceIndex = OpaqueBasePass_Shared_LFV_LocalFogVolumeTileDataTexture[uint3(TilePos, 1 + LFVIndex)];

		float4 InstanceContribution = GetLFVInstanceContribution(
			InstanceIndex,
			CamRayTranslatedWorldOrigin,
			CamRayWorldDir,
			DepthBufferTranslatedWorldPos,
			bPlatformSupportsVolumetricFogOntranslucent);

		LFVLuminanceColor = LFVLuminanceColor * InstanceContribution.a + InstanceContribution.rgb;
		LFVTransmittance = LFVTransmittance * InstanceContribution.a;
	}

	return float4(LFVLuminanceColor, LFVTransmittance);
}

#line 424 "/Engine/Private/LocalFogVolumes/LocalFogVolumeCommon.ush"
float4 GetLFVContribution(
	in ViewState ResolvedView,
	in uint2 TilePos,
	in float3 TranslatedWorldPosition,
	in bool bPlatformSupportsVolumetricFogOntranslucent = true)
{
	uint OutLFVCount = 0;
	return GetLFVContribution(ResolvedView, TilePos, TranslatedWorldPosition, bPlatformSupportsVolumetricFogOntranslucent, OutLFVCount);
}

#line 357 "/Engine/Private/BasePassPixelShader.usf"
void GetSkyLighting(FMaterialPixelParameters MaterialParameters, float LightmapVTPageTableResult, bool bEvaluateBackface, float3 WorldNormal, float2 LightmapUV, uint LightmapDataIndex, float3 SkyOcclusionUV3D, out float3 OutDiffuseLighting, out float3 OutSubsurfaceLighting)
{
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;

#line 393 "/Engine/Private/BasePassPixelShader.usf"

	if (OpaqueBasePass_Shared_UseBasePassSkylight > 0)
	{


		float SkyVisibility = 1;
		float GeometryTerm = 1;
		float3 SkyLightingNormal = WorldNormal;

#line 452 "/Engine/Private/BasePassPixelShader.usf"



		float3 DiffuseLookup = GetSkySHDiffuse(SkyLightingNormal) * ResolvedView.SkyLightColor.rgb;


		OutDiffuseLighting += DiffuseLookup * (SkyVisibility * GeometryTerm);









	}
}

#line 484 "/Engine/Private/BasePassPixelShader.usf"
void GetPrecomputedIndirectLightingAndSkyLight(
	FMaterialPixelParameters MaterialParameters, 
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	float LightmapVTPageTableResult,
	bool bEvaluateBackface,
	float3 DiffuseDir,
	float3 VolumetricLightmapBrickTextureUVs,
	out float3 OutDiffuseLighting,
	out float3 OutSubsurfaceLighting,
	out float OutIndirectIrradiance)
{
	OutIndirectIrradiance = 0;
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;
	float2 SkyOcclusionUV = (float2)0;
	uint SkyOcclusionDataIndex = 0u;

#line 663 "/Engine/Private/BasePassPixelShader.usf"



	OutDiffuseLighting *= View_PrecomputedIndirectLightingColorScale;
	OutSubsurfaceLighting *= View_PrecomputedIndirectLightingColorScale;

	float3 SkyDiffuseLighting;
	float3 SkySubsurfaceLighting;
	GetSkyLighting(MaterialParameters, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, SkyOcclusionUV, SkyOcclusionDataIndex, VolumetricLightmapBrickTextureUVs, SkyDiffuseLighting, SkySubsurfaceLighting);

	OutSubsurfaceLighting += SkySubsurfaceLighting;


	OutDiffuseLighting += SkyDiffuseLighting;




}

#line 772 "/Engine/Private/BasePassPixelShader.usf"
uint GetDiffuseIndirectSampleOcclusion(FGBufferData GBuffer, float3 V, float3 WorldNormal, float3 WorldBentNormal, float2 SvPosition, float MaterialAO)
{
	uint DiffuseIndirectSampleOcclusion = 0;
#line 801 "/Engine/Private/BasePassPixelShader.usf"

	return DiffuseIndirectSampleOcclusion;
}

#line 830 "/Engine/Private/BasePassPixelShader.usf"
void FPixelShaderInOut_MainPS(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	in FPixelShaderIn In,
	inout FPixelShaderOut Out,
	const uint EyeIndex,
	uint QuadPixelWriteMask=1)
{

	float4 OutVelocity = 0;


	float4 OutGBufferD = 0;


	float4 OutGBufferE = 0;

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, In.SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	float LightmapVTPageTableResult = (float)0.0f;




















	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(In.SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(In.SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, In.SvPosition, ScreenPosition, In.bIsFrontFace, TranslatedWorldPosition, BasePassInterpolants.PixelPositionExcludingWPO);
	}





















	const bool bEditorWeightedZBuffering = false;












	if (!bEditorWeightedZBuffering)
	{



		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);

	}


	const float Dither = InterleavedGradientNoise(MaterialParameters.SvPosition.xy, View_StateFrameIndexMod8);











	float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	float  Metallic = GetMaterialMetallic(PixelMaterialInputs);
	float  Specular = GetMaterialSpecular(PixelMaterialInputs);

	float Roughness = GetMaterialRoughness(PixelMaterialInputs);
	float Anisotropy = GetMaterialAnisotropy(PixelMaterialInputs);
	uint ShadingModel = GetMaterialShadingModel(PixelMaterialInputs);
	float Opacity = GetMaterialOpacity(PixelMaterialInputs);











	float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);


	float3 SubsurfaceColor = 0;

	float SubsurfaceProfile = 0;

#line 981 "/Engine/Private/BasePassPixelShader.usf"















#line 1025 "/Engine/Private/BasePassPixelShader.usf"





	[flatten]



	if ((GetPrimitiveData(MaterialParameters).Flags & 0x8) != 0 && View_ShowDecalsMask > 0)
	{


		uint ValidDBufferTargetMask = GetDBufferTargetMask(uint2(In.SvPosition.xy)) & 7;

		[branch]
		if (ValidDBufferTargetMask)
		{
			float2 BufferUV = SvPositionToBufferUV(In.SvPosition);






			FDBufferData DBufferData = GetDBufferData(BufferUV, ValidDBufferTargetMask);
			ApplyDBufferData(DBufferData, MaterialParameters.WorldNormal, SubsurfaceColor, Roughness, BaseColor, Metallic, Specular);

		}

	}


	const float BaseMaterialCoverageOverWater = Opacity;
	const float WaterVisibility = 1.0 - BaseMaterialCoverageOverWater;

	float3 VolumetricLightmapBrickTextureUVs;





	FGBufferData GBuffer = (FGBufferData)0;

	GBuffer.GBufferAO = MaterialAO;
	GBuffer.PerObjectGBufferData = GetPrimitive_PerObjectGBufferData(MaterialParameters.PrimitiveId);
	GBuffer.Depth = MaterialParameters.ScreenPosition.w;
	GBuffer.PrecomputedShadowFactors = GetPrecomputedShadowMasks(LightmapVTPageTableResult, Interpolants, MaterialParameters, VolumetricLightmapBrickTextureUVs);



	SetGBufferForShadingModel(
		GBuffer,
		MaterialParameters,
		PixelMaterialInputs,
		Opacity,
		BaseColor,
		Metallic,
		Specular,
		Roughness,
		Anisotropy,
		SubsurfaceColor,
		SubsurfaceProfile,
		Dither,
		ShadingModel
		);



#line 1121 "/Engine/Private/BasePassPixelShader.usf"


#line 1135 "/Engine/Private/BasePassPixelShader.usf"


#line 1156 "/Engine/Private/BasePassPixelShader.usf"


	const bool bChecker = CheckerFromPixelPos(MaterialParameters.SvPosition.xy);



	GBuffer.SpecularColor = ComputeF0(Specular, BaseColor, Metallic);





















	GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;


	{

		GBuffer.DiffuseColor = GBuffer.DiffuseColor * View_DiffuseOverrideParameter.w + View_DiffuseOverrideParameter.xyz;
		GBuffer.SpecularColor = GBuffer.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
	}



	if (View_RenderingReflectionCaptureMask) 

	{
		EnvBRDFApproxFullyRough(GBuffer.DiffuseColor, GBuffer.SpecularColor);

	}

	float3 InputBentNormal = MaterialParameters.WorldNormal;


	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		InputBentNormal = OctahedronToUnitVector(oct1);
	}

	const FShadingOcclusion ShadingOcclusion = ApplyBentNormal(MaterialParameters.CameraVector, InputBentNormal, GetWorldBentNormalZero(MaterialParameters), GBuffer.Roughness, MaterialAO);


	GBuffer.GBufferAO = AOMultiBounce( Luminance( GBuffer.SpecularColor ), ShadingOcclusion.SpecOcclusion ).g;

	GBuffer.DiffuseIndirectSampleOcclusion = GetDiffuseIndirectSampleOcclusion(GBuffer, MaterialParameters.CameraVector, MaterialParameters.WorldNormal, GetWorldBentNormalZero(MaterialParameters), In.SvPosition.xy, MaterialAO);



	float3 DiffuseColor = 0;
	float3 Color = 0;
	float IndirectIrradiance = 0;

	float3 ColorSeparateSpecular = 0;
	float3 ColorSeparateEmissive = 0;

	float3 DiffuseIndirectLighting = 0;
	float3 SubsurfaceIndirectLighting = 0;

	float3 SeparatedWaterMainDirLightLuminance = float3(0, 0, 0); 





		float3 DiffuseDir = ShadingOcclusion.BentNormal;
		float3 DiffuseColorForIndirect = GBuffer.DiffuseColor;






























		const bool bEvaluateBackface = GetShadingModelRequiresBackfaceLighting(GBuffer.ShadingModelID);
		GetPrecomputedIndirectLightingAndSkyLight(MaterialParameters, Interpolants, BasePassInterpolants, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, VolumetricLightmapBrickTextureUVs, DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance);

		float IndirectOcclusion = 1.0f;
		float2 NearestResolvedDepthScreenUV = 0;
		float DirectionalLightShadow = 1.0f;
		float DirectionalLightCloudShadow = 1.0f;


			float2 NDC = MaterialParameters.ScreenPosition.xy / MaterialParameters.ScreenPosition.w;
			float2 ScreenUV = NDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz;
			NearestResolvedDepthScreenUV = CalculateNearestResolvedDepthScreenUV(ScreenUV, MaterialParameters.ScreenPosition.w);

			IndirectOcclusion = GetIndirectOcclusion(NearestResolvedDepthScreenUV, HasDynamicIndirectShadowCasterRepresentation(GBuffer));
			DiffuseIndirectLighting *= IndirectOcclusion;
			SubsurfaceIndirectLighting *= IndirectOcclusion;
			IndirectIrradiance *= IndirectOcclusion;


		DiffuseColor += (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce( GBuffer.BaseColor, ShadingOcclusion.DiffOcclusion );














			uint GridIndex = 0;


				GridIndex = ComputeLightGridCellIndex((uint2)((MaterialParameters.SvPosition.xy - ResolvedView.ViewRectMin.xy) * View_LightProbeSizeRatioAndInvSizeRatio.zw), MaterialParameters.SvPosition.w, EyeIndex);







					float3 DirectionalLightAtmosphereTransmittance = 1.0f;

















					const bool bSkipMainDirLightVirtualShadowMapEvaluation = false;
					const bool bSeparateWaterMainDirLightLuminance = false;


					FDeferredLightingSplit ForwardDirectLighting = GetForwardDirectLightingSplit(
						In.SvPosition.xy,
						GridIndex, MaterialParameters.WorldPosition_CamRelative, MaterialParameters.CameraVector, GBuffer, NearestResolvedDepthScreenUV, MaterialParameters.PrimitiveId, EyeIndex, Dither, 
						DirectionalLightCloudShadow, DirectionalLightAtmosphereTransmittance, DirectionalLightShadow,
						bSeparateWaterMainDirLightLuminance, SeparatedWaterMainDirLightLuminance,
						bSkipMainDirLightVirtualShadowMapEvaluation);





						Color += ForwardDirectLighting.DiffuseLighting.rgb;
						Color += ForwardDirectLighting.SpecularLighting.rgb;





				if (GBuffer.ShadingModelID != 7)
				{
					int SingleCaptureIndex = GetPrimitiveData(MaterialParameters).SingleCaptureIndex;

					float3 ReflectionColor = GetImageBasedReflectionLighting(MaterialParameters, GBuffer.Roughness, GBuffer.SpecularColor, IndirectIrradiance, GridIndex, SingleCaptureIndex)
						* IndirectOcclusion
						* AOMultiBounce(GBuffer.SpecularColor, ShadingOcclusion.SpecOcclusion);




						Color += ReflectionColor;

				}













		float4 HeightFogging = BasePassInterpolants.VertexFog;










	float4 Fogging = HeightFogging;











	if (OpaqueBasePass_Shared_Fog_ApplyVolumetricFog > 0) 
	{

		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(In.SvPosition);
		uint2 TilePos = clamp(uint2(In.SvPosition.xy / float(OpaqueBasePass_Shared_LFV_LocalFogVolumeTilePixelSize)), uint2(0, 0), OpaqueBasePass_Shared_LFV_LocalFogVolumeTileDataTextureResolution - 1);
		float4 LocalFogVolumeContrib = GetLFVContribution(ResolvedView, TilePos, TranslatedWorldPosition);
		Fogging = float4(LocalFogVolumeContrib.rgb + Fogging.rgb * LocalFogVolumeContrib.a, LocalFogVolumeContrib.a * Fogging.a);


		float3 VolumeUV = ComputeVolumeUV(MaterialParameters.AbsoluteWorldPosition, ResolvedView.WorldToClip, ResolvedView);
		Fogging = CombineVolumetricFog(Fogging, VolumeUV, EyeIndex, GBuffer.Depth, ResolvedView);
	}
















#line 1446 "/Engine/Private/BasePassPixelShader.usf"


#line 1460 "/Engine/Private/BasePassPixelShader.usf"


	float3 Emissive = 0;











		float3 GBufferDiffuseColor = GBuffer.DiffuseColor;
		float3 GBufferSpecularColor = GBuffer.SpecularColor;
		EnvBRDFApproxFullyRough(GBufferDiffuseColor, GBufferSpecularColor);
		Color = lerp(Color, GBufferDiffuseColor, View_UnlitViewmodeMask);


	Emissive = GetMaterialEmissive(PixelMaterialInputs);




	float3 OutOfBoundsMaskLuminance = 0;




		[branch]
		if (View_OutOfBoundsMask > 0)
		{
			FPrimitiveSceneData PrimitiveData = GetPrimitiveData(MaterialParameters);

			float3 ObjectBounds =
				float3(
					PrimitiveData.ObjectBoundsX,
					PrimitiveData.ObjectBoundsY,
					PrimitiveData.ObjectBoundsZ
				);

			if (any(abs(DFFastLocalSubtractDemote(MaterialParameters.AbsoluteWorldPosition, PrimitiveData.ObjectWorldPosition)) > ObjectBounds + 1))
			{

				float3 WorldPosModulo = DFFmodByPow2Demote(MaterialParameters.AbsoluteWorldPosition, 65536.0);

				float Gradient = frac(dot(WorldPosModulo, float3(.577f, .577f, .577f) / 500.0f));
				OutOfBoundsMaskLuminance = lerp(float3(1,1,0), float3(0,1,1), Gradient.xxx > .5f);
				Emissive = OutOfBoundsMaskLuminance;
				Opacity = 1;
			}
			else if (PrimitiveData.MaxWPOExtent > 0.0f)
			{

				const float3 OffsetAmt = abs(MaterialParameters.WorldPosition_CamRelative - MaterialParameters.WorldPosition_NoOffsets_CamRelative);
				const float MaxOffsetDim = max3(OffsetAmt.x, OffsetAmt.y, OffsetAmt.z);
				const float Proximity = 1.0f - saturate(abs(MaxOffsetDim - PrimitiveData.MaxWPOExtent) / 0.05f);
				Emissive = Proximity * float3(1, 0 ,1);
				Opacity = sign(Proximity);
			}
		}















	Color += DiffuseColor;



	Color += Emissive;




#line 1600 "/Engine/Private/BasePassPixelShader.usf"


#line 1617 "/Engine/Private/BasePassPixelShader.usf"






	bool bSubstrateSubsurfaceEnable = false;
#line 2082 "/Engine/Private/BasePassPixelShader.usf"


#line 2159 "/Engine/Private/BasePassPixelShader.usf"

		{
			FLightAccumulator LightAccumulator = (FLightAccumulator)0;


			Color = Color * Fogging.a + Fogging.rgb;

#line 2178 "/Engine/Private/BasePassPixelShader.usf"

			LightAccumulator_Add(LightAccumulator, Color, 0, 1.0f, false);

			Out.MRT[0] =  ( LightAccumulator_GetResult(LightAccumulator) );




				Out.MRT[0].a = 0;

		}


#line 2263 "/Engine/Private/BasePassPixelShader.usf"









	if(bEditorWeightedZBuffering)
	{
		Out.MRT[0].a = 1;



















			clip(Out.MRT[0].a - GetMaterialOpacityMaskClipValue());

	}






	const float ViewPreExposure = View_PreExposure;








		Out.MRT[0].rgba *= ViewPreExposure;





#line 2368 "/Engine/Private/BasePassPixelShader.usf"


	Out.MRT[0].xyz = min(Out.MRT[0].xyz, View_MaterialMaxEmissiveValue.xxx);

#line 2385 "/Engine/Private/BasePassPixelShader.usf"






#line 2528 "/Engine/Private/BasePassPixelShader.usf"


}

#line 12 "/Engine/Private/PixelShaderOutputCommon.ush"
void MainPS
	(




		FVertexFactoryInterpolantsVSToPS Interpolants,



		FSharedBasePassInterpolants BasePassInterpolants,




		in   float4 SvPosition : SV_Position,		
		in FStereoPSInput StereoInput
		, in bool bIsFrontFace : SV_IsFrontFace





		, out float4 OutTarget0 : SV_Target0





















#line  85 "/Engine/Private/PixelShaderOutputCommon.ush"





















		 







	)
{











	FPixelShaderIn PixelShaderIn = (FPixelShaderIn)0;
	FPixelShaderOut PixelShaderOut = (FPixelShaderOut)0;










	PixelShaderIn.SvPosition = SvPosition;
	PixelShaderIn.bIsFrontFace = bIsFrontFace;

	StereoSetupPS(StereoInput);


	FPixelShaderInOut_MainPS(Interpolants, BasePassInterpolants, PixelShaderIn, PixelShaderOut, GetEyeIndex(StereoInput));









	OutTarget0 = PixelShaderOut.MRT[0];














#line 200 "/Engine/Private/PixelShaderOutputCommon.ush"



























}

/* BASE64_ENV

BASE64_ENV */
/* DIRECT COMPILE
-directcompile -format=PCD3D_SM6 -entry="MainPS" -shaderPlatformName=PCD3D_SM6 -supportedHardwareMask=0 -ps D:/Github/ProjectSimulacrum/Simulacrum/Saved/ShaderDebugInfo/PCD3D_SM6/Mat_Rainbow1_c02900e89b11f241/Default/FLocalVertexFactory/TBasePassPSFNoLightMapPolicySkylight/0/BasePassPixelShader.usf -nocrashreports
DIRECT COMPILE */
